
Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e9c  08007e9c  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08007e9c  08007e9c  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e9c  08007e9c  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e9c  08007e9c  00017e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ea0  08007ea0  00017ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08007ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000d8  08007f7c  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08007f7c  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb64  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c3  00000000  00000000  0002ec65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00031528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  000323f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019156  00000000  00000000  00033180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013049  00000000  00000000  0004c2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a91b  00000000  00000000  0005f31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9c3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd0  00000000  00000000  000e9c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d8 	.word	0x200000d8
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d48 	.word	0x08007d48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000dc 	.word	0x200000dc
 8000148:	08007d48 	.word	0x08007d48

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2f>:
 8000a50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a58:	bf24      	itt	cs
 8000a5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a62:	d90d      	bls.n	8000a80 <__aeabi_d2f+0x30>
 8000a64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a78:	bf08      	it	eq
 8000a7a:	f020 0001 	biceq.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a84:	d121      	bne.n	8000aca <__aeabi_d2f+0x7a>
 8000a86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8a:	bfbc      	itt	lt
 8000a8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	4770      	bxlt	lr
 8000a92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9a:	f1c2 0218 	rsb	r2, r2, #24
 8000a9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aaa:	bf18      	it	ne
 8000aac:	f040 0001 	orrne.w	r0, r0, #1
 8000ab0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000abc:	ea40 000c 	orr.w	r0, r0, ip
 8000ac0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac8:	e7cc      	b.n	8000a64 <__aeabi_d2f+0x14>
 8000aca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ace:	d107      	bne.n	8000ae0 <__aeabi_d2f+0x90>
 8000ad0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad4:	bf1e      	ittt	ne
 8000ad6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ada:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ade:	4770      	bxne	lr
 8000ae0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_frsub>:
 8000af0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	e002      	b.n	8000afc <__addsf3>
 8000af6:	bf00      	nop

08000af8 <__aeabi_fsub>:
 8000af8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000afc <__addsf3>:
 8000afc:	0042      	lsls	r2, r0, #1
 8000afe:	bf1f      	itttt	ne
 8000b00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b04:	ea92 0f03 	teqne	r2, r3
 8000b08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b10:	d06a      	beq.n	8000be8 <__addsf3+0xec>
 8000b12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1a:	bfc1      	itttt	gt
 8000b1c:	18d2      	addgt	r2, r2, r3
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	4048      	eorgt	r0, r1
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	bfb8      	it	lt
 8000b26:	425b      	neglt	r3, r3
 8000b28:	2b19      	cmp	r3, #25
 8000b2a:	bf88      	it	hi
 8000b2c:	4770      	bxhi	lr
 8000b2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4a:	bf18      	it	ne
 8000b4c:	4249      	negne	r1, r1
 8000b4e:	ea92 0f03 	teq	r2, r3
 8000b52:	d03f      	beq.n	8000bd4 <__addsf3+0xd8>
 8000b54:	f1a2 0201 	sub.w	r2, r2, #1
 8000b58:	fa41 fc03 	asr.w	ip, r1, r3
 8000b5c:	eb10 000c 	adds.w	r0, r0, ip
 8000b60:	f1c3 0320 	rsb	r3, r3, #32
 8000b64:	fa01 f103 	lsl.w	r1, r1, r3
 8000b68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6c:	d502      	bpl.n	8000b74 <__addsf3+0x78>
 8000b6e:	4249      	negs	r1, r1
 8000b70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b78:	d313      	bcc.n	8000ba2 <__addsf3+0xa6>
 8000b7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7e:	d306      	bcc.n	8000b8e <__addsf3+0x92>
 8000b80:	0840      	lsrs	r0, r0, #1
 8000b82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b86:	f102 0201 	add.w	r2, r2, #1
 8000b8a:	2afe      	cmp	r2, #254	; 0xfe
 8000b8c:	d251      	bcs.n	8000c32 <__addsf3+0x136>
 8000b8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b96:	bf08      	it	eq
 8000b98:	f020 0001 	biceq.w	r0, r0, #1
 8000b9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ba0:	4770      	bx	lr
 8000ba2:	0049      	lsls	r1, r1, #1
 8000ba4:	eb40 0000 	adc.w	r0, r0, r0
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	bf28      	it	cs
 8000bac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb0:	d2ed      	bcs.n	8000b8e <__addsf3+0x92>
 8000bb2:	fab0 fc80 	clz	ip, r0
 8000bb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bba:	ebb2 020c 	subs.w	r2, r2, ip
 8000bbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc2:	bfaa      	itet	ge
 8000bc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc8:	4252      	neglt	r2, r2
 8000bca:	4318      	orrge	r0, r3
 8000bcc:	bfbc      	itt	lt
 8000bce:	40d0      	lsrlt	r0, r2
 8000bd0:	4318      	orrlt	r0, r3
 8000bd2:	4770      	bx	lr
 8000bd4:	f092 0f00 	teq	r2, #0
 8000bd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bdc:	bf06      	itte	eq
 8000bde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be2:	3201      	addeq	r2, #1
 8000be4:	3b01      	subne	r3, #1
 8000be6:	e7b5      	b.n	8000b54 <__addsf3+0x58>
 8000be8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf0:	bf18      	it	ne
 8000bf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf6:	d021      	beq.n	8000c3c <__addsf3+0x140>
 8000bf8:	ea92 0f03 	teq	r2, r3
 8000bfc:	d004      	beq.n	8000c08 <__addsf3+0x10c>
 8000bfe:	f092 0f00 	teq	r2, #0
 8000c02:	bf08      	it	eq
 8000c04:	4608      	moveq	r0, r1
 8000c06:	4770      	bx	lr
 8000c08:	ea90 0f01 	teq	r0, r1
 8000c0c:	bf1c      	itt	ne
 8000c0e:	2000      	movne	r0, #0
 8000c10:	4770      	bxne	lr
 8000c12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c16:	d104      	bne.n	8000c22 <__addsf3+0x126>
 8000c18:	0040      	lsls	r0, r0, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c20:	4770      	bx	lr
 8000c22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c26:	bf3c      	itt	cc
 8000c28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c2c:	4770      	bxcc	lr
 8000c2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3a:	4770      	bx	lr
 8000c3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c40:	bf16      	itet	ne
 8000c42:	4608      	movne	r0, r1
 8000c44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c48:	4601      	movne	r1, r0
 8000c4a:	0242      	lsls	r2, r0, #9
 8000c4c:	bf06      	itte	eq
 8000c4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c52:	ea90 0f01 	teqeq	r0, r1
 8000c56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_ui2f>:
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e004      	b.n	8000c6c <__aeabi_i2f+0x8>
 8000c62:	bf00      	nop

08000c64 <__aeabi_i2f>:
 8000c64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c68:	bf48      	it	mi
 8000c6a:	4240      	negmi	r0, r0
 8000c6c:	ea5f 0c00 	movs.w	ip, r0
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c78:	4601      	mov	r1, r0
 8000c7a:	f04f 0000 	mov.w	r0, #0
 8000c7e:	e01c      	b.n	8000cba <__aeabi_l2f+0x2a>

08000c80 <__aeabi_ul2f>:
 8000c80:	ea50 0201 	orrs.w	r2, r0, r1
 8000c84:	bf08      	it	eq
 8000c86:	4770      	bxeq	lr
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e00a      	b.n	8000ca4 <__aeabi_l2f+0x14>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_l2f>:
 8000c90:	ea50 0201 	orrs.w	r2, r0, r1
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c9c:	d502      	bpl.n	8000ca4 <__aeabi_l2f+0x14>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	ea5f 0c01 	movs.w	ip, r1
 8000ca8:	bf02      	ittt	eq
 8000caa:	4684      	moveq	ip, r0
 8000cac:	4601      	moveq	r1, r0
 8000cae:	2000      	moveq	r0, #0
 8000cb0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb4:	bf08      	it	eq
 8000cb6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cbe:	fabc f28c 	clz	r2, ip
 8000cc2:	3a08      	subs	r2, #8
 8000cc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc8:	db10      	blt.n	8000cec <__aeabi_l2f+0x5c>
 8000cca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cce:	4463      	add	r3, ip
 8000cd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd4:	f1c2 0220 	rsb	r2, r2, #32
 8000cd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce0:	eb43 0002 	adc.w	r0, r3, r2
 8000ce4:	bf08      	it	eq
 8000ce6:	f020 0001 	biceq.w	r0, r0, #1
 8000cea:	4770      	bx	lr
 8000cec:	f102 0220 	add.w	r2, r2, #32
 8000cf0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf4:	f1c2 0220 	rsb	r2, r2, #32
 8000cf8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000d00:	eb43 0002 	adc.w	r0, r3, r2
 8000d04:	bf08      	it	eq
 8000d06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_f2uiz>:
 8000d0c:	0042      	lsls	r2, r0, #1
 8000d0e:	d20e      	bcs.n	8000d2e <__aeabi_f2uiz+0x22>
 8000d10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d14:	d30b      	bcc.n	8000d2e <__aeabi_f2uiz+0x22>
 8000d16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d1e:	d409      	bmi.n	8000d34 <__aeabi_f2uiz+0x28>
 8000d20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d28:	fa23 f002 	lsr.w	r0, r3, r2
 8000d2c:	4770      	bx	lr
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	4770      	bx	lr
 8000d34:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d38:	d101      	bne.n	8000d3e <__aeabi_f2uiz+0x32>
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	d102      	bne.n	8000d44 <__aeabi_f2uiz+0x38>
 8000d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d42:	4770      	bx	lr
 8000d44:	f04f 0000 	mov.w	r0, #0
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <Delay_us>:
#include "DHT.h"


DHT_Name dht11;

void Delay_us(uint16_t duration){
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(dht11.timer, 0);
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <Delay_us+0x30>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(dht11.timer) < duration){}
 8000d60:	bf00      	nop
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <Delay_us+0x30>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d3f8      	bcc.n	8000d62 <Delay_us+0x16>
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	200000f4 	.word	0x200000f4

08000d80 <SetPinIn>:

void SetPinIn(void){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin*/
	  GPIO_InitStruct.Pin = dht11.DHT_pin;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <SetPinIn+0x38>)
 8000d94:	889b      	ldrh	r3, [r3, #4]
 8000d96:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
	  HAL_GPIO_Init(dht11.DHT_port, &GPIO_InitStruct);
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SetPinIn+0x38>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	463a      	mov	r2, r7
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f002 ff2b 	bl	8003c04 <HAL_GPIO_Init>
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200000f4 	.word	0x200000f4

08000dbc <SetPinOut>:

void SetPinOut(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin*/
	  GPIO_InitStruct.Pin = dht11.DHT_pin;
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <SetPinOut+0x3c>)
 8000dd0:	889b      	ldrh	r3, [r3, #4]
 8000dd2:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(dht11.DHT_port, &GPIO_InitStruct);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SetPinOut+0x3c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	463a      	mov	r2, r7
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 ff0b 	bl	8003c04 <HAL_GPIO_Init>
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000f4 	.word	0x200000f4

08000dfc <WritePin>:

static void WritePin(uint8_t value){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(dht11.DHT_port, dht11.DHT_pin, value);
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <WritePin+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <WritePin+0x24>)
 8000e0c:	8891      	ldrh	r1, [r2, #4]
 8000e0e:	79fa      	ldrb	r2, [r7, #7]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 f892 	bl	8003f3a <HAL_GPIO_WritePin>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000f4 	.word	0x200000f4

08000e24 <ReadPin>:

static uint8_t ReadPin(void){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(dht11.DHT_port, dht11.DHT_pin);
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <ReadPin+0x1c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <ReadPin+0x1c>)
 8000e2e:	8892      	ldrh	r2, [r2, #4]
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 f86a 	bl	8003f0c <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200000f4 	.word	0x200000f4

08000e44 <DHT_Init>:

//===========================HIGH LEVEL FUNCTION===========================//
void DHT_Init(GPIO_TypeDef* DHT_port, uint16_t DHT_pin, TIM_HandleTypeDef* timer){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	817b      	strh	r3, [r7, #10]
	dht11.DHT_port = DHT_port;
 8000e52:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <DHT_Init+0x44>)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6013      	str	r3, [r2, #0]
	dht11.DHT_pin = DHT_pin;
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <DHT_Init+0x44>)
 8000e5a:	897b      	ldrh	r3, [r7, #10]
 8000e5c:	8093      	strh	r3, [r2, #4]
	dht11.timer = timer;
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <DHT_Init+0x44>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6093      	str	r3, [r2, #8]

	dht11.humi = dht11.temp = 0;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <DHT_Init+0x44>)
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <DHT_Init+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <DHT_Init+0x44>)
 8000e72:	6113      	str	r3, [r2, #16]

	SetPinOut();
 8000e74:	f7ff ffa2 	bl	8000dbc <SetPinOut>
	WritePin(1);
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff ffbf 	bl	8000dfc <WritePin>
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200000f4 	.word	0x200000f4

08000e8c <DHT_Read>:


void DHT_Read(void){
 8000e8c:	b5b0      	push	{r4, r5, r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0


	uint16_t time_out = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	81fb      	strh	r3, [r7, #14]
	uint8_t data[5] = {0, 0, 0, 0, 0};
 8000e96:	4a79      	ldr	r2, [pc, #484]	; (800107c <DHT_Read+0x1f0>)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e9e:	6018      	str	r0, [r3, #0]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	7019      	strb	r1, [r3, #0]
	data[2] integral Temp
	data[3] decimal Temp
	data[4] SUM
*/

	SetPinOut();
 8000ea4:	f7ff ff8a 	bl	8000dbc <SetPinOut>
	WritePin(0);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff ffa7 	bl	8000dfc <WritePin>
	HAL_Delay(20);
 8000eae:	2014      	movs	r0, #20
 8000eb0:	f002 fcf4 	bl	800389c <HAL_Delay>


	SetPinIn();
 8000eb4:	f7ff ff64 	bl	8000d80 <SetPinIn>

	Delay_us(40);
 8000eb8:	2028      	movs	r0, #40	; 0x28
 8000eba:	f7ff ff47 	bl	8000d4c <Delay_us>

	if(!ReadPin()){
 8000ebe:	f7ff ffb1 	bl	8000e24 <ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <DHT_Read+0x42>
		Delay_us(80);
 8000ec8:	2050      	movs	r0, #80	; 0x50
 8000eca:	f7ff ff3f 	bl	8000d4c <Delay_us>
	}



	for(time_out = 0; (time_out < 100) && ReadPin(); time_out++);
 8000ece:	2300      	movs	r3, #0
 8000ed0:	81fb      	strh	r3, [r7, #14]
 8000ed2:	e002      	b.n	8000eda <DHT_Read+0x4e>
 8000ed4:	89fb      	ldrh	r3, [r7, #14]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	81fb      	strh	r3, [r7, #14]
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	2b63      	cmp	r3, #99	; 0x63
 8000ede:	d804      	bhi.n	8000eea <DHT_Read+0x5e>
 8000ee0:	f7ff ffa0 	bl	8000e24 <ReadPin>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f4      	bne.n	8000ed4 <DHT_Read+0x48>

//	start DHT successful => read
	for(uint8_t i = 0; i < 5; i++){
 8000eea:	2300      	movs	r3, #0
 8000eec:	737b      	strb	r3, [r7, #13]
 8000eee:	e05c      	b.n	8000faa <DHT_Read+0x11e>
		for(uint8_t j = 0; j < 8; j++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	733b      	strb	r3, [r7, #12]
 8000ef4:	e053      	b.n	8000f9e <DHT_Read+0x112>

			for(time_out = 0; (time_out < 100) && !ReadPin(); time_out++);
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	81fb      	strh	r3, [r7, #14]
 8000efa:	e002      	b.n	8000f02 <DHT_Read+0x76>
 8000efc:	89fb      	ldrh	r3, [r7, #14]
 8000efe:	3301      	adds	r3, #1
 8000f00:	81fb      	strh	r3, [r7, #14]
 8000f02:	89fb      	ldrh	r3, [r7, #14]
 8000f04:	2b63      	cmp	r3, #99	; 0x63
 8000f06:	d804      	bhi.n	8000f12 <DHT_Read+0x86>
 8000f08:	f7ff ff8c 	bl	8000e24 <ReadPin>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f4      	beq.n	8000efc <DHT_Read+0x70>

			Delay_us(40);
 8000f12:	2028      	movs	r0, #40	; 0x28
 8000f14:	f7ff ff1a 	bl	8000d4c <Delay_us>

			if(!ReadPin()) data[i] &= (~(1<<(7-j)));
 8000f18:	f7ff ff84 	bl	8000e24 <ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d117      	bne.n	8000f52 <DHT_Read+0xc6>
 8000f22:	7b7b      	ldrb	r3, [r7, #13]
 8000f24:	3310      	adds	r3, #16
 8000f26:	443b      	add	r3, r7
 8000f28:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f2c:	b25a      	sxtb	r2, r3
 8000f2e:	7b3b      	ldrb	r3, [r7, #12]
 8000f30:	f1c3 0307 	rsb	r3, r3, #7
 8000f34:	2101      	movs	r1, #1
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	4013      	ands	r3, r2
 8000f42:	b25a      	sxtb	r2, r3
 8000f44:	7b7b      	ldrb	r3, [r7, #13]
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	3310      	adds	r3, #16
 8000f4a:	443b      	add	r3, r7
 8000f4c:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000f50:	e014      	b.n	8000f7c <DHT_Read+0xf0>
			else data[i] |= (1 << (7-j));
 8000f52:	7b7b      	ldrb	r3, [r7, #13]
 8000f54:	3310      	adds	r3, #16
 8000f56:	443b      	add	r3, r7
 8000f58:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f5c:	b25a      	sxtb	r2, r3
 8000f5e:	7b3b      	ldrb	r3, [r7, #12]
 8000f60:	f1c3 0307 	rsb	r3, r3, #7
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b25a      	sxtb	r2, r3
 8000f70:	7b7b      	ldrb	r3, [r7, #13]
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	3310      	adds	r3, #16
 8000f76:	443b      	add	r3, r7
 8000f78:	f803 2c10 	strb.w	r2, [r3, #-16]


			for(time_out = 0; (time_out < 100) && ReadPin(); time_out++);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	81fb      	strh	r3, [r7, #14]
 8000f80:	e002      	b.n	8000f88 <DHT_Read+0xfc>
 8000f82:	89fb      	ldrh	r3, [r7, #14]
 8000f84:	3301      	adds	r3, #1
 8000f86:	81fb      	strh	r3, [r7, #14]
 8000f88:	89fb      	ldrh	r3, [r7, #14]
 8000f8a:	2b63      	cmp	r3, #99	; 0x63
 8000f8c:	d804      	bhi.n	8000f98 <DHT_Read+0x10c>
 8000f8e:	f7ff ff49 	bl	8000e24 <ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f4      	bne.n	8000f82 <DHT_Read+0xf6>
		for(uint8_t j = 0; j < 8; j++){
 8000f98:	7b3b      	ldrb	r3, [r7, #12]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	733b      	strb	r3, [r7, #12]
 8000f9e:	7b3b      	ldrb	r3, [r7, #12]
 8000fa0:	2b07      	cmp	r3, #7
 8000fa2:	d9a8      	bls.n	8000ef6 <DHT_Read+0x6a>
	for(uint8_t i = 0; i < 5; i++){
 8000fa4:	7b7b      	ldrb	r3, [r7, #13]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	737b      	strb	r3, [r7, #13]
 8000faa:	7b7b      	ldrb	r3, [r7, #13]
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d99f      	bls.n	8000ef0 <DHT_Read+0x64>
		}
	}

	if(data[4] != (data[0] + data[1] + data[2] + data[3]))
 8000fb0:	793b      	ldrb	r3, [r7, #4]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	783b      	ldrb	r3, [r7, #0]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	787b      	ldrb	r3, [r7, #1]
 8000fba:	440b      	add	r3, r1
 8000fbc:	78b9      	ldrb	r1, [r7, #2]
 8000fbe:	440b      	add	r3, r1
 8000fc0:	78f9      	ldrb	r1, [r7, #3]
 8000fc2:	440b      	add	r3, r1
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d155      	bne.n	8001074 <DHT_Read+0x1e8>
		return;

	humi = (float)(data[0] * 1.0 + data[1] / 10.0);
 8000fc8:	783b      	ldrb	r3, [r7, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fac4 	bl	8000558 <__aeabi_i2d>
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	460d      	mov	r5, r1
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fabe 	bl	8000558 <__aeabi_i2d>
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <DHT_Read+0x1f4>)
 8000fe2:	f7ff fc4d 	bl	8000880 <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4620      	mov	r0, r4
 8000fec:	4629      	mov	r1, r5
 8000fee:	f7ff f967 	bl	80002c0 <__adddf3>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fd29 	bl	8000a50 <__aeabi_d2f>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fe83 	bl	8000d0c <__aeabi_f2uiz>
 8001006:	4603      	mov	r3, r0
 8001008:	817b      	strh	r3, [r7, #10]
	temp = (float)(data[2] * 1.0 + data[3] / 10.0);
 800100a:	78bb      	ldrb	r3, [r7, #2]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff faa3 	bl	8000558 <__aeabi_i2d>
 8001012:	4604      	mov	r4, r0
 8001014:	460d      	mov	r5, r1
 8001016:	78fb      	ldrb	r3, [r7, #3]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa9d 	bl	8000558 <__aeabi_i2d>
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <DHT_Read+0x1f4>)
 8001024:	f7ff fc2c 	bl	8000880 <__aeabi_ddiv>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4620      	mov	r0, r4
 800102e:	4629      	mov	r1, r5
 8001030:	f7ff f946 	bl	80002c0 <__adddf3>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fd08 	bl	8000a50 <__aeabi_d2f>
 8001040:	4603      	mov	r3, r0
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fe62 	bl	8000d0c <__aeabi_f2uiz>
 8001048:	4603      	mov	r3, r0
 800104a:	813b      	strh	r3, [r7, #8]

	dht11.humi = humi;
 800104c:	897b      	ldrh	r3, [r7, #10]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe04 	bl	8000c5c <__aeabi_ui2f>
 8001054:	4603      	mov	r3, r0
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <DHT_Read+0x1f8>)
 8001058:	6113      	str	r3, [r2, #16]
	dht11.temp = temp;
 800105a:	893b      	ldrh	r3, [r7, #8]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fdfd 	bl	8000c5c <__aeabi_ui2f>
 8001062:	4603      	mov	r3, r0
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <DHT_Read+0x1f8>)
 8001066:	60d3      	str	r3, [r2, #12]

	SetPinOut();
 8001068:	f7ff fea8 	bl	8000dbc <SetPinOut>
	WritePin(1);
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff fec5 	bl	8000dfc <WritePin>
 8001072:	e000      	b.n	8001076 <DHT_Read+0x1ea>
		return;
 8001074:	bf00      	nop
}
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bdb0      	pop	{r4, r5, r7, pc}
 800107c:	08007d60 	.word	0x08007d60
 8001080:	40240000 	.word	0x40240000
 8001084:	200000f4 	.word	0x200000f4

08001088 <DHT_GetTemp>:

float DHT_GetTemp(void){
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
	return dht11.temp;
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <DHT_GetTemp+0x10>)
 800108e:	68db      	ldr	r3, [r3, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	200000f4 	.word	0x200000f4

0800109c <DHT_GetHumi>:

float DHT_GetHumi(void){
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
	return dht11.humi;
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <DHT_GetHumi+0x10>)
 80010a2:	691b      	ldr	r3, [r3, #16]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	200000f4 	.word	0x200000f4

080010b0 <BCD2DEC>:
#include "ds130x.h"


I2C_HandleTypeDef *i2c_ds;

uint8_t BCD2DEC(uint8_t bcd){
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
	uint8_t low, high;
	low = bcd & 0x0F;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 030f 	and.w	r3, r3, #15
 80010c0:	73fb      	strb	r3, [r7, #15]
	high = (bcd >> 4) * 10;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	73bb      	strb	r3, [r7, #14]

	return (low + high);
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	4413      	add	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t dec){
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	uint8_t low, high;
	low = dec % 10;
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <DEC2BCD+0x44>)
 80010f2:	fba3 1302 	umull	r1, r3, r3, r2
 80010f6:	08d9      	lsrs	r1, r3, #3
 80010f8:	460b      	mov	r3, r1
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	73fb      	strb	r3, [r7, #15]
	high = (dec / 10) << 4;
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <DEC2BCD+0x44>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	08db      	lsrs	r3, r3, #3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	73bb      	strb	r3, [r7, #14]

	return (low + high);
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	4413      	add	r3, r2
 800111a:	b2db      	uxtb	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	cccccccd 	.word	0xcccccccd

0800112c <DS_Init>:

void DS_Init(I2C_HandleTypeDef* hi2c){
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	i2c_ds = hi2c;
 8001134:	4a03      	ldr	r2, [pc, #12]	; (8001144 <DS_Init+0x18>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000108 	.word	0x20000108

08001148 <DS_Write>:


void DS_Write(uint8_t address, uint8_t data){
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]
	uint8_t byte[2] = { address, DEC2BCD(data) };
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	733b      	strb	r3, [r7, #12]
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ffc0 	bl	80010e4 <DEC2BCD>
 8001164:	4603      	mov	r3, r0
 8001166:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(i2c_ds, ADDRESS_DS130X << 1, byte, 2, 1000);
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <DS_Write+0x40>)
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	f107 020c 	add.w	r2, r7, #12
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2302      	movs	r3, #2
 8001178:	21d0      	movs	r1, #208	; 0xd0
 800117a:	f003 f83b 	bl	80041f4 <HAL_I2C_Master_Transmit>
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000108 	.word	0x20000108

0800118c <DS_Read>:

uint8_t DS_Read(uint8_t address){
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af02      	add	r7, sp, #8
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(i2c_ds, ADDRESS_DS130X << 1, &address, 1, 1000);
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <DS_Read+0x4c>)
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	1dfa      	adds	r2, r7, #7
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	21d0      	movs	r1, #208	; 0xd0
 80011aa:	f003 f823 	bl	80041f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(i2c_ds, ADDRESS_DS130X << 1, &value, 1, 1000);
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <DS_Read+0x4c>)
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	f107 020f 	add.w	r2, r7, #15
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	21d0      	movs	r1, #208	; 0xd0
 80011c0:	f003 f916 	bl	80043f0 <HAL_I2C_Master_Receive>

	return BCD2DEC(value);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff72 	bl	80010b0 <BCD2DEC>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000108 	.word	0x20000108

080011dc <DS_SetupTimForFirstProgram>:

void DS_SetupTimForFirstProgram(void){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	if(DS_Read(ADDRESS_FIRST_PROGRAM) == 1) return;
 80011e0:	2025      	movs	r0, #37	; 0x25
 80011e2:	f7ff ffd3 	bl	800118c <DS_Read>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d02c      	beq.n	8001246 <DS_SetupTimForFirstProgram+0x6a>

	DS_Write(ADDRESS_HOUR, 1);
 80011ec:	2101      	movs	r1, #1
 80011ee:	2002      	movs	r0, #2
 80011f0:	f7ff ffaa 	bl	8001148 <DS_Write>
	DS_Write(ADDRESS_MINUTE, 1);
 80011f4:	2101      	movs	r1, #1
 80011f6:	2001      	movs	r0, #1
 80011f8:	f7ff ffa6 	bl	8001148 <DS_Write>
	DS_Write(ADDRESS_SECOND, 1);
 80011fc:	2101      	movs	r1, #1
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff ffa2 	bl	8001148 <DS_Write>

	DS_Write(ADDRESS_WEEK_DAY, 1);
 8001204:	2101      	movs	r1, #1
 8001206:	2003      	movs	r0, #3
 8001208:	f7ff ff9e 	bl	8001148 <DS_Write>
	DS_Write(ADDRESS_DATE, 1);
 800120c:	2101      	movs	r1, #1
 800120e:	2004      	movs	r0, #4
 8001210:	f7ff ff9a 	bl	8001148 <DS_Write>
	DS_Write(ADDRESS_MONTH, 1);
 8001214:	2101      	movs	r1, #1
 8001216:	2005      	movs	r0, #5
 8001218:	f7ff ff96 	bl	8001148 <DS_Write>
	DS_Write(ADDRESS_YEAR, 1);
 800121c:	2101      	movs	r1, #1
 800121e:	2006      	movs	r0, #6
 8001220:	f7ff ff92 	bl	8001148 <DS_Write>

	DS_Write(ADDRESS_HOUR_ALARM, 1);
 8001224:	2101      	movs	r1, #1
 8001226:	2026      	movs	r0, #38	; 0x26
 8001228:	f7ff ff8e 	bl	8001148 <DS_Write>
	DS_Write(ADDRESS_MIN_ALARM, 1);
 800122c:	2101      	movs	r1, #1
 800122e:	2027      	movs	r0, #39	; 0x27
 8001230:	f7ff ff8a 	bl	8001148 <DS_Write>
	DS_Write(ADDRESS_FLAG_ALARM, 0);
 8001234:	2100      	movs	r1, #0
 8001236:	2028      	movs	r0, #40	; 0x28
 8001238:	f7ff ff86 	bl	8001148 <DS_Write>

	DS_Write(ADDRESS_FIRST_PROGRAM, 1);
 800123c:	2101      	movs	r1, #1
 800123e:	2025      	movs	r0, #37	; 0x25
 8001240:	f7ff ff82 	bl	8001148 <DS_Write>
 8001244:	e000      	b.n	8001248 <DS_SetupTimForFirstProgram+0x6c>
	if(DS_Read(ADDRESS_FIRST_PROGRAM) == 1) return;
 8001246:	bf00      	nop

}
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <ReadTimeDs1307>:

#include "fsm.h"

uint8_t mode_sys;

void ReadTimeDs1307(void){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	_data_sys.hour = DS_Read(ADDRESS_HOUR);
 8001250:	2002      	movs	r0, #2
 8001252:	f7ff ff9b 	bl	800118c <DS_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <ReadTimeDs1307+0x94>)
 800125c:	701a      	strb	r2, [r3, #0]
	_data_sys.min = DS_Read(ADDRESS_MINUTE);
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff ff94 	bl	800118c <DS_Read>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <ReadTimeDs1307+0x94>)
 800126a:	705a      	strb	r2, [r3, #1]
	_data_sys.sec = DS_Read(ADDRESS_SECOND);
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff ff8d 	bl	800118c <DS_Read>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <ReadTimeDs1307+0x94>)
 8001278:	709a      	strb	r2, [r3, #2]
	_data_sys.week_day = DS_Read(ADDRESS_WEEK_DAY);
 800127a:	2003      	movs	r0, #3
 800127c:	f7ff ff86 	bl	800118c <DS_Read>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <ReadTimeDs1307+0x94>)
 8001286:	719a      	strb	r2, [r3, #6]
	_data_sys.day = DS_Read(ADDRESS_DATE);
 8001288:	2004      	movs	r0, #4
 800128a:	f7ff ff7f 	bl	800118c <DS_Read>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <ReadTimeDs1307+0x94>)
 8001294:	715a      	strb	r2, [r3, #5]
	_data_sys.month = DS_Read(ADDRESS_MONTH);
 8001296:	2005      	movs	r0, #5
 8001298:	f7ff ff78 	bl	800118c <DS_Read>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <ReadTimeDs1307+0x94>)
 80012a2:	711a      	strb	r2, [r3, #4]
	_data_sys.year = DS_Read(ADDRESS_YEAR);
 80012a4:	2006      	movs	r0, #6
 80012a6:	f7ff ff71 	bl	800118c <DS_Read>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <ReadTimeDs1307+0x94>)
 80012b0:	70da      	strb	r2, [r3, #3]

	_data_sys.alarm_hour = DS_Read(ADDRESS_HOUR_ALARM);
 80012b2:	2026      	movs	r0, #38	; 0x26
 80012b4:	f7ff ff6a 	bl	800118c <DS_Read>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <ReadTimeDs1307+0x94>)
 80012be:	71da      	strb	r2, [r3, #7]
	_data_sys.alarm_min = DS_Read(ADDRESS_MIN_ALARM);
 80012c0:	2027      	movs	r0, #39	; 0x27
 80012c2:	f7ff ff63 	bl	800118c <DS_Read>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <ReadTimeDs1307+0x94>)
 80012cc:	721a      	strb	r2, [r3, #8]
	_data_sys.alarm_flag = DS_Read(ADDRESS_FLAG_ALARM);
 80012ce:	2028      	movs	r0, #40	; 0x28
 80012d0:	f7ff ff5c 	bl	800118c <DS_Read>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b01      	ldr	r3, [pc, #4]	; (80012e0 <ReadTimeDs1307+0x94>)
 80012da:	725a      	strb	r2, [r3, #9]
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000110 	.word	0x20000110

080012e4 <ConvertWeekdayToStr>:

char* ConvertWeekdayToStr(uint8_t x){
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	switch(x){
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d81e      	bhi.n	8001334 <ConvertWeekdayToStr+0x50>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <ConvertWeekdayToStr+0x18>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	08001319 	.word	0x08001319
 8001300:	0800131d 	.word	0x0800131d
 8001304:	08001321 	.word	0x08001321
 8001308:	08001325 	.word	0x08001325
 800130c:	08001329 	.word	0x08001329
 8001310:	0800132d 	.word	0x0800132d
 8001314:	08001331 	.word	0x08001331
	case 1:
		return "MON";
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <ConvertWeekdayToStr+0x5c>)
 800131a:	e00c      	b.n	8001336 <ConvertWeekdayToStr+0x52>
		break;
	case 2:
		return "TUE";
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <ConvertWeekdayToStr+0x60>)
 800131e:	e00a      	b.n	8001336 <ConvertWeekdayToStr+0x52>
		break;
	case 3:
		return "WED";
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <ConvertWeekdayToStr+0x64>)
 8001322:	e008      	b.n	8001336 <ConvertWeekdayToStr+0x52>
		break;
	case 4:
		return "THU";
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <ConvertWeekdayToStr+0x68>)
 8001326:	e006      	b.n	8001336 <ConvertWeekdayToStr+0x52>
		break;
	case 5:
		return "FRI";
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <ConvertWeekdayToStr+0x6c>)
 800132a:	e004      	b.n	8001336 <ConvertWeekdayToStr+0x52>
		break;
	case 6:
		return "SAT";
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <ConvertWeekdayToStr+0x70>)
 800132e:	e002      	b.n	8001336 <ConvertWeekdayToStr+0x52>
		break;
	case 7:
		return "SUN";
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <ConvertWeekdayToStr+0x74>)
 8001332:	e000      	b.n	8001336 <ConvertWeekdayToStr+0x52>
		break;
	}
	return "";
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <ConvertWeekdayToStr+0x78>)
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	08007d68 	.word	0x08007d68
 8001344:	08007d6c 	.word	0x08007d6c
 8001348:	08007d70 	.word	0x08007d70
 800134c:	08007d74 	.word	0x08007d74
 8001350:	08007d78 	.word	0x08007d78
 8001354:	08007d7c 	.word	0x08007d7c
 8001358:	08007d80 	.word	0x08007d80
 800135c:	08007d84 	.word	0x08007d84

08001360 <FSM_Init>:


//===========================HIGH LEVEL FUNCTION===========================//
void FSM_Init(void){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	mode_sys = INIT;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <FSM_Init+0x20>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
	_time_screen = 50;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <FSM_Init+0x24>)
 800136c:	2232      	movs	r2, #50	; 0x32
 800136e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <FSM_Init+0x28>)
 8001376:	f002 fde0 	bl	8003f3a <HAL_GPIO_WritePin>
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000010c 	.word	0x2000010c
 8001384:	20000126 	.word	0x20000126
 8001388:	40010800 	.word	0x40010800

0800138c <FSM_SystemControl>:

void FSM_SystemControl(void){
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	switch(mode_sys){
 8001390:	4b98      	ldr	r3, [pc, #608]	; (80015f4 <FSM_SystemControl+0x268>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b0d      	cmp	r3, #13
 8001396:	f201 802b 	bhi.w	80023f0 <FSM_SystemControl+0x1064>
 800139a:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <FSM_SystemControl+0x14>)
 800139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a0:	080013d9 	.word	0x080013d9
 80013a4:	08001443 	.word	0x08001443
 80013a8:	0800163d 	.word	0x0800163d
 80013ac:	080023f1 	.word	0x080023f1
 80013b0:	080017d9 	.word	0x080017d9
 80013b4:	0800191d 	.word	0x0800191d
 80013b8:	08001a59 	.word	0x08001a59
 80013bc:	08001bc3 	.word	0x08001bc3
 80013c0:	08001d37 	.word	0x08001d37
 80013c4:	08001e7d 	.word	0x08001e7d
 80013c8:	08001fff 	.word	0x08001fff
 80013cc:	0800208f 	.word	0x0800208f
 80013d0:	080021c1 	.word	0x080021c1
 80013d4:	08002315 	.word	0x08002315
	case INIT:
		CLCD_PrintStringBuffer(0, 0, SCREEN_INIT_0);
 80013d8:	4a87      	ldr	r2, [pc, #540]	; (80015f8 <FSM_SystemControl+0x26c>)
 80013da:	2100      	movs	r1, #0
 80013dc:	2000      	movs	r0, #0
 80013de:	f001 fa67 	bl	80028b0 <CLCD_PrintStringBuffer>
		CLCD_PrintStringBuffer(1, 0, SCREEN_INIT_1);
 80013e2:	4a86      	ldr	r2, [pc, #536]	; (80015fc <FSM_SystemControl+0x270>)
 80013e4:	2100      	movs	r1, #0
 80013e6:	2001      	movs	r0, #1
 80013e8:	f001 fa62 	bl	80028b0 <CLCD_PrintStringBuffer>

		DS_SetupTimForFirstProgram();
 80013ec:	f7ff fef6 	bl	80011dc <DS_SetupTimForFirstProgram>

		if(_time_screen < 5){
 80013f0:	4b83      	ldr	r3, [pc, #524]	; (8001600 <FSM_SystemControl+0x274>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	f200 87e2 	bhi.w	80023be <FSM_SystemControl+0x1032>
			_time_screen = TIME_SCREEN_TIME;
 80013fa:	4b81      	ldr	r3, [pc, #516]	; (8001600 <FSM_SystemControl+0x274>)
 80013fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001400:	801a      	strh	r2, [r3, #0]
			ReadTimeDs1307();
 8001402:	f7ff ff23 	bl	800124c <ReadTimeDs1307>

			CLCD_CreateChar(7, alarm_icon);
 8001406:	497f      	ldr	r1, [pc, #508]	; (8001604 <FSM_SystemControl+0x278>)
 8001408:	2007      	movs	r0, #7
 800140a:	f001 fbb3 	bl	8002b74 <CLCD_CreateChar>
			CLCD_InitBigDigit();
 800140e:	f001 fbd7 	bl	8002bc0 <CLCD_InitBigDigit>

			CLCD_PrintStringBuffer(0, 0, SCREEN_TIME_0);
 8001412:	4a7d      	ldr	r2, [pc, #500]	; (8001608 <FSM_SystemControl+0x27c>)
 8001414:	2100      	movs	r1, #0
 8001416:	2000      	movs	r0, #0
 8001418:	f001 fa4a 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_TIME_1);
 800141c:	4a7a      	ldr	r2, [pc, #488]	; (8001608 <FSM_SystemControl+0x27c>)
 800141e:	2100      	movs	r1, #0
 8001420:	2001      	movs	r0, #1
 8001422:	f001 fa45 	bl	80028b0 <CLCD_PrintStringBuffer>

			if(_data_sys.alarm_flag) CLCD_PrintCharBuffer(0, INDEX_LCD_ICON_ALARM, 7);
 8001426:	4b79      	ldr	r3, [pc, #484]	; (800160c <FSM_SystemControl+0x280>)
 8001428:	7a5b      	ldrb	r3, [r3, #9]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <FSM_SystemControl+0xac>
 800142e:	2207      	movs	r2, #7
 8001430:	210e      	movs	r1, #14
 8001432:	2000      	movs	r0, #0
 8001434:	f001 fa00 	bl	8002838 <CLCD_PrintCharBuffer>

			mode_sys = DISPLAY_TIME;
 8001438:	4b6e      	ldr	r3, [pc, #440]	; (80015f4 <FSM_SystemControl+0x268>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800143e:	f000 bfbe 	b.w	80023be <FSM_SystemControl+0x1032>
	case DISPLAY_TIME:
//		Blink COLON every 1000ms
		if(_counter_time_elapsed % 40 < 20){
 8001442:	4b73      	ldr	r3, [pc, #460]	; (8001610 <FSM_SystemControl+0x284>)
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	4b73      	ldr	r3, [pc, #460]	; (8001614 <FSM_SystemControl+0x288>)
 8001448:	fba3 1302 	umull	r1, r3, r3, r2
 800144c:	0959      	lsrs	r1, r3, #5
 800144e:	460b      	mov	r3, r1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b13      	cmp	r3, #19
 800145c:	d80a      	bhi.n	8001474 <FSM_SystemControl+0xe8>
			CLCD_PrintCharBuffer(0, INDEX_COLON, '.');
 800145e:	222e      	movs	r2, #46	; 0x2e
 8001460:	2106      	movs	r1, #6
 8001462:	2000      	movs	r0, #0
 8001464:	f001 f9e8 	bl	8002838 <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, INDEX_COLON, '.');
 8001468:	222e      	movs	r2, #46	; 0x2e
 800146a:	2106      	movs	r1, #6
 800146c:	2001      	movs	r0, #1
 800146e:	f001 f9e3 	bl	8002838 <CLCD_PrintCharBuffer>
 8001472:	e009      	b.n	8001488 <FSM_SystemControl+0xfc>
		}
		else {
			CLCD_PrintCharBuffer(0, INDEX_COLON, ' ');
 8001474:	2220      	movs	r2, #32
 8001476:	2106      	movs	r1, #6
 8001478:	2000      	movs	r0, #0
 800147a:	f001 f9dd 	bl	8002838 <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, INDEX_COLON, ' ');
 800147e:	2220      	movs	r2, #32
 8001480:	2106      	movs	r1, #6
 8001482:	2001      	movs	r0, #1
 8001484:	f001 f9d8 	bl	8002838 <CLCD_PrintCharBuffer>
		}

//		Read time every 500ms
		if(_counter_time_elapsed % 10 == 0){
 8001488:	4b61      	ldr	r3, [pc, #388]	; (8001610 <FSM_SystemControl+0x284>)
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	4b61      	ldr	r3, [pc, #388]	; (8001614 <FSM_SystemControl+0x288>)
 800148e:	fba3 1302 	umull	r1, r3, r3, r2
 8001492:	08d9      	lsrs	r1, r3, #3
 8001494:	460b      	mov	r3, r1
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <FSM_SystemControl+0x11c>
			ReadTimeDs1307();
 80014a4:	f7ff fed2 	bl	800124c <ReadTimeDs1307>
		}

		CLCD_PrintBigNumBuffer(INDEX_LCD_HOUR, _data_sys.hour);
 80014a8:	4b58      	ldr	r3, [pc, #352]	; (800160c <FSM_SystemControl+0x280>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	4619      	mov	r1, r3
 80014b0:	2000      	movs	r0, #0
 80014b2:	f001 fd1d 	bl	8002ef0 <CLCD_PrintBigNumBuffer>
		CLCD_PrintBigNumBuffer(INDEX_LCD_MIN, _data_sys.min);
 80014b6:	4b55      	ldr	r3, [pc, #340]	; (800160c <FSM_SystemControl+0x280>)
 80014b8:	785b      	ldrb	r3, [r3, #1]
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	2007      	movs	r0, #7
 80014c0:	f001 fd16 	bl	8002ef0 <CLCD_PrintBigNumBuffer>

		CLCD_PrintNumBuffer(1, INDEX_LCD_SEC, _data_sys.sec);
 80014c4:	4b51      	ldr	r3, [pc, #324]	; (800160c <FSM_SystemControl+0x280>)
 80014c6:	789b      	ldrb	r3, [r3, #2]
 80014c8:	461a      	mov	r2, r3
 80014ca:	210e      	movs	r1, #14
 80014cc:	2001      	movs	r0, #1
 80014ce:	f001 fa25 	bl	800291c <CLCD_PrintNumBuffer>

//		Stick 1500ms
		if(IN_IsPressed_ms(BT_MODE, 1500)){
 80014d2:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80014d6:	2001      	movs	r0, #1
 80014d8:	f001 f81a 	bl	8002510 <IN_IsPressed_ms>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d008      	beq.n	80014f4 <FSM_SystemControl+0x168>
			_time_out = TIME_OUT_FOR_SET;
 80014e2:	4b4d      	ldr	r3, [pc, #308]	; (8001618 <FSM_SystemControl+0x28c>)
 80014e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014e8:	801a      	strh	r2, [r3, #0]
			mode_sys = SET_HOUR;
 80014ea:	4b42      	ldr	r3, [pc, #264]	; (80015f4 <FSM_SystemControl+0x268>)
 80014ec:	2204      	movs	r2, #4
 80014ee:	701a      	strb	r2, [r3, #0]
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
			CLCD_PrintCharBuffer(1, INDEX_LCD_TEMP_SYMBOL, 0);
			CLCD_PrintCharBuffer(1, INDEX_LCD_HUMI_SYMBOL, 1);
			mode_sys = DISPLAY_DATE_DHT;
		}
		break;
 80014f0:	f000 bf67 	b.w	80023c2 <FSM_SystemControl+0x1036>
		else if(IN_IsPressed_ms(BT_DEC, 1500) && IN_IsPressed_ms(BT_INC, 1500)){
 80014f4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80014f8:	2002      	movs	r0, #2
 80014fa:	f001 f809 	bl	8002510 <IN_IsPressed_ms>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d019      	beq.n	8001538 <FSM_SystemControl+0x1ac>
 8001504:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001508:	2000      	movs	r0, #0
 800150a:	f001 f801 	bl	8002510 <IN_IsPressed_ms>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <FSM_SystemControl+0x1ac>
			_time_out = TIME_OUT_FOR_SET;
 8001514:	4b40      	ldr	r3, [pc, #256]	; (8001618 <FSM_SystemControl+0x28c>)
 8001516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800151a:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIRM_SET_ALARM_0);
 800151c:	4a3f      	ldr	r2, [pc, #252]	; (800161c <FSM_SystemControl+0x290>)
 800151e:	2100      	movs	r1, #0
 8001520:	2000      	movs	r0, #0
 8001522:	f001 f9c5 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIRM_SET_ALARM_1);
 8001526:	4a3e      	ldr	r2, [pc, #248]	; (8001620 <FSM_SystemControl+0x294>)
 8001528:	2100      	movs	r1, #0
 800152a:	2001      	movs	r0, #1
 800152c:	f001 f9c0 	bl	80028b0 <CLCD_PrintStringBuffer>
			mode_sys = SET_ALARM;
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <FSM_SystemControl+0x268>)
 8001532:	220a      	movs	r2, #10
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	e05a      	b.n	80015ee <FSM_SystemControl+0x262>
		else if(_data_sys.alarm_flag && (_data_sys.hour == _data_sys.alarm_hour)
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <FSM_SystemControl+0x280>)
 800153a:	7a5b      	ldrb	r3, [r3, #9]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d021      	beq.n	8001584 <FSM_SystemControl+0x1f8>
 8001540:	4b32      	ldr	r3, [pc, #200]	; (800160c <FSM_SystemControl+0x280>)
 8001542:	781a      	ldrb	r2, [r3, #0]
 8001544:	4b31      	ldr	r3, [pc, #196]	; (800160c <FSM_SystemControl+0x280>)
 8001546:	79db      	ldrb	r3, [r3, #7]
 8001548:	429a      	cmp	r2, r3
 800154a:	d11b      	bne.n	8001584 <FSM_SystemControl+0x1f8>
				&& (_data_sys.min == _data_sys.alarm_min) && (_data_sys.sec == 0)){
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <FSM_SystemControl+0x280>)
 800154e:	785a      	ldrb	r2, [r3, #1]
 8001550:	4b2e      	ldr	r3, [pc, #184]	; (800160c <FSM_SystemControl+0x280>)
 8001552:	7a1b      	ldrb	r3, [r3, #8]
 8001554:	429a      	cmp	r2, r3
 8001556:	d115      	bne.n	8001584 <FSM_SystemControl+0x1f8>
 8001558:	4b2c      	ldr	r3, [pc, #176]	; (800160c <FSM_SystemControl+0x280>)
 800155a:	789b      	ldrb	r3, [r3, #2]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d111      	bne.n	8001584 <FSM_SystemControl+0x1f8>
			_time_out = TIME_FOR_ALARM_GO_OF;
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <FSM_SystemControl+0x28c>)
 8001562:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001566:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_ALARM_GO_OFF_0);
 8001568:	4a2e      	ldr	r2, [pc, #184]	; (8001624 <FSM_SystemControl+0x298>)
 800156a:	2100      	movs	r1, #0
 800156c:	2000      	movs	r0, #0
 800156e:	f001 f99f 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_ALARM_GO_OFF_1);
 8001572:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <FSM_SystemControl+0x29c>)
 8001574:	2100      	movs	r1, #0
 8001576:	2001      	movs	r0, #1
 8001578:	f001 f99a 	bl	80028b0 <CLCD_PrintStringBuffer>
			mode_sys = ALARM_GO_OFF;
 800157c:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <FSM_SystemControl+0x268>)
 800157e:	220d      	movs	r2, #13
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	e034      	b.n	80015ee <FSM_SystemControl+0x262>
		else if(_time_screen < 5 || IN_IsPressed(BT_MODE)){
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <FSM_SystemControl+0x274>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	2b04      	cmp	r3, #4
 800158a:	d906      	bls.n	800159a <FSM_SystemControl+0x20e>
 800158c:	2001      	movs	r0, #1
 800158e:	f000 ffab 	bl	80024e8 <IN_IsPressed>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 8714 	beq.w	80023c2 <FSM_SystemControl+0x1036>
			_time_screen = TIME_SCREEN_DATE;
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <FSM_SystemControl+0x274>)
 800159c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015a0:	801a      	strh	r2, [r3, #0]
			CLCD_CreateChar(0, temp_icon);
 80015a2:	4922      	ldr	r1, [pc, #136]	; (800162c <FSM_SystemControl+0x2a0>)
 80015a4:	2000      	movs	r0, #0
 80015a6:	f001 fae5 	bl	8002b74 <CLCD_CreateChar>
			CLCD_CreateChar(1, humi_icon);
 80015aa:	4921      	ldr	r1, [pc, #132]	; (8001630 <FSM_SystemControl+0x2a4>)
 80015ac:	2001      	movs	r0, #1
 80015ae:	f001 fae1 	bl	8002b74 <CLCD_CreateChar>
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
 80015b2:	4a20      	ldr	r2, [pc, #128]	; (8001634 <FSM_SystemControl+0x2a8>)
 80015b4:	2100      	movs	r1, #0
 80015b6:	2000      	movs	r0, #0
 80015b8:	f001 f97a 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
 80015bc:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <FSM_SystemControl+0x2ac>)
 80015be:	2100      	movs	r1, #0
 80015c0:	2001      	movs	r0, #1
 80015c2:	f001 f975 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
 80015c6:	22df      	movs	r2, #223	; 0xdf
 80015c8:	2106      	movs	r1, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	f001 f934 	bl	8002838 <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, INDEX_LCD_TEMP_SYMBOL, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2101      	movs	r1, #1
 80015d4:	2001      	movs	r0, #1
 80015d6:	f001 f92f 	bl	8002838 <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, INDEX_LCD_HUMI_SYMBOL, 1);
 80015da:	2201      	movs	r2, #1
 80015dc:	2109      	movs	r1, #9
 80015de:	2001      	movs	r0, #1
 80015e0:	f001 f92a 	bl	8002838 <CLCD_PrintCharBuffer>
			mode_sys = DISPLAY_DATE_DHT;
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <FSM_SystemControl+0x268>)
 80015e6:	2202      	movs	r2, #2
 80015e8:	701a      	strb	r2, [r3, #0]
		break;
 80015ea:	f000 beea 	b.w	80023c2 <FSM_SystemControl+0x1036>
 80015ee:	f000 bee8 	b.w	80023c2 <FSM_SystemControl+0x1036>
 80015f2:	bf00      	nop
 80015f4:	2000010c 	.word	0x2000010c
 80015f8:	08007d88 	.word	0x08007d88
 80015fc:	08007d9c 	.word	0x08007d9c
 8001600:	20000126 	.word	0x20000126
 8001604:	2000004c 	.word	0x2000004c
 8001608:	08007db0 	.word	0x08007db0
 800160c:	20000110 	.word	0x20000110
 8001610:	20000124 	.word	0x20000124
 8001614:	cccccccd 	.word	0xcccccccd
 8001618:	2000012a 	.word	0x2000012a
 800161c:	08007dc4 	.word	0x08007dc4
 8001620:	08007dd8 	.word	0x08007dd8
 8001624:	08007dec 	.word	0x08007dec
 8001628:	08007e00 	.word	0x08007e00
 800162c:	20000054 	.word	0x20000054
 8001630:	2000005c 	.word	0x2000005c
 8001634:	08007e14 	.word	0x08007e14
 8001638:	08007e28 	.word	0x08007e28
	case DISPLAY_DATE_DHT:

		CLCD_PrintStringBuffer(0, INDEX_LCD_WEEK_DAY, ConvertWeekdayToStr(_data_sys.week_day));
 800163c:	4baa      	ldr	r3, [pc, #680]	; (80018e8 <FSM_SystemControl+0x55c>)
 800163e:	799b      	ldrb	r3, [r3, #6]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe4f 	bl	80012e4 <ConvertWeekdayToStr>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	2101      	movs	r1, #1
 800164c:	2000      	movs	r0, #0
 800164e:	f001 f92f 	bl	80028b0 <CLCD_PrintStringBuffer>
		CLCD_PrintNumBuffer(0, INDEX_LCD_DAY, _data_sys.day);
 8001652:	4ba5      	ldr	r3, [pc, #660]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001654:	795b      	ldrb	r3, [r3, #5]
 8001656:	461a      	mov	r2, r3
 8001658:	2105      	movs	r1, #5
 800165a:	2000      	movs	r0, #0
 800165c:	f001 f95e 	bl	800291c <CLCD_PrintNumBuffer>
		CLCD_PrintNumBuffer(0, INDEX_LCD_MONTH, _data_sys.month);
 8001660:	4ba1      	ldr	r3, [pc, #644]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001662:	791b      	ldrb	r3, [r3, #4]
 8001664:	461a      	mov	r2, r3
 8001666:	2108      	movs	r1, #8
 8001668:	2000      	movs	r0, #0
 800166a:	f001 f957 	bl	800291c <CLCD_PrintNumBuffer>
		CLCD_PrintNumBuffer(0, INDEX_LCD_YEAR, 2000 + _data_sys.year);
 800166e:	4b9e      	ldr	r3, [pc, #632]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001676:	461a      	mov	r2, r3
 8001678:	210b      	movs	r1, #11
 800167a:	2000      	movs	r0, #0
 800167c:	f001 f94e 	bl	800291c <CLCD_PrintNumBuffer>

		CLCD_PrintFloatBuffer(1, INDEX_LCD_TEMP, _data_sys.temp);
 8001680:	4b99      	ldr	r3, [pc, #612]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	461a      	mov	r2, r3
 8001686:	2102      	movs	r1, #2
 8001688:	2001      	movs	r0, #1
 800168a:	f001 f9b3 	bl	80029f4 <CLCD_PrintFloatBuffer>
		CLCD_PrintFloatBuffer(1, INDEX_LCD_HUMI, _data_sys.humid);
 800168e:	4b96      	ldr	r3, [pc, #600]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	461a      	mov	r2, r3
 8001694:	210a      	movs	r1, #10
 8001696:	2001      	movs	r0, #1
 8001698:	f001 f9ac 	bl	80029f4 <CLCD_PrintFloatBuffer>

		if(_time_read_DHT < 5){
 800169c:	4b93      	ldr	r3, [pc, #588]	; (80018ec <FSM_SystemControl+0x560>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d80f      	bhi.n	80016c4 <FSM_SystemControl+0x338>
			_time_read_DHT = TIME_READ_DHT;
 80016a4:	4b91      	ldr	r3, [pc, #580]	; (80018ec <FSM_SystemControl+0x560>)
 80016a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016aa:	801a      	strh	r2, [r3, #0]
			DHT_Read();
 80016ac:	f7ff fbee 	bl	8000e8c <DHT_Read>
			_data_sys.temp = DHT_GetTemp();
 80016b0:	f7ff fcea 	bl	8001088 <DHT_GetTemp>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a8c      	ldr	r2, [pc, #560]	; (80018e8 <FSM_SystemControl+0x55c>)
 80016b8:	60d3      	str	r3, [r2, #12]
			_data_sys.humid = DHT_GetHumi();
 80016ba:	f7ff fcef 	bl	800109c <DHT_GetHumi>
 80016be:	4603      	mov	r3, r0
 80016c0:	4a89      	ldr	r2, [pc, #548]	; (80018e8 <FSM_SystemControl+0x55c>)
 80016c2:	6113      	str	r3, [r2, #16]
		}

//		Stick 1500ms
		if(IN_IsPressed_ms(BT_MODE, 1500)){
 80016c4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80016c8:	2001      	movs	r0, #1
 80016ca:	f000 ff21 	bl	8002510 <IN_IsPressed_ms>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <FSM_SystemControl+0x35a>
			_time_out = TIME_OUT_FOR_SET;
 80016d4:	4b86      	ldr	r3, [pc, #536]	; (80018f0 <FSM_SystemControl+0x564>)
 80016d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016da:	801a      	strh	r2, [r3, #0]
			mode_sys = SET_WEEKDAY;
 80016dc:	4b85      	ldr	r3, [pc, #532]	; (80018f4 <FSM_SystemControl+0x568>)
 80016de:	2206      	movs	r2, #6
 80016e0:	701a      	strb	r2, [r3, #0]

			if(_data_sys.alarm_flag) CLCD_PrintCharBuffer(0, INDEX_LCD_ICON_ALARM, 7);

			mode_sys = DISPLAY_TIME;
		}
		break;
 80016e2:	f000 be70 	b.w	80023c6 <FSM_SystemControl+0x103a>
		else if(IN_IsPressed_ms(BT_DEC, 1500) && IN_IsPressed_ms(BT_INC, 1500)){
 80016e6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80016ea:	2002      	movs	r0, #2
 80016ec:	f000 ff10 	bl	8002510 <IN_IsPressed_ms>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d019      	beq.n	800172a <FSM_SystemControl+0x39e>
 80016f6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80016fa:	2000      	movs	r0, #0
 80016fc:	f000 ff08 	bl	8002510 <IN_IsPressed_ms>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d011      	beq.n	800172a <FSM_SystemControl+0x39e>
			_time_out = TIME_OUT_FOR_SET;
 8001706:	4b7a      	ldr	r3, [pc, #488]	; (80018f0 <FSM_SystemControl+0x564>)
 8001708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800170c:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_CONFIRM_SET_ALARM_0);
 800170e:	4a7a      	ldr	r2, [pc, #488]	; (80018f8 <FSM_SystemControl+0x56c>)
 8001710:	2100      	movs	r1, #0
 8001712:	2000      	movs	r0, #0
 8001714:	f001 f8cc 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_CONFIRM_SET_ALARM_1);
 8001718:	4a78      	ldr	r2, [pc, #480]	; (80018fc <FSM_SystemControl+0x570>)
 800171a:	2100      	movs	r1, #0
 800171c:	2001      	movs	r0, #1
 800171e:	f001 f8c7 	bl	80028b0 <CLCD_PrintStringBuffer>
			mode_sys = SET_ALARM;
 8001722:	4b74      	ldr	r3, [pc, #464]	; (80018f4 <FSM_SystemControl+0x568>)
 8001724:	220a      	movs	r2, #10
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e054      	b.n	80017d4 <FSM_SystemControl+0x448>
		else if(_data_sys.alarm_flag && (_data_sys.hour == _data_sys.alarm_hour)
 800172a:	4b6f      	ldr	r3, [pc, #444]	; (80018e8 <FSM_SystemControl+0x55c>)
 800172c:	7a5b      	ldrb	r3, [r3, #9]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d021      	beq.n	8001776 <FSM_SystemControl+0x3ea>
 8001732:	4b6d      	ldr	r3, [pc, #436]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	4b6c      	ldr	r3, [pc, #432]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001738:	79db      	ldrb	r3, [r3, #7]
 800173a:	429a      	cmp	r2, r3
 800173c:	d11b      	bne.n	8001776 <FSM_SystemControl+0x3ea>
				&& (_data_sys.min == _data_sys.alarm_min) && (_data_sys.sec == 0)){
 800173e:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001740:	785a      	ldrb	r2, [r3, #1]
 8001742:	4b69      	ldr	r3, [pc, #420]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001744:	7a1b      	ldrb	r3, [r3, #8]
 8001746:	429a      	cmp	r2, r3
 8001748:	d115      	bne.n	8001776 <FSM_SystemControl+0x3ea>
 800174a:	4b67      	ldr	r3, [pc, #412]	; (80018e8 <FSM_SystemControl+0x55c>)
 800174c:	789b      	ldrb	r3, [r3, #2]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d111      	bne.n	8001776 <FSM_SystemControl+0x3ea>
			_time_out = TIME_FOR_ALARM_GO_OF;
 8001752:	4b67      	ldr	r3, [pc, #412]	; (80018f0 <FSM_SystemControl+0x564>)
 8001754:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001758:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_ALARM_GO_OFF_0);
 800175a:	4a69      	ldr	r2, [pc, #420]	; (8001900 <FSM_SystemControl+0x574>)
 800175c:	2100      	movs	r1, #0
 800175e:	2000      	movs	r0, #0
 8001760:	f001 f8a6 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_ALARM_GO_OFF_1);
 8001764:	4a67      	ldr	r2, [pc, #412]	; (8001904 <FSM_SystemControl+0x578>)
 8001766:	2100      	movs	r1, #0
 8001768:	2001      	movs	r0, #1
 800176a:	f001 f8a1 	bl	80028b0 <CLCD_PrintStringBuffer>
			mode_sys = ALARM_GO_OFF;
 800176e:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <FSM_SystemControl+0x568>)
 8001770:	220d      	movs	r2, #13
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	e02e      	b.n	80017d4 <FSM_SystemControl+0x448>
		else if(_time_screen < 5 || IN_IsPressed(BT_MODE)){
 8001776:	4b64      	ldr	r3, [pc, #400]	; (8001908 <FSM_SystemControl+0x57c>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	2b04      	cmp	r3, #4
 800177c:	d906      	bls.n	800178c <FSM_SystemControl+0x400>
 800177e:	2001      	movs	r0, #1
 8001780:	f000 feb2 	bl	80024e8 <IN_IsPressed>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 861d 	beq.w	80023c6 <FSM_SystemControl+0x103a>
			_time_screen = TIME_SCREEN_TIME;
 800178c:	4b5e      	ldr	r3, [pc, #376]	; (8001908 <FSM_SystemControl+0x57c>)
 800178e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001792:	801a      	strh	r2, [r3, #0]
			ReadTimeDs1307();
 8001794:	f7ff fd5a 	bl	800124c <ReadTimeDs1307>
			CLCD_CreateChar(7, alarm_icon);
 8001798:	495c      	ldr	r1, [pc, #368]	; (800190c <FSM_SystemControl+0x580>)
 800179a:	2007      	movs	r0, #7
 800179c:	f001 f9ea 	bl	8002b74 <CLCD_CreateChar>
			CLCD_InitBigDigit();
 80017a0:	f001 fa0e 	bl	8002bc0 <CLCD_InitBigDigit>
			CLCD_PrintStringBuffer(0, 0, SCREEN_TIME_0);
 80017a4:	4a5a      	ldr	r2, [pc, #360]	; (8001910 <FSM_SystemControl+0x584>)
 80017a6:	2100      	movs	r1, #0
 80017a8:	2000      	movs	r0, #0
 80017aa:	f001 f881 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_TIME_1);
 80017ae:	4a58      	ldr	r2, [pc, #352]	; (8001910 <FSM_SystemControl+0x584>)
 80017b0:	2100      	movs	r1, #0
 80017b2:	2001      	movs	r0, #1
 80017b4:	f001 f87c 	bl	80028b0 <CLCD_PrintStringBuffer>
			if(_data_sys.alarm_flag) CLCD_PrintCharBuffer(0, INDEX_LCD_ICON_ALARM, 7);
 80017b8:	4b4b      	ldr	r3, [pc, #300]	; (80018e8 <FSM_SystemControl+0x55c>)
 80017ba:	7a5b      	ldrb	r3, [r3, #9]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d004      	beq.n	80017ca <FSM_SystemControl+0x43e>
 80017c0:	2207      	movs	r2, #7
 80017c2:	210e      	movs	r1, #14
 80017c4:	2000      	movs	r0, #0
 80017c6:	f001 f837 	bl	8002838 <CLCD_PrintCharBuffer>
			mode_sys = DISPLAY_TIME;
 80017ca:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <FSM_SystemControl+0x568>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
		break;
 80017d0:	f000 bdf9 	b.w	80023c6 <FSM_SystemControl+0x103a>
 80017d4:	f000 bdf7 	b.w	80023c6 <FSM_SystemControl+0x103a>
	case SET_HOUR:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 80017d8:	4b4e      	ldr	r3, [pc, #312]	; (8001914 <FSM_SystemControl+0x588>)
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	4b4e      	ldr	r3, [pc, #312]	; (8001918 <FSM_SystemControl+0x58c>)
 80017de:	fba3 1302 	umull	r1, r3, r3, r2
 80017e2:	0919      	lsrs	r1, r3, #4
 80017e4:	460b      	mov	r3, r1
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b09      	cmp	r3, #9
 80017f2:	d807      	bhi.n	8001804 <FSM_SystemControl+0x478>
			CLCD_PrintBigNumBuffer(INDEX_LCD_HOUR, _data_sys.hour);
 80017f4:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <FSM_SystemControl+0x55c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	4619      	mov	r1, r3
 80017fc:	2000      	movs	r0, #0
 80017fe:	f001 fb77 	bl	8002ef0 <CLCD_PrintBigNumBuffer>
 8001802:	e003      	b.n	800180c <FSM_SystemControl+0x480>
		}
		else {
			CLCD_PrintBigNumBuffer(INDEX_LCD_HOUR, BIG_BLANK);
 8001804:	2164      	movs	r1, #100	; 0x64
 8001806:	2000      	movs	r0, #0
 8001808:	f001 fb72 	bl	8002ef0 <CLCD_PrintBigNumBuffer>
		}

//		Increase/Decrease 1 every 400ms
		if(IN_Stick(BT_INC) % 8 == 1){
 800180c:	2000      	movs	r0, #0
 800180e:	f000 fe5b 	bl	80024c8 <IN_Stick>
 8001812:	4603      	mov	r3, r0
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	b29b      	uxth	r3, r3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d117      	bne.n	800184e <FSM_SystemControl+0x4c2>
			_time_out = TIME_OUT_FOR_SET;
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <FSM_SystemControl+0x564>)
 8001820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001824:	801a      	strh	r2, [r3, #0]
			_data_sys.hour = _data_sys.hour < 23 ? _data_sys.hour + 1 : 0;
 8001826:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b16      	cmp	r3, #22
 800182c:	d804      	bhi.n	8001838 <FSM_SystemControl+0x4ac>
 800182e:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	e000      	b.n	800183a <FSM_SystemControl+0x4ae>
 8001838:	2300      	movs	r3, #0
 800183a:	4a2b      	ldr	r2, [pc, #172]	; (80018e8 <FSM_SystemControl+0x55c>)
 800183c:	7013      	strb	r3, [r2, #0]
			CLCD_PrintBigNumBuffer(INDEX_LCD_HOUR, _data_sys.hour);
 800183e:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b25b      	sxtb	r3, r3
 8001844:	4619      	mov	r1, r3
 8001846:	2000      	movs	r0, #0
 8001848:	f001 fb52 	bl	8002ef0 <CLCD_PrintBigNumBuffer>
 800184c:	e018      	b.n	8001880 <FSM_SystemControl+0x4f4>
		}
		else if(IN_Stick(BT_DEC) % 8 == 1){
 800184e:	2002      	movs	r0, #2
 8001850:	f000 fe3a 	bl	80024c8 <IN_Stick>
 8001854:	4603      	mov	r3, r0
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	b29b      	uxth	r3, r3
 800185c:	2b01      	cmp	r3, #1
 800185e:	d10f      	bne.n	8001880 <FSM_SystemControl+0x4f4>
			_time_out = TIME_OUT_FOR_SET;
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <FSM_SystemControl+0x564>)
 8001862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001866:	801a      	strh	r2, [r3, #0]
			_data_sys.hour = _data_sys.hour > 0 ? _data_sys.hour - 1 : 23;
 8001868:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <FSM_SystemControl+0x55c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <FSM_SystemControl+0x4ee>
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	3b01      	subs	r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	e000      	b.n	800187c <FSM_SystemControl+0x4f0>
 800187a:	2317      	movs	r3, #23
 800187c:	4a1a      	ldr	r2, [pc, #104]	; (80018e8 <FSM_SystemControl+0x55c>)
 800187e:	7013      	strb	r3, [r2, #0]
//			CLCD_PrintBigNumBuffer(INDEX_LCD_HOUR, _data_sys.hour);
		}


		if(IN_IsPressed(BT_MODE)){
 8001880:	2001      	movs	r0, #1
 8001882:	f000 fe31 	bl	80024e8 <IN_IsPressed>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d015      	beq.n	80018b8 <FSM_SystemControl+0x52c>
			_time_out = TIME_OUT_FOR_SET;
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <FSM_SystemControl+0x564>)
 800188e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001892:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_HOUR, _data_sys.hour);
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <FSM_SystemControl+0x55c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	2002      	movs	r0, #2
 800189c:	f7ff fc54 	bl	8001148 <DS_Write>
			CLCD_PrintBigNumBuffer(INDEX_LCD_HOUR, _data_sys.hour);
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <FSM_SystemControl+0x55c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b25b      	sxtb	r3, r3
 80018a6:	4619      	mov	r1, r3
 80018a8:	2000      	movs	r0, #0
 80018aa:	f001 fb21 	bl	8002ef0 <CLCD_PrintBigNumBuffer>
			mode_sys = SET_MIN;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <FSM_SystemControl+0x568>)
 80018b0:	2205      	movs	r2, #5
 80018b2:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(1, 0, SCREEN_TIME_1);

			mode_sys = DISPLAY_TIME;
		}

		break;
 80018b4:	f000 bd89 	b.w	80023ca <FSM_SystemControl+0x103e>
		else if(_time_out < 5){
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <FSM_SystemControl+0x564>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	f200 8584 	bhi.w	80023ca <FSM_SystemControl+0x103e>
			_time_screen = TIME_SCREEN_TIME;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <FSM_SystemControl+0x57c>)
 80018c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018c8:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_TIME_0);
 80018ca:	4a11      	ldr	r2, [pc, #68]	; (8001910 <FSM_SystemControl+0x584>)
 80018cc:	2100      	movs	r1, #0
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 ffee 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_TIME_1);
 80018d4:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <FSM_SystemControl+0x584>)
 80018d6:	2100      	movs	r1, #0
 80018d8:	2001      	movs	r0, #1
 80018da:	f000 ffe9 	bl	80028b0 <CLCD_PrintStringBuffer>
			mode_sys = DISPLAY_TIME;
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <FSM_SystemControl+0x568>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
		break;
 80018e4:	f000 bd71 	b.w	80023ca <FSM_SystemControl+0x103e>
 80018e8:	20000110 	.word	0x20000110
 80018ec:	20000128 	.word	0x20000128
 80018f0:	2000012a 	.word	0x2000012a
 80018f4:	2000010c 	.word	0x2000010c
 80018f8:	08007dc4 	.word	0x08007dc4
 80018fc:	08007dd8 	.word	0x08007dd8
 8001900:	08007dec 	.word	0x08007dec
 8001904:	08007e00 	.word	0x08007e00
 8001908:	20000126 	.word	0x20000126
 800190c:	2000004c 	.word	0x2000004c
 8001910:	08007db0 	.word	0x08007db0
 8001914:	20000124 	.word	0x20000124
 8001918:	cccccccd 	.word	0xcccccccd
	case SET_MIN:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 800191c:	4bb4      	ldr	r3, [pc, #720]	; (8001bf0 <FSM_SystemControl+0x864>)
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	4bb4      	ldr	r3, [pc, #720]	; (8001bf4 <FSM_SystemControl+0x868>)
 8001922:	fba3 1302 	umull	r1, r3, r3, r2
 8001926:	0919      	lsrs	r1, r3, #4
 8001928:	460b      	mov	r3, r1
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b09      	cmp	r3, #9
 8001936:	d807      	bhi.n	8001948 <FSM_SystemControl+0x5bc>
			CLCD_PrintBigNumBuffer(INDEX_LCD_MIN, _data_sys.min);
 8001938:	4baf      	ldr	r3, [pc, #700]	; (8001bf8 <FSM_SystemControl+0x86c>)
 800193a:	785b      	ldrb	r3, [r3, #1]
 800193c:	b25b      	sxtb	r3, r3
 800193e:	4619      	mov	r1, r3
 8001940:	2007      	movs	r0, #7
 8001942:	f001 fad5 	bl	8002ef0 <CLCD_PrintBigNumBuffer>
 8001946:	e003      	b.n	8001950 <FSM_SystemControl+0x5c4>
		}
		else {
			CLCD_PrintBigNumBuffer(INDEX_LCD_MIN, BIG_BLANK);
 8001948:	2164      	movs	r1, #100	; 0x64
 800194a:	2007      	movs	r0, #7
 800194c:	f001 fad0 	bl	8002ef0 <CLCD_PrintBigNumBuffer>
		}

//		Increase/Decrease 1 every 500ms
		if(IN_Stick(BT_INC) % 10 == 1){
 8001950:	2000      	movs	r0, #0
 8001952:	f000 fdb9 	bl	80024c8 <IN_Stick>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	4ba6      	ldr	r3, [pc, #664]	; (8001bf4 <FSM_SystemControl+0x868>)
 800195c:	fba3 1302 	umull	r1, r3, r3, r2
 8001960:	08d9      	lsrs	r1, r3, #3
 8001962:	460b      	mov	r3, r1
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	b29b      	uxth	r3, r3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d117      	bne.n	80019a2 <FSM_SystemControl+0x616>
			_time_out = TIME_OUT_FOR_SET;
 8001972:	4ba2      	ldr	r3, [pc, #648]	; (8001bfc <FSM_SystemControl+0x870>)
 8001974:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001978:	801a      	strh	r2, [r3, #0]
			_data_sys.min = _data_sys.min < 59 ? _data_sys.min + 1 : 0;
 800197a:	4b9f      	ldr	r3, [pc, #636]	; (8001bf8 <FSM_SystemControl+0x86c>)
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	2b3a      	cmp	r3, #58	; 0x3a
 8001980:	d804      	bhi.n	800198c <FSM_SystemControl+0x600>
 8001982:	4b9d      	ldr	r3, [pc, #628]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001984:	785b      	ldrb	r3, [r3, #1]
 8001986:	3301      	adds	r3, #1
 8001988:	b2db      	uxtb	r3, r3
 800198a:	e000      	b.n	800198e <FSM_SystemControl+0x602>
 800198c:	2300      	movs	r3, #0
 800198e:	4a9a      	ldr	r2, [pc, #616]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001990:	7053      	strb	r3, [r2, #1]
			CLCD_PrintBigNumBuffer(INDEX_LCD_MIN, _data_sys.min);
 8001992:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	b25b      	sxtb	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	2007      	movs	r0, #7
 800199c:	f001 faa8 	bl	8002ef0 <CLCD_PrintBigNumBuffer>
 80019a0:	e027      	b.n	80019f2 <FSM_SystemControl+0x666>
		}
		else if(IN_Stick(BT_DEC) % 10 == 1){
 80019a2:	2002      	movs	r0, #2
 80019a4:	f000 fd90 	bl	80024c8 <IN_Stick>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b91      	ldr	r3, [pc, #580]	; (8001bf4 <FSM_SystemControl+0x868>)
 80019ae:	fba3 1302 	umull	r1, r3, r3, r2
 80019b2:	08d9      	lsrs	r1, r3, #3
 80019b4:	460b      	mov	r3, r1
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d116      	bne.n	80019f2 <FSM_SystemControl+0x666>
			_time_out = TIME_OUT_FOR_SET;
 80019c4:	4b8d      	ldr	r3, [pc, #564]	; (8001bfc <FSM_SystemControl+0x870>)
 80019c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ca:	801a      	strh	r2, [r3, #0]
			_data_sys.min = _data_sys.min > 0 ? _data_sys.min - 1 : 59;
 80019cc:	4b8a      	ldr	r3, [pc, #552]	; (8001bf8 <FSM_SystemControl+0x86c>)
 80019ce:	785b      	ldrb	r3, [r3, #1]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <FSM_SystemControl+0x652>
 80019d4:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <FSM_SystemControl+0x86c>)
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	3b01      	subs	r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	e000      	b.n	80019e0 <FSM_SystemControl+0x654>
 80019de:	233b      	movs	r3, #59	; 0x3b
 80019e0:	4a85      	ldr	r2, [pc, #532]	; (8001bf8 <FSM_SystemControl+0x86c>)
 80019e2:	7053      	strb	r3, [r2, #1]
			CLCD_PrintBigNumBuffer(INDEX_LCD_MIN, _data_sys.min);
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <FSM_SystemControl+0x86c>)
 80019e6:	785b      	ldrb	r3, [r3, #1]
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	4619      	mov	r1, r3
 80019ec:	2007      	movs	r0, #7
 80019ee:	f001 fa7f 	bl	8002ef0 <CLCD_PrintBigNumBuffer>
		}

		if(_time_out < 5 || IN_IsPressed(BT_MODE)){
 80019f2:	4b82      	ldr	r3, [pc, #520]	; (8001bfc <FSM_SystemControl+0x870>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d906      	bls.n	8001a08 <FSM_SystemControl+0x67c>
 80019fa:	2001      	movs	r0, #1
 80019fc:	f000 fd74 	bl	80024e8 <IN_IsPressed>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 84e3 	beq.w	80023ce <FSM_SystemControl+0x1042>
			_time_screen = TIME_SCREEN_TIME;
 8001a08:	4b7d      	ldr	r3, [pc, #500]	; (8001c00 <FSM_SystemControl+0x874>)
 8001a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a0e:	801a      	strh	r2, [r3, #0]

			DS_Write(ADDRESS_MINUTE, _data_sys.min);
 8001a10:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001a12:	785b      	ldrb	r3, [r3, #1]
 8001a14:	4619      	mov	r1, r3
 8001a16:	2001      	movs	r0, #1
 8001a18:	f7ff fb96 	bl	8001148 <DS_Write>

			CLCD_CreateChar(7, alarm_icon);
 8001a1c:	4979      	ldr	r1, [pc, #484]	; (8001c04 <FSM_SystemControl+0x878>)
 8001a1e:	2007      	movs	r0, #7
 8001a20:	f001 f8a8 	bl	8002b74 <CLCD_CreateChar>
			CLCD_InitBigDigit();
 8001a24:	f001 f8cc 	bl	8002bc0 <CLCD_InitBigDigit>

			CLCD_PrintStringBuffer(0, 0, SCREEN_TIME_0);
 8001a28:	4a77      	ldr	r2, [pc, #476]	; (8001c08 <FSM_SystemControl+0x87c>)
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f000 ff3f 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_TIME_1);
 8001a32:	4a75      	ldr	r2, [pc, #468]	; (8001c08 <FSM_SystemControl+0x87c>)
 8001a34:	2100      	movs	r1, #0
 8001a36:	2001      	movs	r0, #1
 8001a38:	f000 ff3a 	bl	80028b0 <CLCD_PrintStringBuffer>

			if(_data_sys.alarm_flag) CLCD_PrintCharBuffer(0, INDEX_LCD_ICON_ALARM, 7);
 8001a3c:	4b6e      	ldr	r3, [pc, #440]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001a3e:	7a5b      	ldrb	r3, [r3, #9]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <FSM_SystemControl+0x6c2>
 8001a44:	2207      	movs	r2, #7
 8001a46:	210e      	movs	r1, #14
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f000 fef5 	bl	8002838 <CLCD_PrintCharBuffer>

			mode_sys = DISPLAY_TIME;
 8001a4e:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <FSM_SystemControl+0x880>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001a54:	f000 bcbb 	b.w	80023ce <FSM_SystemControl+0x1042>
	case SET_WEEKDAY:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 8001a58:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <FSM_SystemControl+0x864>)
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	4b65      	ldr	r3, [pc, #404]	; (8001bf4 <FSM_SystemControl+0x868>)
 8001a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a62:	0919      	lsrs	r1, r3, #4
 8001a64:	460b      	mov	r3, r1
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b09      	cmp	r3, #9
 8001a72:	d80b      	bhi.n	8001a8c <FSM_SystemControl+0x700>
			CLCD_PrintStringBuffer(0, INDEX_LCD_WEEK_DAY, ConvertWeekdayToStr(_data_sys.week_day));
 8001a74:	4b60      	ldr	r3, [pc, #384]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001a76:	799b      	ldrb	r3, [r3, #6]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fc33 	bl	80012e4 <ConvertWeekdayToStr>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	2101      	movs	r1, #1
 8001a84:	2000      	movs	r0, #0
 8001a86:	f000 ff13 	bl	80028b0 <CLCD_PrintStringBuffer>
 8001a8a:	e004      	b.n	8001a96 <FSM_SystemControl+0x70a>
		}
		else {
			CLCD_PrintStringBuffer(0, INDEX_LCD_WEEK_DAY, "   ");
 8001a8c:	4a60      	ldr	r2, [pc, #384]	; (8001c10 <FSM_SystemControl+0x884>)
 8001a8e:	2101      	movs	r1, #1
 8001a90:	2000      	movs	r0, #0
 8001a92:	f000 ff0d 	bl	80028b0 <CLCD_PrintStringBuffer>
		}

//		Increase/Decrease 1 every 500ms
		if(IN_Stick(BT_INC) % 10 == 1){
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 fd16 	bl	80024c8 <IN_Stick>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <FSM_SystemControl+0x868>)
 8001aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8001aa6:	08d9      	lsrs	r1, r3, #3
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d11b      	bne.n	8001af0 <FSM_SystemControl+0x764>
			_time_out = TIME_OUT_FOR_SET;
 8001ab8:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <FSM_SystemControl+0x870>)
 8001aba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001abe:	801a      	strh	r2, [r3, #0]
			_data_sys.week_day = _data_sys.week_day < 7 ? _data_sys.week_day + 1 : 1;
 8001ac0:	4b4d      	ldr	r3, [pc, #308]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001ac2:	799b      	ldrb	r3, [r3, #6]
 8001ac4:	2b06      	cmp	r3, #6
 8001ac6:	d804      	bhi.n	8001ad2 <FSM_SystemControl+0x746>
 8001ac8:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001aca:	799b      	ldrb	r3, [r3, #6]
 8001acc:	3301      	adds	r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	e000      	b.n	8001ad4 <FSM_SystemControl+0x748>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001ad6:	7193      	strb	r3, [r2, #6]
			CLCD_PrintStringBuffer(0, INDEX_LCD_WEEK_DAY, ConvertWeekdayToStr(_data_sys.week_day));
 8001ad8:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001ada:	799b      	ldrb	r3, [r3, #6]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fc01 	bl	80012e4 <ConvertWeekdayToStr>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f000 fee1 	bl	80028b0 <CLCD_PrintStringBuffer>
 8001aee:	e02b      	b.n	8001b48 <FSM_SystemControl+0x7bc>
		}
		else if(IN_Stick(BT_DEC) % 10 == 1){
 8001af0:	2002      	movs	r0, #2
 8001af2:	f000 fce9 	bl	80024c8 <IN_Stick>
 8001af6:	4603      	mov	r3, r0
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b3e      	ldr	r3, [pc, #248]	; (8001bf4 <FSM_SystemControl+0x868>)
 8001afc:	fba3 1302 	umull	r1, r3, r3, r2
 8001b00:	08d9      	lsrs	r1, r3, #3
 8001b02:	460b      	mov	r3, r1
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d11a      	bne.n	8001b48 <FSM_SystemControl+0x7bc>
			_time_out = TIME_OUT_FOR_SET;
 8001b12:	4b3a      	ldr	r3, [pc, #232]	; (8001bfc <FSM_SystemControl+0x870>)
 8001b14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b18:	801a      	strh	r2, [r3, #0]
			_data_sys.week_day = _data_sys.week_day > 1 ? _data_sys.week_day - 1 : 7;
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001b1c:	799b      	ldrb	r3, [r3, #6]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d904      	bls.n	8001b2c <FSM_SystemControl+0x7a0>
 8001b22:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001b24:	799b      	ldrb	r3, [r3, #6]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	e000      	b.n	8001b2e <FSM_SystemControl+0x7a2>
 8001b2c:	2307      	movs	r3, #7
 8001b2e:	4a32      	ldr	r2, [pc, #200]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001b30:	7193      	strb	r3, [r2, #6]
			CLCD_PrintStringBuffer(0, INDEX_LCD_WEEK_DAY, ConvertWeekdayToStr(_data_sys.week_day));
 8001b32:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001b34:	799b      	ldrb	r3, [r3, #6]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fbd4 	bl	80012e4 <ConvertWeekdayToStr>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2101      	movs	r1, #1
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 feb4 	bl	80028b0 <CLCD_PrintStringBuffer>
		}

		if(IN_IsPressed(BT_MODE)){
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f000 fccd 	bl	80024e8 <IN_IsPressed>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d019      	beq.n	8001b88 <FSM_SystemControl+0x7fc>
			_time_out = TIME_OUT_FOR_SET;
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <FSM_SystemControl+0x870>)
 8001b56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b5a:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_WEEK_DAY, _data_sys.week_day);
 8001b5c:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001b5e:	799b      	ldrb	r3, [r3, #6]
 8001b60:	4619      	mov	r1, r3
 8001b62:	2003      	movs	r0, #3
 8001b64:	f7ff faf0 	bl	8001148 <DS_Write>
			CLCD_PrintStringBuffer(0, INDEX_LCD_WEEK_DAY, ConvertWeekdayToStr(_data_sys.week_day));
 8001b68:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001b6a:	799b      	ldrb	r3, [r3, #6]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fbb9 	bl	80012e4 <ConvertWeekdayToStr>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	2101      	movs	r1, #1
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f000 fe99 	bl	80028b0 <CLCD_PrintStringBuffer>
			mode_sys = SET_DAY;
 8001b7e:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <FSM_SystemControl+0x880>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
			mode_sys = DISPLAY_DATE_DHT;
		}

		break;
 8001b84:	f000 bc25 	b.w	80023d2 <FSM_SystemControl+0x1046>
		else if(_time_out < 5){
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <FSM_SystemControl+0x870>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	f200 8420 	bhi.w	80023d2 <FSM_SystemControl+0x1046>
			_time_screen = TIME_SCREEN_DATE;
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <FSM_SystemControl+0x874>)
 8001b94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b98:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <FSM_SystemControl+0x888>)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f000 fe86 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
 8001ba4:	4a1c      	ldr	r2, [pc, #112]	; (8001c18 <FSM_SystemControl+0x88c>)
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f000 fe81 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
 8001bae:	22df      	movs	r2, #223	; 0xdf
 8001bb0:	2106      	movs	r1, #6
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f000 fe40 	bl	8002838 <CLCD_PrintCharBuffer>
			mode_sys = DISPLAY_DATE_DHT;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <FSM_SystemControl+0x880>)
 8001bba:	2202      	movs	r2, #2
 8001bbc:	701a      	strb	r2, [r3, #0]
		break;
 8001bbe:	f000 bc08 	b.w	80023d2 <FSM_SystemControl+0x1046>
	case SET_DAY:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <FSM_SystemControl+0x864>)
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <FSM_SystemControl+0x868>)
 8001bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001bcc:	0919      	lsrs	r1, r3, #4
 8001bce:	460b      	mov	r3, r1
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b09      	cmp	r3, #9
 8001bdc:	d81e      	bhi.n	8001c1c <FSM_SystemControl+0x890>
			CLCD_PrintNumBuffer(0, INDEX_LCD_DAY, _data_sys.day);
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <FSM_SystemControl+0x86c>)
 8001be0:	795b      	ldrb	r3, [r3, #5]
 8001be2:	461a      	mov	r2, r3
 8001be4:	2105      	movs	r1, #5
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 fe98 	bl	800291c <CLCD_PrintNumBuffer>
 8001bec:	e01b      	b.n	8001c26 <FSM_SystemControl+0x89a>
 8001bee:	bf00      	nop
 8001bf0:	20000124 	.word	0x20000124
 8001bf4:	cccccccd 	.word	0xcccccccd
 8001bf8:	20000110 	.word	0x20000110
 8001bfc:	2000012a 	.word	0x2000012a
 8001c00:	20000126 	.word	0x20000126
 8001c04:	2000004c 	.word	0x2000004c
 8001c08:	08007db0 	.word	0x08007db0
 8001c0c:	2000010c 	.word	0x2000010c
 8001c10:	08007e3c 	.word	0x08007e3c
 8001c14:	08007e14 	.word	0x08007e14
 8001c18:	08007e28 	.word	0x08007e28
		}
		else {
			CLCD_PrintStringBuffer(0, INDEX_LCD_DAY, "  ");
 8001c1c:	4ab5      	ldr	r2, [pc, #724]	; (8001ef4 <FSM_SystemControl+0xb68>)
 8001c1e:	2105      	movs	r1, #5
 8001c20:	2000      	movs	r0, #0
 8001c22:	f000 fe45 	bl	80028b0 <CLCD_PrintStringBuffer>
		}

//		Increase/Decrease 1 every 500ms
		if(IN_Stick(BT_INC) % 10 == 1){
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 fc4e 	bl	80024c8 <IN_Stick>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4bb1      	ldr	r3, [pc, #708]	; (8001ef8 <FSM_SystemControl+0xb6c>)
 8001c32:	fba3 1302 	umull	r1, r3, r3, r2
 8001c36:	08d9      	lsrs	r1, r3, #3
 8001c38:	460b      	mov	r3, r1
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d117      	bne.n	8001c78 <FSM_SystemControl+0x8ec>
			_time_out = TIME_OUT_FOR_SET;
 8001c48:	4bac      	ldr	r3, [pc, #688]	; (8001efc <FSM_SystemControl+0xb70>)
 8001c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c4e:	801a      	strh	r2, [r3, #0]
			_data_sys.day = _data_sys.day < 31 ? _data_sys.day + 1 : 1;
 8001c50:	4bab      	ldr	r3, [pc, #684]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001c52:	795b      	ldrb	r3, [r3, #5]
 8001c54:	2b1e      	cmp	r3, #30
 8001c56:	d804      	bhi.n	8001c62 <FSM_SystemControl+0x8d6>
 8001c58:	4ba9      	ldr	r3, [pc, #676]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001c5a:	795b      	ldrb	r3, [r3, #5]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	e000      	b.n	8001c64 <FSM_SystemControl+0x8d8>
 8001c62:	2301      	movs	r3, #1
 8001c64:	4aa6      	ldr	r2, [pc, #664]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001c66:	7153      	strb	r3, [r2, #5]
			CLCD_PrintNumBuffer(0, INDEX_LCD_DAY, _data_sys.day);
 8001c68:	4ba5      	ldr	r3, [pc, #660]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001c6a:	795b      	ldrb	r3, [r3, #5]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2105      	movs	r1, #5
 8001c70:	2000      	movs	r0, #0
 8001c72:	f000 fe53 	bl	800291c <CLCD_PrintNumBuffer>
 8001c76:	e027      	b.n	8001cc8 <FSM_SystemControl+0x93c>
		}
		else if(IN_Stick(BT_DEC) % 10 == 1){
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f000 fc25 	bl	80024c8 <IN_Stick>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b9d      	ldr	r3, [pc, #628]	; (8001ef8 <FSM_SystemControl+0xb6c>)
 8001c84:	fba3 1302 	umull	r1, r3, r3, r2
 8001c88:	08d9      	lsrs	r1, r3, #3
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d116      	bne.n	8001cc8 <FSM_SystemControl+0x93c>
			_time_out = TIME_OUT_FOR_SET;
 8001c9a:	4b98      	ldr	r3, [pc, #608]	; (8001efc <FSM_SystemControl+0xb70>)
 8001c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ca0:	801a      	strh	r2, [r3, #0]
			_data_sys.day = _data_sys.day > 1 ? _data_sys.day - 1 : 31;
 8001ca2:	4b97      	ldr	r3, [pc, #604]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001ca4:	795b      	ldrb	r3, [r3, #5]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d904      	bls.n	8001cb4 <FSM_SystemControl+0x928>
 8001caa:	4b95      	ldr	r3, [pc, #596]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001cac:	795b      	ldrb	r3, [r3, #5]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	e000      	b.n	8001cb6 <FSM_SystemControl+0x92a>
 8001cb4:	231f      	movs	r3, #31
 8001cb6:	4a92      	ldr	r2, [pc, #584]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001cb8:	7153      	strb	r3, [r2, #5]
			CLCD_PrintNumBuffer(0, INDEX_LCD_DAY, _data_sys.day);
 8001cba:	4b91      	ldr	r3, [pc, #580]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001cbc:	795b      	ldrb	r3, [r3, #5]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2105      	movs	r1, #5
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 fe2a 	bl	800291c <CLCD_PrintNumBuffer>
		}

		if(IN_IsPressed(BT_MODE)){
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f000 fc0d 	bl	80024e8 <IN_IsPressed>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d014      	beq.n	8001cfe <FSM_SystemControl+0x972>
			_time_out = TIME_OUT_FOR_SET;
 8001cd4:	4b89      	ldr	r3, [pc, #548]	; (8001efc <FSM_SystemControl+0xb70>)
 8001cd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cda:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_DATE, _data_sys.day);
 8001cdc:	4b88      	ldr	r3, [pc, #544]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001cde:	795b      	ldrb	r3, [r3, #5]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	2004      	movs	r0, #4
 8001ce4:	f7ff fa30 	bl	8001148 <DS_Write>
			CLCD_PrintNumBuffer(0, INDEX_LCD_DAY, _data_sys.day);
 8001ce8:	4b85      	ldr	r3, [pc, #532]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001cea:	795b      	ldrb	r3, [r3, #5]
 8001cec:	461a      	mov	r2, r3
 8001cee:	2105      	movs	r1, #5
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f000 fe13 	bl	800291c <CLCD_PrintNumBuffer>
			mode_sys = SET_MONTH;
 8001cf6:	4b83      	ldr	r3, [pc, #524]	; (8001f04 <FSM_SystemControl+0xb78>)
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
			mode_sys = DISPLAY_DATE_DHT;
		}
		break;
 8001cfc:	e36b      	b.n	80023d6 <FSM_SystemControl+0x104a>
		else if(_time_out < 5){
 8001cfe:	4b7f      	ldr	r3, [pc, #508]	; (8001efc <FSM_SystemControl+0xb70>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	f200 8367 	bhi.w	80023d6 <FSM_SystemControl+0x104a>
			_time_screen = TIME_SCREEN_DATE;
 8001d08:	4b7f      	ldr	r3, [pc, #508]	; (8001f08 <FSM_SystemControl+0xb7c>)
 8001d0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d0e:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
 8001d10:	4a7e      	ldr	r2, [pc, #504]	; (8001f0c <FSM_SystemControl+0xb80>)
 8001d12:	2100      	movs	r1, #0
 8001d14:	2000      	movs	r0, #0
 8001d16:	f000 fdcb 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
 8001d1a:	4a7d      	ldr	r2, [pc, #500]	; (8001f10 <FSM_SystemControl+0xb84>)
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f000 fdc6 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
 8001d24:	22df      	movs	r2, #223	; 0xdf
 8001d26:	2106      	movs	r1, #6
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f000 fd85 	bl	8002838 <CLCD_PrintCharBuffer>
			mode_sys = DISPLAY_DATE_DHT;
 8001d2e:	4b75      	ldr	r3, [pc, #468]	; (8001f04 <FSM_SystemControl+0xb78>)
 8001d30:	2202      	movs	r2, #2
 8001d32:	701a      	strb	r2, [r3, #0]
		break;
 8001d34:	e34f      	b.n	80023d6 <FSM_SystemControl+0x104a>
	case SET_MONTH:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 8001d36:	4b77      	ldr	r3, [pc, #476]	; (8001f14 <FSM_SystemControl+0xb88>)
 8001d38:	781a      	ldrb	r2, [r3, #0]
 8001d3a:	4b6f      	ldr	r3, [pc, #444]	; (8001ef8 <FSM_SystemControl+0xb6c>)
 8001d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d40:	0919      	lsrs	r1, r3, #4
 8001d42:	460b      	mov	r3, r1
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b09      	cmp	r3, #9
 8001d50:	d807      	bhi.n	8001d62 <FSM_SystemControl+0x9d6>
			CLCD_PrintNumBuffer(0, INDEX_LCD_MONTH, _data_sys.month);
 8001d52:	4b6b      	ldr	r3, [pc, #428]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001d54:	791b      	ldrb	r3, [r3, #4]
 8001d56:	461a      	mov	r2, r3
 8001d58:	2108      	movs	r1, #8
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f000 fdde 	bl	800291c <CLCD_PrintNumBuffer>
 8001d60:	e004      	b.n	8001d6c <FSM_SystemControl+0x9e0>
		}
		else {
			CLCD_PrintStringBuffer(0, INDEX_LCD_MONTH, "  ");
 8001d62:	4a64      	ldr	r2, [pc, #400]	; (8001ef4 <FSM_SystemControl+0xb68>)
 8001d64:	2108      	movs	r1, #8
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 fda2 	bl	80028b0 <CLCD_PrintStringBuffer>
		}

//		Increase/Decrease 1 every 500ms
		if(IN_Stick(BT_INC) % 10 == 1){
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f000 fbab 	bl	80024c8 <IN_Stick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b60      	ldr	r3, [pc, #384]	; (8001ef8 <FSM_SystemControl+0xb6c>)
 8001d78:	fba3 1302 	umull	r1, r3, r3, r2
 8001d7c:	08d9      	lsrs	r1, r3, #3
 8001d7e:	460b      	mov	r3, r1
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d117      	bne.n	8001dbe <FSM_SystemControl+0xa32>
			_time_out = TIME_OUT_FOR_SET;
 8001d8e:	4b5b      	ldr	r3, [pc, #364]	; (8001efc <FSM_SystemControl+0xb70>)
 8001d90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d94:	801a      	strh	r2, [r3, #0]
			_data_sys.month = _data_sys.month < 12 ? _data_sys.month + 1 : 1;
 8001d96:	4b5a      	ldr	r3, [pc, #360]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001d98:	791b      	ldrb	r3, [r3, #4]
 8001d9a:	2b0b      	cmp	r3, #11
 8001d9c:	d804      	bhi.n	8001da8 <FSM_SystemControl+0xa1c>
 8001d9e:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001da0:	791b      	ldrb	r3, [r3, #4]
 8001da2:	3301      	adds	r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	e000      	b.n	8001daa <FSM_SystemControl+0xa1e>
 8001da8:	2301      	movs	r3, #1
 8001daa:	4a55      	ldr	r2, [pc, #340]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001dac:	7113      	strb	r3, [r2, #4]
			CLCD_PrintNumBuffer(0, INDEX_LCD_MONTH, _data_sys.month);
 8001dae:	4b54      	ldr	r3, [pc, #336]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001db0:	791b      	ldrb	r3, [r3, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	2108      	movs	r1, #8
 8001db6:	2000      	movs	r0, #0
 8001db8:	f000 fdb0 	bl	800291c <CLCD_PrintNumBuffer>
 8001dbc:	e027      	b.n	8001e0e <FSM_SystemControl+0xa82>

		}
		else if(IN_Stick(BT_DEC) % 10 == 1){
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	f000 fb82 	bl	80024c8 <IN_Stick>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b4b      	ldr	r3, [pc, #300]	; (8001ef8 <FSM_SystemControl+0xb6c>)
 8001dca:	fba3 1302 	umull	r1, r3, r3, r2
 8001dce:	08d9      	lsrs	r1, r3, #3
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d116      	bne.n	8001e0e <FSM_SystemControl+0xa82>
			_time_out = TIME_OUT_FOR_SET;
 8001de0:	4b46      	ldr	r3, [pc, #280]	; (8001efc <FSM_SystemControl+0xb70>)
 8001de2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001de6:	801a      	strh	r2, [r3, #0]
			_data_sys.month = _data_sys.month > 1 ? _data_sys.month - 1 : 12;
 8001de8:	4b45      	ldr	r3, [pc, #276]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001dea:	791b      	ldrb	r3, [r3, #4]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d904      	bls.n	8001dfa <FSM_SystemControl+0xa6e>
 8001df0:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001df2:	791b      	ldrb	r3, [r3, #4]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	e000      	b.n	8001dfc <FSM_SystemControl+0xa70>
 8001dfa:	230c      	movs	r3, #12
 8001dfc:	4a40      	ldr	r2, [pc, #256]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001dfe:	7113      	strb	r3, [r2, #4]
			CLCD_PrintNumBuffer(0, INDEX_LCD_MONTH, _data_sys.month);
 8001e00:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001e02:	791b      	ldrb	r3, [r3, #4]
 8001e04:	461a      	mov	r2, r3
 8001e06:	2108      	movs	r1, #8
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f000 fd87 	bl	800291c <CLCD_PrintNumBuffer>
		}

		if(IN_IsPressed(BT_MODE)){
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f000 fb6a 	bl	80024e8 <IN_IsPressed>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d014      	beq.n	8001e44 <FSM_SystemControl+0xab8>
			_time_out = TIME_OUT_FOR_SET;
 8001e1a:	4b38      	ldr	r3, [pc, #224]	; (8001efc <FSM_SystemControl+0xb70>)
 8001e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e20:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_MONTH, _data_sys.month);
 8001e22:	4b37      	ldr	r3, [pc, #220]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001e24:	791b      	ldrb	r3, [r3, #4]
 8001e26:	4619      	mov	r1, r3
 8001e28:	2005      	movs	r0, #5
 8001e2a:	f7ff f98d 	bl	8001148 <DS_Write>
			CLCD_PrintNumBuffer(0, INDEX_LCD_MONTH, _data_sys.month);
 8001e2e:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001e30:	791b      	ldrb	r3, [r3, #4]
 8001e32:	461a      	mov	r2, r3
 8001e34:	2108      	movs	r1, #8
 8001e36:	2000      	movs	r0, #0
 8001e38:	f000 fd70 	bl	800291c <CLCD_PrintNumBuffer>
			mode_sys = SET_YEAR;
 8001e3c:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <FSM_SystemControl+0xb78>)
 8001e3e:	2209      	movs	r2, #9
 8001e40:	701a      	strb	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
			mode_sys = DISPLAY_DATE_DHT;
		}
		break;
 8001e42:	e2ca      	b.n	80023da <FSM_SystemControl+0x104e>
		else if(_time_out < 5){
 8001e44:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <FSM_SystemControl+0xb70>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	f200 82c6 	bhi.w	80023da <FSM_SystemControl+0x104e>
			_time_screen = TIME_SCREEN_DATE;
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <FSM_SystemControl+0xb7c>)
 8001e50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e54:	801a      	strh	r2, [r3, #0]
			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
 8001e56:	4a2d      	ldr	r2, [pc, #180]	; (8001f0c <FSM_SystemControl+0xb80>)
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f000 fd28 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
 8001e60:	4a2b      	ldr	r2, [pc, #172]	; (8001f10 <FSM_SystemControl+0xb84>)
 8001e62:	2100      	movs	r1, #0
 8001e64:	2001      	movs	r0, #1
 8001e66:	f000 fd23 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
 8001e6a:	22df      	movs	r2, #223	; 0xdf
 8001e6c:	2106      	movs	r1, #6
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f000 fce2 	bl	8002838 <CLCD_PrintCharBuffer>
			mode_sys = DISPLAY_DATE_DHT;
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <FSM_SystemControl+0xb78>)
 8001e76:	2202      	movs	r2, #2
 8001e78:	701a      	strb	r2, [r3, #0]
		break;
 8001e7a:	e2ae      	b.n	80023da <FSM_SystemControl+0x104e>
	case SET_YEAR:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <FSM_SystemControl+0xb88>)
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <FSM_SystemControl+0xb6c>)
 8001e82:	fba3 1302 	umull	r1, r3, r3, r2
 8001e86:	0919      	lsrs	r1, r3, #4
 8001e88:	460b      	mov	r3, r1
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b09      	cmp	r3, #9
 8001e96:	d809      	bhi.n	8001eac <FSM_SystemControl+0xb20>
			CLCD_PrintNumBuffer(0, INDEX_LCD_YEAR, 2000 + _data_sys.year);
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001e9a:	78db      	ldrb	r3, [r3, #3]
 8001e9c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	210b      	movs	r1, #11
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f000 fd39 	bl	800291c <CLCD_PrintNumBuffer>
 8001eaa:	e004      	b.n	8001eb6 <FSM_SystemControl+0xb2a>
		}
		else {
			CLCD_PrintStringBuffer(0, INDEX_LCD_YEAR, "    ");
 8001eac:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <FSM_SystemControl+0xb8c>)
 8001eae:	210b      	movs	r1, #11
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f000 fcfd 	bl	80028b0 <CLCD_PrintStringBuffer>
		}

//		Increase/Decrease 1 every 500ms
		if(IN_Stick(BT_INC) % 10 == 1){
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f000 fb06 	bl	80024c8 <IN_Stick>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <FSM_SystemControl+0xb6c>)
 8001ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ec6:	08d9      	lsrs	r1, r3, #3
 8001ec8:	460b      	mov	r3, r1
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d12e      	bne.n	8001f36 <FSM_SystemControl+0xbaa>
			_time_out = TIME_OUT_FOR_SET;
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <FSM_SystemControl+0xb70>)
 8001eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ede:	801a      	strh	r2, [r3, #0]
			_data_sys.year = _data_sys.year < 99 ? _data_sys.year + 1 : 0;
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001ee2:	78db      	ldrb	r3, [r3, #3]
 8001ee4:	2b62      	cmp	r3, #98	; 0x62
 8001ee6:	d819      	bhi.n	8001f1c <FSM_SystemControl+0xb90>
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <FSM_SystemControl+0xb74>)
 8001eea:	78db      	ldrb	r3, [r3, #3]
 8001eec:	3301      	adds	r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	e015      	b.n	8001f1e <FSM_SystemControl+0xb92>
 8001ef2:	bf00      	nop
 8001ef4:	08007e40 	.word	0x08007e40
 8001ef8:	cccccccd 	.word	0xcccccccd
 8001efc:	2000012a 	.word	0x2000012a
 8001f00:	20000110 	.word	0x20000110
 8001f04:	2000010c 	.word	0x2000010c
 8001f08:	20000126 	.word	0x20000126
 8001f0c:	08007e14 	.word	0x08007e14
 8001f10:	08007e28 	.word	0x08007e28
 8001f14:	20000124 	.word	0x20000124
 8001f18:	08007e44 	.word	0x08007e44
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	4ab3      	ldr	r2, [pc, #716]	; (80021ec <FSM_SystemControl+0xe60>)
 8001f20:	70d3      	strb	r3, [r2, #3]
			CLCD_PrintNumBuffer(0, INDEX_LCD_YEAR, 2000 + _data_sys.year);
 8001f22:	4bb2      	ldr	r3, [pc, #712]	; (80021ec <FSM_SystemControl+0xe60>)
 8001f24:	78db      	ldrb	r3, [r3, #3]
 8001f26:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	210b      	movs	r1, #11
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f000 fcf4 	bl	800291c <CLCD_PrintNumBuffer>
 8001f34:	e029      	b.n	8001f8a <FSM_SystemControl+0xbfe>
		}
		else if(IN_Stick(BT_DEC) % 10 == 1){
 8001f36:	2002      	movs	r0, #2
 8001f38:	f000 fac6 	bl	80024c8 <IN_Stick>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4bab      	ldr	r3, [pc, #684]	; (80021f0 <FSM_SystemControl+0xe64>)
 8001f42:	fba3 1302 	umull	r1, r3, r3, r2
 8001f46:	08d9      	lsrs	r1, r3, #3
 8001f48:	460b      	mov	r3, r1
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d118      	bne.n	8001f8a <FSM_SystemControl+0xbfe>
			_time_out = TIME_OUT_FOR_SET;
 8001f58:	4ba6      	ldr	r3, [pc, #664]	; (80021f4 <FSM_SystemControl+0xe68>)
 8001f5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f5e:	801a      	strh	r2, [r3, #0]
			_data_sys.year = _data_sys.year > 0 ? _data_sys.year - 1 : 99;
 8001f60:	4ba2      	ldr	r3, [pc, #648]	; (80021ec <FSM_SystemControl+0xe60>)
 8001f62:	78db      	ldrb	r3, [r3, #3]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <FSM_SystemControl+0xbe6>
 8001f68:	4ba0      	ldr	r3, [pc, #640]	; (80021ec <FSM_SystemControl+0xe60>)
 8001f6a:	78db      	ldrb	r3, [r3, #3]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	e000      	b.n	8001f74 <FSM_SystemControl+0xbe8>
 8001f72:	2363      	movs	r3, #99	; 0x63
 8001f74:	4a9d      	ldr	r2, [pc, #628]	; (80021ec <FSM_SystemControl+0xe60>)
 8001f76:	70d3      	strb	r3, [r2, #3]
			CLCD_PrintNumBuffer(0, INDEX_LCD_YEAR, 2000 + _data_sys.year);
 8001f78:	4b9c      	ldr	r3, [pc, #624]	; (80021ec <FSM_SystemControl+0xe60>)
 8001f7a:	78db      	ldrb	r3, [r3, #3]
 8001f7c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001f80:	461a      	mov	r2, r3
 8001f82:	210b      	movs	r1, #11
 8001f84:	2000      	movs	r0, #0
 8001f86:	f000 fcc9 	bl	800291c <CLCD_PrintNumBuffer>
		}

		if(IN_IsPressed(BT_MODE) || (_time_out < 5)){
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 faac 	bl	80024e8 <IN_IsPressed>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d104      	bne.n	8001fa0 <FSM_SystemControl+0xc14>
 8001f96:	4b97      	ldr	r3, [pc, #604]	; (80021f4 <FSM_SystemControl+0xe68>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	f200 821f 	bhi.w	80023de <FSM_SystemControl+0x1052>
			_time_screen = TIME_SCREEN_DATE;
 8001fa0:	4b95      	ldr	r3, [pc, #596]	; (80021f8 <FSM_SystemControl+0xe6c>)
 8001fa2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001fa6:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_YEAR, _data_sys.year);
 8001fa8:	4b90      	ldr	r3, [pc, #576]	; (80021ec <FSM_SystemControl+0xe60>)
 8001faa:	78db      	ldrb	r3, [r3, #3]
 8001fac:	4619      	mov	r1, r3
 8001fae:	2006      	movs	r0, #6
 8001fb0:	f7ff f8ca 	bl	8001148 <DS_Write>

			CLCD_CreateChar(0, temp_icon);
 8001fb4:	4991      	ldr	r1, [pc, #580]	; (80021fc <FSM_SystemControl+0xe70>)
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f000 fddc 	bl	8002b74 <CLCD_CreateChar>
			CLCD_CreateChar(1, humi_icon);
 8001fbc:	4990      	ldr	r1, [pc, #576]	; (8002200 <FSM_SystemControl+0xe74>)
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f000 fdd8 	bl	8002b74 <CLCD_CreateChar>

			CLCD_PrintStringBuffer(0, 0, SCREEN_DATE_DHT_0);
 8001fc4:	4a8f      	ldr	r2, [pc, #572]	; (8002204 <FSM_SystemControl+0xe78>)
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f000 fc71 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_DATE_DHT_1);
 8001fce:	4a8e      	ldr	r2, [pc, #568]	; (8002208 <FSM_SystemControl+0xe7c>)
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f000 fc6c 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintCharBuffer(1, INDEX_CEL_SYMBOL, 0xDF);
 8001fd8:	22df      	movs	r2, #223	; 0xdf
 8001fda:	2106      	movs	r1, #6
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f000 fc2b 	bl	8002838 <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, INDEX_LCD_TEMP_SYMBOL, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f000 fc26 	bl	8002838 <CLCD_PrintCharBuffer>
			CLCD_PrintCharBuffer(1, INDEX_LCD_HUMI_SYMBOL, 1);
 8001fec:	2201      	movs	r2, #1
 8001fee:	2109      	movs	r1, #9
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f000 fc21 	bl	8002838 <CLCD_PrintCharBuffer>
			mode_sys = DISPLAY_DATE_DHT;
 8001ff6:	4b85      	ldr	r3, [pc, #532]	; (800220c <FSM_SystemControl+0xe80>)
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001ffc:	e1ef      	b.n	80023de <FSM_SystemControl+0x1052>
	case SET_ALARM:

		if(IN_IsPressed(BT_MODE)){
 8001ffe:	2001      	movs	r0, #1
 8002000:	f000 fa72 	bl	80024e8 <IN_IsPressed>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d022      	beq.n	8002050 <FSM_SystemControl+0xcc4>
			_data_sys.alarm_flag = 1;
 800200a:	4b78      	ldr	r3, [pc, #480]	; (80021ec <FSM_SystemControl+0xe60>)
 800200c:	2201      	movs	r2, #1
 800200e:	725a      	strb	r2, [r3, #9]
			DS_Write(ADDRESS_FLAG_ALARM, 1);
 8002010:	2101      	movs	r1, #1
 8002012:	2028      	movs	r0, #40	; 0x28
 8002014:	f7ff f898 	bl	8001148 <DS_Write>

			CLCD_PrintStringBuffer(0, 0, SCREEN_SET_ALARM_0);
 8002018:	4a7d      	ldr	r2, [pc, #500]	; (8002210 <FSM_SystemControl+0xe84>)
 800201a:	2100      	movs	r1, #0
 800201c:	2000      	movs	r0, #0
 800201e:	f000 fc47 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_SET_ALARM_1);
 8002022:	4a7c      	ldr	r2, [pc, #496]	; (8002214 <FSM_SystemControl+0xe88>)
 8002024:	2100      	movs	r1, #0
 8002026:	2001      	movs	r0, #1
 8002028:	f000 fc42 	bl	80028b0 <CLCD_PrintStringBuffer>

			CLCD_PrintNumBuffer(1, INDEX_ALARM_HOUR, _data_sys.alarm_hour);
 800202c:	4b6f      	ldr	r3, [pc, #444]	; (80021ec <FSM_SystemControl+0xe60>)
 800202e:	79db      	ldrb	r3, [r3, #7]
 8002030:	461a      	mov	r2, r3
 8002032:	2103      	movs	r1, #3
 8002034:	2001      	movs	r0, #1
 8002036:	f000 fc71 	bl	800291c <CLCD_PrintNumBuffer>
			CLCD_PrintNumBuffer(1, INDEX_ALARM_MIN, _data_sys.alarm_min);
 800203a:	4b6c      	ldr	r3, [pc, #432]	; (80021ec <FSM_SystemControl+0xe60>)
 800203c:	7a1b      	ldrb	r3, [r3, #8]
 800203e:	461a      	mov	r2, r3
 8002040:	210b      	movs	r1, #11
 8002042:	2001      	movs	r0, #1
 8002044:	f000 fc6a 	bl	800291c <CLCD_PrintNumBuffer>

			mode_sys = SET_ALARM_HOUR;
 8002048:	4b70      	ldr	r3, [pc, #448]	; (800220c <FSM_SystemControl+0xe80>)
 800204a:	220b      	movs	r2, #11
 800204c:	701a      	strb	r2, [r3, #0]
			_data_sys.alarm_flag = 0;
			DS_Write(ADDRESS_FLAG_ALARM, 0);

			mode_sys = INIT;
		}
		break;
 800204e:	e1c8      	b.n	80023e2 <FSM_SystemControl+0x1056>
		else if(IN_IsPressed(BT_DEC) || IN_IsPressed(BT_INC) || (_time_out < 5)){
 8002050:	2002      	movs	r0, #2
 8002052:	f000 fa49 	bl	80024e8 <IN_IsPressed>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10a      	bne.n	8002072 <FSM_SystemControl+0xce6>
 800205c:	2000      	movs	r0, #0
 800205e:	f000 fa43 	bl	80024e8 <IN_IsPressed>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d104      	bne.n	8002072 <FSM_SystemControl+0xce6>
 8002068:	4b62      	ldr	r3, [pc, #392]	; (80021f4 <FSM_SystemControl+0xe68>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	2b04      	cmp	r3, #4
 800206e:	f200 81b8 	bhi.w	80023e2 <FSM_SystemControl+0x1056>
			_time_screen = 50;
 8002072:	4b61      	ldr	r3, [pc, #388]	; (80021f8 <FSM_SystemControl+0xe6c>)
 8002074:	2232      	movs	r2, #50	; 0x32
 8002076:	801a      	strh	r2, [r3, #0]
			_data_sys.alarm_flag = 0;
 8002078:	4b5c      	ldr	r3, [pc, #368]	; (80021ec <FSM_SystemControl+0xe60>)
 800207a:	2200      	movs	r2, #0
 800207c:	725a      	strb	r2, [r3, #9]
			DS_Write(ADDRESS_FLAG_ALARM, 0);
 800207e:	2100      	movs	r1, #0
 8002080:	2028      	movs	r0, #40	; 0x28
 8002082:	f7ff f861 	bl	8001148 <DS_Write>
			mode_sys = INIT;
 8002086:	4b61      	ldr	r3, [pc, #388]	; (800220c <FSM_SystemControl+0xe80>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
		break;
 800208c:	e1a9      	b.n	80023e2 <FSM_SystemControl+0x1056>
	case SET_ALARM_HOUR:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 800208e:	4b62      	ldr	r3, [pc, #392]	; (8002218 <FSM_SystemControl+0xe8c>)
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	4b57      	ldr	r3, [pc, #348]	; (80021f0 <FSM_SystemControl+0xe64>)
 8002094:	fba3 1302 	umull	r1, r3, r3, r2
 8002098:	0919      	lsrs	r1, r3, #4
 800209a:	460b      	mov	r3, r1
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b09      	cmp	r3, #9
 80020a8:	d807      	bhi.n	80020ba <FSM_SystemControl+0xd2e>
			CLCD_PrintNumBuffer(1, INDEX_ALARM_HOUR, _data_sys.alarm_hour);
 80020aa:	4b50      	ldr	r3, [pc, #320]	; (80021ec <FSM_SystemControl+0xe60>)
 80020ac:	79db      	ldrb	r3, [r3, #7]
 80020ae:	461a      	mov	r2, r3
 80020b0:	2103      	movs	r1, #3
 80020b2:	2001      	movs	r0, #1
 80020b4:	f000 fc32 	bl	800291c <CLCD_PrintNumBuffer>
 80020b8:	e004      	b.n	80020c4 <FSM_SystemControl+0xd38>
		}
		else {
			CLCD_PrintStringBuffer(1, INDEX_ALARM_HOUR, "  ");
 80020ba:	4a58      	ldr	r2, [pc, #352]	; (800221c <FSM_SystemControl+0xe90>)
 80020bc:	2103      	movs	r1, #3
 80020be:	2001      	movs	r0, #1
 80020c0:	f000 fbf6 	bl	80028b0 <CLCD_PrintStringBuffer>
		}

//		Increase/Decrease 1 every 500ms
		if(IN_Stick(BT_INC) % 10 == 1){
 80020c4:	2000      	movs	r0, #0
 80020c6:	f000 f9ff 	bl	80024c8 <IN_Stick>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b48      	ldr	r3, [pc, #288]	; (80021f0 <FSM_SystemControl+0xe64>)
 80020d0:	fba3 1302 	umull	r1, r3, r3, r2
 80020d4:	08d9      	lsrs	r1, r3, #3
 80020d6:	460b      	mov	r3, r1
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d117      	bne.n	8002116 <FSM_SystemControl+0xd8a>
			_time_out = TIME_OUT_FOR_SET;
 80020e6:	4b43      	ldr	r3, [pc, #268]	; (80021f4 <FSM_SystemControl+0xe68>)
 80020e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ec:	801a      	strh	r2, [r3, #0]
			_data_sys.alarm_hour = _data_sys.alarm_hour < 23 ? _data_sys.alarm_hour + 1 : 0;
 80020ee:	4b3f      	ldr	r3, [pc, #252]	; (80021ec <FSM_SystemControl+0xe60>)
 80020f0:	79db      	ldrb	r3, [r3, #7]
 80020f2:	2b16      	cmp	r3, #22
 80020f4:	d804      	bhi.n	8002100 <FSM_SystemControl+0xd74>
 80020f6:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <FSM_SystemControl+0xe60>)
 80020f8:	79db      	ldrb	r3, [r3, #7]
 80020fa:	3301      	adds	r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	e000      	b.n	8002102 <FSM_SystemControl+0xd76>
 8002100:	2300      	movs	r3, #0
 8002102:	4a3a      	ldr	r2, [pc, #232]	; (80021ec <FSM_SystemControl+0xe60>)
 8002104:	71d3      	strb	r3, [r2, #7]
			CLCD_PrintNumBuffer(1, INDEX_ALARM_HOUR, _data_sys.alarm_hour);
 8002106:	4b39      	ldr	r3, [pc, #228]	; (80021ec <FSM_SystemControl+0xe60>)
 8002108:	79db      	ldrb	r3, [r3, #7]
 800210a:	461a      	mov	r2, r3
 800210c:	2103      	movs	r1, #3
 800210e:	2001      	movs	r0, #1
 8002110:	f000 fc04 	bl	800291c <CLCD_PrintNumBuffer>
 8002114:	e027      	b.n	8002166 <FSM_SystemControl+0xdda>
		}
		else if(IN_Stick(BT_DEC) % 10 == 1){
 8002116:	2002      	movs	r0, #2
 8002118:	f000 f9d6 	bl	80024c8 <IN_Stick>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <FSM_SystemControl+0xe64>)
 8002122:	fba3 1302 	umull	r1, r3, r3, r2
 8002126:	08d9      	lsrs	r1, r3, #3
 8002128:	460b      	mov	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d116      	bne.n	8002166 <FSM_SystemControl+0xdda>
			_time_out = TIME_OUT_FOR_SET;
 8002138:	4b2e      	ldr	r3, [pc, #184]	; (80021f4 <FSM_SystemControl+0xe68>)
 800213a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800213e:	801a      	strh	r2, [r3, #0]
			_data_sys.alarm_hour = _data_sys.alarm_hour > 0 ? _data_sys.alarm_hour - 1 : 23;
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <FSM_SystemControl+0xe60>)
 8002142:	79db      	ldrb	r3, [r3, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <FSM_SystemControl+0xdc6>
 8002148:	4b28      	ldr	r3, [pc, #160]	; (80021ec <FSM_SystemControl+0xe60>)
 800214a:	79db      	ldrb	r3, [r3, #7]
 800214c:	3b01      	subs	r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	e000      	b.n	8002154 <FSM_SystemControl+0xdc8>
 8002152:	2317      	movs	r3, #23
 8002154:	4a25      	ldr	r2, [pc, #148]	; (80021ec <FSM_SystemControl+0xe60>)
 8002156:	71d3      	strb	r3, [r2, #7]
			CLCD_PrintNumBuffer(1, INDEX_ALARM_HOUR, _data_sys.alarm_hour);
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <FSM_SystemControl+0xe60>)
 800215a:	79db      	ldrb	r3, [r3, #7]
 800215c:	461a      	mov	r2, r3
 800215e:	2103      	movs	r1, #3
 8002160:	2001      	movs	r0, #1
 8002162:	f000 fbdb 	bl	800291c <CLCD_PrintNumBuffer>
		}

		if(IN_IsPressed(BT_MODE)){
 8002166:	2001      	movs	r0, #1
 8002168:	f000 f9be 	bl	80024e8 <IN_IsPressed>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d014      	beq.n	800219c <FSM_SystemControl+0xe10>
			_time_out = TIME_OUT_FOR_SET;
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <FSM_SystemControl+0xe68>)
 8002174:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002178:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_HOUR_ALARM, _data_sys.alarm_hour);
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <FSM_SystemControl+0xe60>)
 800217c:	79db      	ldrb	r3, [r3, #7]
 800217e:	4619      	mov	r1, r3
 8002180:	2026      	movs	r0, #38	; 0x26
 8002182:	f7fe ffe1 	bl	8001148 <DS_Write>
			CLCD_PrintNumBuffer(1, INDEX_ALARM_HOUR, _data_sys.alarm_hour);
 8002186:	4b19      	ldr	r3, [pc, #100]	; (80021ec <FSM_SystemControl+0xe60>)
 8002188:	79db      	ldrb	r3, [r3, #7]
 800218a:	461a      	mov	r2, r3
 800218c:	2103      	movs	r1, #3
 800218e:	2001      	movs	r0, #1
 8002190:	f000 fbc4 	bl	800291c <CLCD_PrintNumBuffer>
			mode_sys = SET_ALARM_MIN;
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <FSM_SystemControl+0xe80>)
 8002196:	220c      	movs	r2, #12
 8002198:	701a      	strb	r2, [r3, #0]
		else if(_time_out < 5){
			_time_screen = 50;
			DS_Write(ADDRESS_HOUR_ALARM, _data_sys.alarm_hour);
			mode_sys = INIT;
		}
		break;
 800219a:	e124      	b.n	80023e6 <FSM_SystemControl+0x105a>
		else if(_time_out < 5){
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <FSM_SystemControl+0xe68>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	f200 8120 	bhi.w	80023e6 <FSM_SystemControl+0x105a>
			_time_screen = 50;
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <FSM_SystemControl+0xe6c>)
 80021a8:	2232      	movs	r2, #50	; 0x32
 80021aa:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_HOUR_ALARM, _data_sys.alarm_hour);
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <FSM_SystemControl+0xe60>)
 80021ae:	79db      	ldrb	r3, [r3, #7]
 80021b0:	4619      	mov	r1, r3
 80021b2:	2026      	movs	r0, #38	; 0x26
 80021b4:	f7fe ffc8 	bl	8001148 <DS_Write>
			mode_sys = INIT;
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <FSM_SystemControl+0xe80>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
		break;
 80021be:	e112      	b.n	80023e6 <FSM_SystemControl+0x105a>
	case SET_ALARM_MIN:
//		Blink BLink BLink :D
		if(_counter_time_elapsed % 20 < 10){
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <FSM_SystemControl+0xe8c>)
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <FSM_SystemControl+0xe64>)
 80021c6:	fba3 1302 	umull	r1, r3, r3, r2
 80021ca:	0919      	lsrs	r1, r3, #4
 80021cc:	460b      	mov	r3, r1
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b09      	cmp	r3, #9
 80021da:	d821      	bhi.n	8002220 <FSM_SystemControl+0xe94>
			CLCD_PrintNumBuffer(1, INDEX_ALARM_MIN, _data_sys.alarm_min);
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <FSM_SystemControl+0xe60>)
 80021de:	7a1b      	ldrb	r3, [r3, #8]
 80021e0:	461a      	mov	r2, r3
 80021e2:	210b      	movs	r1, #11
 80021e4:	2001      	movs	r0, #1
 80021e6:	f000 fb99 	bl	800291c <CLCD_PrintNumBuffer>
 80021ea:	e01e      	b.n	800222a <FSM_SystemControl+0xe9e>
 80021ec:	20000110 	.word	0x20000110
 80021f0:	cccccccd 	.word	0xcccccccd
 80021f4:	2000012a 	.word	0x2000012a
 80021f8:	20000126 	.word	0x20000126
 80021fc:	20000054 	.word	0x20000054
 8002200:	2000005c 	.word	0x2000005c
 8002204:	08007e14 	.word	0x08007e14
 8002208:	08007e28 	.word	0x08007e28
 800220c:	2000010c 	.word	0x2000010c
 8002210:	08007e4c 	.word	0x08007e4c
 8002214:	08007e60 	.word	0x08007e60
 8002218:	20000124 	.word	0x20000124
 800221c:	08007e40 	.word	0x08007e40
		}
		else {
			CLCD_PrintStringBuffer(1, INDEX_ALARM_MIN, "  ");
 8002220:	4a74      	ldr	r2, [pc, #464]	; (80023f4 <FSM_SystemControl+0x1068>)
 8002222:	210b      	movs	r1, #11
 8002224:	2001      	movs	r0, #1
 8002226:	f000 fb43 	bl	80028b0 <CLCD_PrintStringBuffer>
		}

//		Increase/Decrease 1 every 500ms
		if(IN_Stick(BT_INC) % 10 == 1){
 800222a:	2000      	movs	r0, #0
 800222c:	f000 f94c 	bl	80024c8 <IN_Stick>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	4b70      	ldr	r3, [pc, #448]	; (80023f8 <FSM_SystemControl+0x106c>)
 8002236:	fba3 1302 	umull	r1, r3, r3, r2
 800223a:	08d9      	lsrs	r1, r3, #3
 800223c:	460b      	mov	r3, r1
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d117      	bne.n	800227c <FSM_SystemControl+0xef0>
			_time_out = TIME_OUT_FOR_SET;
 800224c:	4b6b      	ldr	r3, [pc, #428]	; (80023fc <FSM_SystemControl+0x1070>)
 800224e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002252:	801a      	strh	r2, [r3, #0]
			_data_sys.alarm_min = _data_sys.alarm_min < 59 ? _data_sys.alarm_min + 1 : 0;
 8002254:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <FSM_SystemControl+0x1074>)
 8002256:	7a1b      	ldrb	r3, [r3, #8]
 8002258:	2b3a      	cmp	r3, #58	; 0x3a
 800225a:	d804      	bhi.n	8002266 <FSM_SystemControl+0xeda>
 800225c:	4b68      	ldr	r3, [pc, #416]	; (8002400 <FSM_SystemControl+0x1074>)
 800225e:	7a1b      	ldrb	r3, [r3, #8]
 8002260:	3301      	adds	r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	e000      	b.n	8002268 <FSM_SystemControl+0xedc>
 8002266:	2300      	movs	r3, #0
 8002268:	4a65      	ldr	r2, [pc, #404]	; (8002400 <FSM_SystemControl+0x1074>)
 800226a:	7213      	strb	r3, [r2, #8]
			CLCD_PrintNumBuffer(1, INDEX_ALARM_MIN, _data_sys.alarm_min);
 800226c:	4b64      	ldr	r3, [pc, #400]	; (8002400 <FSM_SystemControl+0x1074>)
 800226e:	7a1b      	ldrb	r3, [r3, #8]
 8002270:	461a      	mov	r2, r3
 8002272:	210b      	movs	r1, #11
 8002274:	2001      	movs	r0, #1
 8002276:	f000 fb51 	bl	800291c <CLCD_PrintNumBuffer>
 800227a:	e027      	b.n	80022cc <FSM_SystemControl+0xf40>
		}
		else if(IN_Stick(BT_DEC) % 10 == 1){
 800227c:	2002      	movs	r0, #2
 800227e:	f000 f923 	bl	80024c8 <IN_Stick>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	4b5c      	ldr	r3, [pc, #368]	; (80023f8 <FSM_SystemControl+0x106c>)
 8002288:	fba3 1302 	umull	r1, r3, r3, r2
 800228c:	08d9      	lsrs	r1, r3, #3
 800228e:	460b      	mov	r3, r1
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d116      	bne.n	80022cc <FSM_SystemControl+0xf40>
			_time_out = TIME_OUT_FOR_SET;
 800229e:	4b57      	ldr	r3, [pc, #348]	; (80023fc <FSM_SystemControl+0x1070>)
 80022a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022a4:	801a      	strh	r2, [r3, #0]
			_data_sys.alarm_min = _data_sys.alarm_min > 0 ? _data_sys.alarm_min - 1 : 59;
 80022a6:	4b56      	ldr	r3, [pc, #344]	; (8002400 <FSM_SystemControl+0x1074>)
 80022a8:	7a1b      	ldrb	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <FSM_SystemControl+0xf2c>
 80022ae:	4b54      	ldr	r3, [pc, #336]	; (8002400 <FSM_SystemControl+0x1074>)
 80022b0:	7a1b      	ldrb	r3, [r3, #8]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e000      	b.n	80022ba <FSM_SystemControl+0xf2e>
 80022b8:	233b      	movs	r3, #59	; 0x3b
 80022ba:	4a51      	ldr	r2, [pc, #324]	; (8002400 <FSM_SystemControl+0x1074>)
 80022bc:	7213      	strb	r3, [r2, #8]
			CLCD_PrintNumBuffer(1, INDEX_ALARM_MIN, _data_sys.alarm_min);
 80022be:	4b50      	ldr	r3, [pc, #320]	; (8002400 <FSM_SystemControl+0x1074>)
 80022c0:	7a1b      	ldrb	r3, [r3, #8]
 80022c2:	461a      	mov	r2, r3
 80022c4:	210b      	movs	r1, #11
 80022c6:	2001      	movs	r0, #1
 80022c8:	f000 fb28 	bl	800291c <CLCD_PrintNumBuffer>
		}

		if(IN_IsPressed(BT_MODE)){
 80022cc:	2001      	movs	r0, #1
 80022ce:	f000 f90b 	bl	80024e8 <IN_IsPressed>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00c      	beq.n	80022f2 <FSM_SystemControl+0xf66>
			_time_screen = 50;
 80022d8:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <FSM_SystemControl+0x1078>)
 80022da:	2232      	movs	r2, #50	; 0x32
 80022dc:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_MIN_ALARM, _data_sys.alarm_min);
 80022de:	4b48      	ldr	r3, [pc, #288]	; (8002400 <FSM_SystemControl+0x1074>)
 80022e0:	7a1b      	ldrb	r3, [r3, #8]
 80022e2:	4619      	mov	r1, r3
 80022e4:	2027      	movs	r0, #39	; 0x27
 80022e6:	f7fe ff2f 	bl	8001148 <DS_Write>

			mode_sys = INIT;
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <FSM_SystemControl+0x107c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
		else if(_time_out < 5){
			_time_screen = 50;
			DS_Write(ADDRESS_MIN_ALARM, _data_sys.alarm_min);
			mode_sys = INIT;
		}
		break;
 80022f0:	e07b      	b.n	80023ea <FSM_SystemControl+0x105e>
		else if(_time_out < 5){
 80022f2:	4b42      	ldr	r3, [pc, #264]	; (80023fc <FSM_SystemControl+0x1070>)
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d877      	bhi.n	80023ea <FSM_SystemControl+0x105e>
			_time_screen = 50;
 80022fa:	4b42      	ldr	r3, [pc, #264]	; (8002404 <FSM_SystemControl+0x1078>)
 80022fc:	2232      	movs	r2, #50	; 0x32
 80022fe:	801a      	strh	r2, [r3, #0]
			DS_Write(ADDRESS_MIN_ALARM, _data_sys.alarm_min);
 8002300:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <FSM_SystemControl+0x1074>)
 8002302:	7a1b      	ldrb	r3, [r3, #8]
 8002304:	4619      	mov	r1, r3
 8002306:	2027      	movs	r0, #39	; 0x27
 8002308:	f7fe ff1e 	bl	8001148 <DS_Write>
			mode_sys = INIT;
 800230c:	4b3e      	ldr	r3, [pc, #248]	; (8002408 <FSM_SystemControl+0x107c>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
		break;
 8002312:	e06a      	b.n	80023ea <FSM_SystemControl+0x105e>
	case ALARM_GO_OFF:
		if(_counter_time_elapsed % 20 < 10){
 8002314:	4b3d      	ldr	r3, [pc, #244]	; (800240c <FSM_SystemControl+0x1080>)
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <FSM_SystemControl+0x106c>)
 800231a:	fba3 1302 	umull	r1, r3, r3, r2
 800231e:	0919      	lsrs	r1, r3, #4
 8002320:	460b      	mov	r3, r1
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b09      	cmp	r3, #9
 800232e:	d80a      	bhi.n	8002346 <FSM_SystemControl+0xfba>
			CLCD_PrintStringBuffer(0, 0, SCREEN_ALARM_GO_OFF_0);
 8002330:	4a37      	ldr	r2, [pc, #220]	; (8002410 <FSM_SystemControl+0x1084>)
 8002332:	2100      	movs	r1, #0
 8002334:	2000      	movs	r0, #0
 8002336:	f000 fabb 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_ALARM_GO_OFF_1);
 800233a:	4a36      	ldr	r2, [pc, #216]	; (8002414 <FSM_SystemControl+0x1088>)
 800233c:	2100      	movs	r1, #0
 800233e:	2001      	movs	r0, #1
 8002340:	f000 fab6 	bl	80028b0 <CLCD_PrintStringBuffer>
 8002344:	e009      	b.n	800235a <FSM_SystemControl+0xfce>
		}
		else {
			CLCD_PrintStringBuffer(0, 0, SCREEN_BLANK);
 8002346:	4a34      	ldr	r2, [pc, #208]	; (8002418 <FSM_SystemControl+0x108c>)
 8002348:	2100      	movs	r1, #0
 800234a:	2000      	movs	r0, #0
 800234c:	f000 fab0 	bl	80028b0 <CLCD_PrintStringBuffer>
			CLCD_PrintStringBuffer(1, 0, SCREEN_BLANK);
 8002350:	4a31      	ldr	r2, [pc, #196]	; (8002418 <FSM_SystemControl+0x108c>)
 8002352:	2100      	movs	r1, #0
 8002354:	2001      	movs	r0, #1
 8002356:	f000 faab 	bl	80028b0 <CLCD_PrintStringBuffer>
		}

		if(_counter_time_elapsed % 20 < 10){
 800235a:	4b2c      	ldr	r3, [pc, #176]	; (800240c <FSM_SystemControl+0x1080>)
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <FSM_SystemControl+0x106c>)
 8002360:	fba3 1302 	umull	r1, r3, r3, r2
 8002364:	0919      	lsrs	r1, r3, #4
 8002366:	460b      	mov	r3, r1
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b09      	cmp	r3, #9
 8002374:	d803      	bhi.n	800237e <FSM_SystemControl+0xff2>
			OUT_SetBuzzer(0);
 8002376:	2000      	movs	r0, #0
 8002378:	f001 f810 	bl	800339c <OUT_SetBuzzer>
 800237c:	e002      	b.n	8002384 <FSM_SystemControl+0xff8>
		}
		else {
			OUT_SetBuzzer(1);
 800237e:	2001      	movs	r0, #1
 8002380:	f001 f80c 	bl	800339c <OUT_SetBuzzer>
		}

		if(_time_out < 5 || IN_IsPressed(BT_MODE) || IN_IsPressed(BT_DEC) || IN_IsPressed(BT_INC)){
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <FSM_SystemControl+0x1070>)
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	2b04      	cmp	r3, #4
 800238a:	d911      	bls.n	80023b0 <FSM_SystemControl+0x1024>
 800238c:	2001      	movs	r0, #1
 800238e:	f000 f8ab 	bl	80024e8 <IN_IsPressed>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10b      	bne.n	80023b0 <FSM_SystemControl+0x1024>
 8002398:	2002      	movs	r0, #2
 800239a:	f000 f8a5 	bl	80024e8 <IN_IsPressed>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <FSM_SystemControl+0x1024>
 80023a4:	2000      	movs	r0, #0
 80023a6:	f000 f89f 	bl	80024e8 <IN_IsPressed>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01e      	beq.n	80023ee <FSM_SystemControl+0x1062>
			_time_screen = 50;
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <FSM_SystemControl+0x1078>)
 80023b2:	2232      	movs	r2, #50	; 0x32
 80023b4:	801a      	strh	r2, [r3, #0]
			mode_sys = INIT;
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <FSM_SystemControl+0x107c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
		}
		break;
 80023bc:	e017      	b.n	80023ee <FSM_SystemControl+0x1062>
		break;
 80023be:	bf00      	nop
 80023c0:	e016      	b.n	80023f0 <FSM_SystemControl+0x1064>
		break;
 80023c2:	bf00      	nop
 80023c4:	e014      	b.n	80023f0 <FSM_SystemControl+0x1064>
		break;
 80023c6:	bf00      	nop
 80023c8:	e012      	b.n	80023f0 <FSM_SystemControl+0x1064>
		break;
 80023ca:	bf00      	nop
 80023cc:	e010      	b.n	80023f0 <FSM_SystemControl+0x1064>
		break;
 80023ce:	bf00      	nop
 80023d0:	e00e      	b.n	80023f0 <FSM_SystemControl+0x1064>
		break;
 80023d2:	bf00      	nop
 80023d4:	e00c      	b.n	80023f0 <FSM_SystemControl+0x1064>
		break;
 80023d6:	bf00      	nop
 80023d8:	e00a      	b.n	80023f0 <FSM_SystemControl+0x1064>
		break;
 80023da:	bf00      	nop
 80023dc:	e008      	b.n	80023f0 <FSM_SystemControl+0x1064>
		break;
 80023de:	bf00      	nop
 80023e0:	e006      	b.n	80023f0 <FSM_SystemControl+0x1064>
		break;
 80023e2:	bf00      	nop
 80023e4:	e004      	b.n	80023f0 <FSM_SystemControl+0x1064>
		break;
 80023e6:	bf00      	nop
 80023e8:	e002      	b.n	80023f0 <FSM_SystemControl+0x1064>
		break;
 80023ea:	bf00      	nop
 80023ec:	e000      	b.n	80023f0 <FSM_SystemControl+0x1064>
		break;
 80023ee:	bf00      	nop
	}
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	08007e40 	.word	0x08007e40
 80023f8:	cccccccd 	.word	0xcccccccd
 80023fc:	2000012a 	.word	0x2000012a
 8002400:	20000110 	.word	0x20000110
 8002404:	20000126 	.word	0x20000126
 8002408:	2000010c 	.word	0x2000010c
 800240c:	20000124 	.word	0x20000124
 8002410:	08007dec 	.word	0x08007dec
 8002414:	08007e00 	.word	0x08007e00
 8002418:	08007d9c 	.word	0x08007d9c

0800241c <IN_Init>:

uint8_t Flag_for_button_press[NO_OF_BUTTONS];
uint16_t Counter_button_press[NO_OF_BUTTONS];


void IN_Init(void){
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <IN_ReadButton>:



//this function is called every 50ms
void IN_ReadButton(void){
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++){
 800242e:	2300      	movs	r3, #0
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	e039      	b.n	80024a8 <IN_ReadButton+0x80>
		if(HAL_GPIO_ReadPin(PORT_BUTTON[i], PIN_BUTTON[i]) == BUTTON_IS_PRESSED){
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	4a20      	ldr	r2, [pc, #128]	; (80024b8 <IN_ReadButton+0x90>)
 8002438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	491f      	ldr	r1, [pc, #124]	; (80024bc <IN_ReadButton+0x94>)
 8002440:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002444:	4619      	mov	r1, r3
 8002446:	4610      	mov	r0, r2
 8002448:	f001 fd60 	bl	8003f0c <HAL_GPIO_ReadPin>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10f      	bne.n	8002472 <IN_ReadButton+0x4a>
			if(Counter_button_press[i] < MAX_COUNTER){
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	4a1a      	ldr	r2, [pc, #104]	; (80024c0 <IN_ReadButton+0x98>)
 8002456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800245a:	2bc7      	cmp	r3, #199	; 0xc7
 800245c:	d821      	bhi.n	80024a2 <IN_ReadButton+0x7a>
				Counter_button_press[i]++;
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <IN_ReadButton+0x98>)
 8002462:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002466:	3201      	adds	r2, #1
 8002468:	b291      	uxth	r1, r2
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <IN_ReadButton+0x98>)
 800246c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002470:	e017      	b.n	80024a2 <IN_ReadButton+0x7a>
			}
		}
		else {
			Flag_for_button_press[i] = (Counter_button_press[i] > 0) && (Counter_button_press[i] < 10);
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <IN_ReadButton+0x98>)
 8002476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <IN_ReadButton+0x66>
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <IN_ReadButton+0x98>)
 8002482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002486:	2b09      	cmp	r3, #9
 8002488:	d801      	bhi.n	800248e <IN_ReadButton+0x66>
 800248a:	2201      	movs	r2, #1
 800248c:	e000      	b.n	8002490 <IN_ReadButton+0x68>
 800248e:	2200      	movs	r2, #0
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	b2d1      	uxtb	r1, r2
 8002494:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <IN_ReadButton+0x9c>)
 8002496:	54d1      	strb	r1, [r2, r3]
			Counter_button_press[i] = 0;
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <IN_ReadButton+0x98>)
 800249c:	2100      	movs	r1, #0
 800249e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i++){
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	3301      	adds	r3, #1
 80024a6:	71fb      	strb	r3, [r7, #7]
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d9c2      	bls.n	8002434 <IN_ReadButton+0xc>
		}
	}
}
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000000 	.word	0x20000000
 80024bc:	2000000c 	.word	0x2000000c
 80024c0:	20000130 	.word	0x20000130
 80024c4:	2000012c 	.word	0x2000012c

080024c8 <IN_Stick>:

uint16_t IN_Stick(uint8_t index){
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
	return Counter_button_press[index];
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	4a03      	ldr	r2, [pc, #12]	; (80024e4 <IN_Stick+0x1c>)
 80024d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	20000130 	.word	0x20000130

080024e8 <IN_IsPressed>:


uint8_t IN_IsPressed(uint8_t index){
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <IN_IsPressed+0x14>
 80024f8:	2300      	movs	r3, #0
 80024fa:	e002      	b.n	8002502 <IN_IsPressed+0x1a>

	return Flag_for_button_press[index];
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4a03      	ldr	r2, [pc, #12]	; (800250c <IN_IsPressed+0x24>)
 8002500:	5cd3      	ldrb	r3, [r2, r3]
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	2000012c 	.word	0x2000012c

08002510 <IN_IsPressed_ms>:

uint8_t IN_IsPressed_ms(uint8_t index, uint16_t duration){
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	460a      	mov	r2, r1
 800251a:	71fb      	strb	r3, [r7, #7]
 800251c:	4613      	mov	r3, r2
 800251e:	80bb      	strh	r3, [r7, #4]
	if(index >= NO_OF_BUTTONS) return 0;
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <IN_IsPressed_ms+0x1a>
 8002526:	2300      	movs	r3, #0
 8002528:	e00e      	b.n	8002548 <IN_IsPressed_ms+0x38>

	//button is read every 50ms -> counter += 1 every 50ms if button is held
	return Counter_button_press[index] >= (duration / 50);
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	4a09      	ldr	r2, [pc, #36]	; (8002554 <IN_IsPressed_ms+0x44>)
 800252e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002532:	88bb      	ldrh	r3, [r7, #4]
 8002534:	4908      	ldr	r1, [pc, #32]	; (8002558 <IN_IsPressed_ms+0x48>)
 8002536:	fba1 1303 	umull	r1, r3, r1, r3
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	b29b      	uxth	r3, r3
 800253e:	429a      	cmp	r2, r3
 8002540:	bf2c      	ite	cs
 8002542:	2301      	movcs	r3, #1
 8002544:	2300      	movcc	r3, #0
 8002546:	b2db      	uxtb	r3, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000130 	.word	0x20000130
 8002558:	51eb851f 	.word	0x51eb851f

0800255c <Delay>:

CLCD_I2C_Name LCD;

uint8_t currentCol, currentRow;

static void Delay(uint16_t time){
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	4618      	mov	r0, r3
 800256a:	f001 f997 	bl	800389c <HAL_Delay>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <WriteI2C>:
		0b10001,
		0b01110
};


static void WriteI2C(uint8_t data, uint8_t mode){
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af02      	add	r7, sp, #8
 800257e:	4603      	mov	r3, r0
 8002580:	460a      	mov	r2, r1
 8002582:	71fb      	strb	r3, [r7, #7]
 8002584:	4613      	mov	r3, r2
 8002586:	71bb      	strb	r3, [r7, #6]
	uint8_t dataH, dataL;
	uint8_t data_I2C[4];

	dataH = data & 0xF0;
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	f023 030f 	bic.w	r3, r3, #15
 800258e:	73fb      	strb	r3, [r7, #15]
	dataL = (data << 4) & 0xF0;
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	73bb      	strb	r3, [r7, #14]

	if(LCD.BACKLIGHT){
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <WriteI2C+0x90>)
 8002598:	7adb      	ldrb	r3, [r3, #11]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <WriteI2C+0x36>
		dataH |= LCD_BACKLIGHT;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_BACKLIGHT;
 80025a6:	7bbb      	ldrb	r3, [r7, #14]
 80025a8:	f043 0308 	orr.w	r3, r3, #8
 80025ac:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA){
 80025ae:	79bb      	ldrb	r3, [r7, #6]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d107      	bne.n	80025c4 <WriteI2C+0x4c>
		dataH |= LCD_RS;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
		dataL |= LCD_RS;
 80025bc:	7bbb      	ldrb	r3, [r7, #14]
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	73bb      	strb	r3, [r7, #14]
	}

	data_I2C[0] = dataH | LCD_EN;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	723b      	strb	r3, [r7, #8]
	data_I2C[1] = dataH;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	727b      	strb	r3, [r7, #9]
	data_I2C[2] = dataL | LCD_EN;
 80025d2:	7bbb      	ldrb	r3, [r7, #14]
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	72bb      	strb	r3, [r7, #10]
	data_I2C[3] = dataL;
 80025dc:	7bbb      	ldrb	r3, [r7, #14]
 80025de:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(LCD.I2C, LCD.ADDRESS << 1, (uint8_t*)data_I2C, 4, 1000);
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <WriteI2C+0x90>)
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <WriteI2C+0x90>)
 80025e6:	791b      	ldrb	r3, [r3, #4]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	b299      	uxth	r1, r3
 80025ee:	f107 0208 	add.w	r2, r7, #8
 80025f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2304      	movs	r3, #4
 80025fa:	f001 fdfb 	bl	80041f4 <HAL_I2C_Master_Transmit>
}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2000013c 	.word	0x2000013c

0800260c <CLCD_Init>:



//===========================HIGH LEVEL FUNCTION===========================//
void CLCD_Init(I2C_HandleTypeDef* I2C, uint8_t address, uint8_t row, uint8_t col){
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4603      	mov	r3, r0
 800261c:	70fb      	strb	r3, [r7, #3]
 800261e:	460b      	mov	r3, r1
 8002620:	70bb      	strb	r3, [r7, #2]
 8002622:	4613      	mov	r3, r2
 8002624:	707b      	strb	r3, [r7, #1]
	uint8_t i;
	LCD.I2C = I2C;
 8002626:	4a4a      	ldr	r2, [pc, #296]	; (8002750 <CLCD_Init+0x144>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6013      	str	r3, [r2, #0]
	LCD.ADDRESS = address;
 800262c:	4a48      	ldr	r2, [pc, #288]	; (8002750 <CLCD_Init+0x144>)
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	7113      	strb	r3, [r2, #4]
	LCD.COL = col;
 8002632:	4a47      	ldr	r2, [pc, #284]	; (8002750 <CLCD_Init+0x144>)
 8002634:	787b      	ldrb	r3, [r7, #1]
 8002636:	7153      	strb	r3, [r2, #5]
	LCD.ROW = row;
 8002638:	4a45      	ldr	r2, [pc, #276]	; (8002750 <CLCD_Init+0x144>)
 800263a:	78bb      	ldrb	r3, [r7, #2]
 800263c:	7193      	strb	r3, [r2, #6]

	LCD.FUNCTIONSET = LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 800263e:	4b44      	ldr	r3, [pc, #272]	; (8002750 <CLCD_Init+0x144>)
 8002640:	2228      	movs	r2, #40	; 0x28
 8002642:	721a      	strb	r2, [r3, #8]
	LCD.ENTRYMODE = LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002644:	4b42      	ldr	r3, [pc, #264]	; (8002750 <CLCD_Init+0x144>)
 8002646:	2206      	movs	r2, #6
 8002648:	71da      	strb	r2, [r3, #7]
	LCD.DISPLAYCTRL = LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <CLCD_Init+0x144>)
 800264c:	220c      	movs	r2, #12
 800264e:	725a      	strb	r2, [r3, #9]
	LCD.CURSORSHIFT = LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT;
 8002650:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <CLCD_Init+0x144>)
 8002652:	2214      	movs	r2, #20
 8002654:	729a      	strb	r2, [r3, #10]
	LCD.BACKLIGHT = LCD_BACKLIGHT;
 8002656:	4b3e      	ldr	r3, [pc, #248]	; (8002750 <CLCD_Init+0x144>)
 8002658:	2208      	movs	r2, #8
 800265a:	72da      	strb	r2, [r3, #11]

	Delay(50);
 800265c:	2032      	movs	r0, #50	; 0x32
 800265e:	f7ff ff7d 	bl	800255c <Delay>

	if(Lcd_buffer != NULL) free(Lcd_buffer);
 8002662:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <CLCD_Init+0x148>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d004      	beq.n	8002674 <CLCD_Init+0x68>
 800266a:	4b3a      	ldr	r3, [pc, #232]	; (8002754 <CLCD_Init+0x148>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f005 fa60 	bl	8007b34 <free>
	Lcd_buffer = (uint8_t*)malloc(row * col * 8);
 8002674:	78bb      	ldrb	r3, [r7, #2]
 8002676:	787a      	ldrb	r2, [r7, #1]
 8002678:	fb02 f303 	mul.w	r3, r2, r3
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4618      	mov	r0, r3
 8002680:	f005 fa50 	bl	8007b24 <malloc>
 8002684:	4603      	mov	r3, r0
 8002686:	461a      	mov	r2, r3
 8002688:	4b32      	ldr	r3, [pc, #200]	; (8002754 <CLCD_Init+0x148>)
 800268a:	601a      	str	r2, [r3, #0]

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e008      	b.n	80026a4 <CLCD_Init+0x98>
 8002692:	4b30      	ldr	r3, [pc, #192]	; (8002754 <CLCD_Init+0x148>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	4413      	add	r3, r2
 800269a:	2220      	movs	r2, #32
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	3301      	adds	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <CLCD_Init+0x144>)
 80026a8:	799b      	ldrb	r3, [r3, #6]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4b28      	ldr	r3, [pc, #160]	; (8002750 <CLCD_Init+0x144>)
 80026ae:	795b      	ldrb	r3, [r3, #5]
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	429a      	cmp	r2, r3
 80026b6:	dbec      	blt.n	8002692 <CLCD_Init+0x86>

	WriteI2C(0x33, LCD_COMMAND);
 80026b8:	2100      	movs	r1, #0
 80026ba:	2033      	movs	r0, #51	; 0x33
 80026bc:	f7ff ff5c 	bl	8002578 <WriteI2C>
//	Delay(5);
	WriteI2C(0x33, LCD_COMMAND);
 80026c0:	2100      	movs	r1, #0
 80026c2:	2033      	movs	r0, #51	; 0x33
 80026c4:	f7ff ff58 	bl	8002578 <WriteI2C>
	Delay(5);
 80026c8:	2005      	movs	r0, #5
 80026ca:	f7ff ff47 	bl	800255c <Delay>
	WriteI2C(0x32, LCD_COMMAND);
 80026ce:	2100      	movs	r1, #0
 80026d0:	2032      	movs	r0, #50	; 0x32
 80026d2:	f7ff ff51 	bl	8002578 <WriteI2C>
	Delay(5);
 80026d6:	2005      	movs	r0, #5
 80026d8:	f7ff ff40 	bl	800255c <Delay>
	WriteI2C(0x20, LCD_COMMAND);
 80026dc:	2100      	movs	r1, #0
 80026de:	2020      	movs	r0, #32
 80026e0:	f7ff ff4a 	bl	8002578 <WriteI2C>
	Delay(5);
 80026e4:	2005      	movs	r0, #5
 80026e6:	f7ff ff39 	bl	800255c <Delay>

//	config lcd
	WriteI2C(LCD.ENTRYMODE, LCD_COMMAND);
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <CLCD_Init+0x144>)
 80026ec:	79db      	ldrb	r3, [r3, #7]
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff41 	bl	8002578 <WriteI2C>
	Delay(1);
 80026f6:	2001      	movs	r0, #1
 80026f8:	f7ff ff30 	bl	800255c <Delay>
	WriteI2C(LCD.DISPLAYCTRL, LCD_COMMAND);
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <CLCD_Init+0x144>)
 80026fe:	7a5b      	ldrb	r3, [r3, #9]
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ff38 	bl	8002578 <WriteI2C>
	Delay(1);
 8002708:	2001      	movs	r0, #1
 800270a:	f7ff ff27 	bl	800255c <Delay>
	WriteI2C(LCD.CURSORSHIFT, LCD_COMMAND);
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <CLCD_Init+0x144>)
 8002710:	7a9b      	ldrb	r3, [r3, #10]
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff2f 	bl	8002578 <WriteI2C>
	Delay(1);
 800271a:	2001      	movs	r0, #1
 800271c:	f7ff ff1e 	bl	800255c <Delay>
	WriteI2C(LCD.FUNCTIONSET, LCD_COMMAND);
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <CLCD_Init+0x144>)
 8002722:	7a1b      	ldrb	r3, [r3, #8]
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ff26 	bl	8002578 <WriteI2C>
	Delay(1);
 800272c:	2001      	movs	r0, #1
 800272e:	f7ff ff15 	bl	800255c <Delay>

	WriteI2C(LCD_CLEARDISPLAY, LCD_COMMAND);
 8002732:	2100      	movs	r1, #0
 8002734:	2001      	movs	r0, #1
 8002736:	f7ff ff1f 	bl	8002578 <WriteI2C>
	Delay(1);
 800273a:	2001      	movs	r0, #1
 800273c:	f7ff ff0e 	bl	800255c <Delay>

	WriteI2C(LCD_RETURNHOME, LCD_COMMAND);
 8002740:	2100      	movs	r1, #0
 8002742:	2002      	movs	r0, #2
 8002744:	f7ff ff18 	bl	8002578 <WriteI2C>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	2000013c 	.word	0x2000013c
 8002754:	20000138 	.word	0x20000138

08002758 <SetCursor>:


void SetCursor(uint8_t row, uint8_t col){
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	460a      	mov	r2, r1
 8002762:	71fb      	strb	r3, [r7, #7]
 8002764:	4613      	mov	r3, r2
 8002766:	71bb      	strb	r3, [r7, #6]
	uint8_t address_dram = 0x00;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]

	row = row % LCD.ROW;
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <SetCursor+0x8c>)
 800276e:	799a      	ldrb	r2, [r3, #6]
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	fbb3 f1f2 	udiv	r1, r3, r2
 8002776:	fb01 f202 	mul.w	r2, r1, r2
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	71fb      	strb	r3, [r7, #7]
	col = col % LCD.COL;
 800277e:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <SetCursor+0x8c>)
 8002780:	795a      	ldrb	r2, [r3, #5]
 8002782:	79bb      	ldrb	r3, [r7, #6]
 8002784:	fbb3 f1f2 	udiv	r1, r3, r2
 8002788:	fb01 f202 	mul.w	r2, r1, r2
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	71bb      	strb	r3, [r7, #6]

	switch(row){
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d819      	bhi.n	80027ca <SetCursor+0x72>
 8002796:	a201      	add	r2, pc, #4	; (adr r2, 800279c <SetCursor+0x44>)
 8002798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279c:	080027ad 	.word	0x080027ad
 80027a0:	080027b3 	.word	0x080027b3
 80027a4:	080027bb 	.word	0x080027bb
 80027a8:	080027c3 	.word	0x080027c3
	case 0:
		address_dram = 0x00 + col;
 80027ac:	79bb      	ldrb	r3, [r7, #6]
 80027ae:	73fb      	strb	r3, [r7, #15]
		break;
 80027b0:	e00b      	b.n	80027ca <SetCursor+0x72>
	case 1:
		address_dram = 0x40 + col;
 80027b2:	79bb      	ldrb	r3, [r7, #6]
 80027b4:	3340      	adds	r3, #64	; 0x40
 80027b6:	73fb      	strb	r3, [r7, #15]
		break;
 80027b8:	e007      	b.n	80027ca <SetCursor+0x72>
	case 2:
		address_dram = 0x14 + col;
 80027ba:	79bb      	ldrb	r3, [r7, #6]
 80027bc:	3314      	adds	r3, #20
 80027be:	73fb      	strb	r3, [r7, #15]
		break;
 80027c0:	e003      	b.n	80027ca <SetCursor+0x72>
	case 3:
		address_dram = 0x54 + col;
 80027c2:	79bb      	ldrb	r3, [r7, #6]
 80027c4:	3354      	adds	r3, #84	; 0x54
 80027c6:	73fb      	strb	r3, [r7, #15]
		break;
 80027c8:	bf00      	nop
	}

	WriteI2C(LCD_SETDDRAMADDR | address_dram, LCD_COMMAND);
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fecf 	bl	8002578 <WriteI2C>
}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	2000013c 	.word	0x2000013c

080027e8 <UpdateCharBuffer>:

void UpdateCharBuffer(uint8_t c){
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <UpdateCharBuffer+0x40>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a0d      	ldr	r2, [pc, #52]	; (800282c <UpdateCharBuffer+0x44>)
 80027f8:	7812      	ldrb	r2, [r2, #0]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <UpdateCharBuffer+0x48>)
 80027fe:	7952      	ldrb	r2, [r2, #5]
 8002800:	fb01 f202 	mul.w	r2, r1, r2
 8002804:	490b      	ldr	r1, [pc, #44]	; (8002834 <UpdateCharBuffer+0x4c>)
 8002806:	7809      	ldrb	r1, [r1, #0]
 8002808:	440a      	add	r2, r1
 800280a:	4413      	add	r3, r2
 800280c:	79fa      	ldrb	r2, [r7, #7]
 800280e:	701a      	strb	r2, [r3, #0]
	currentCol++;
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <UpdateCharBuffer+0x4c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <UpdateCharBuffer+0x4c>)
 800281a:	701a      	strb	r2, [r3, #0]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000138 	.word	0x20000138
 800282c:	20000149 	.word	0x20000149
 8002830:	2000013c 	.word	0x2000013c
 8002834:	20000148 	.word	0x20000148

08002838 <CLCD_PrintCharBuffer>:

void CLCD_PrintCharBuffer(uint8_t row, uint8_t col, char c){
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
 8002842:	460b      	mov	r3, r1
 8002844:	71bb      	strb	r3, [r7, #6]
 8002846:	4613      	mov	r3, r2
 8002848:	717b      	strb	r3, [r7, #5]
	currentRow = row % LCD.ROW;
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <CLCD_PrintCharBuffer+0x68>)
 800284c:	799a      	ldrb	r2, [r3, #6]
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	fbb3 f1f2 	udiv	r1, r3, r2
 8002854:	fb01 f202 	mul.w	r2, r1, r2
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <CLCD_PrintCharBuffer+0x6c>)
 800285e:	701a      	strb	r2, [r3, #0]
	currentCol = col % LCD.COL;
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <CLCD_PrintCharBuffer+0x68>)
 8002862:	795a      	ldrb	r2, [r3, #5]
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	fbb3 f1f2 	udiv	r1, r3, r2
 800286a:	fb01 f202 	mul.w	r2, r1, r2
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <CLCD_PrintCharBuffer+0x70>)
 8002874:	701a      	strb	r2, [r3, #0]
	Lcd_buffer[currentRow * LCD.COL + currentCol] = c;
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <CLCD_PrintCharBuffer+0x74>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <CLCD_PrintCharBuffer+0x6c>)
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	4611      	mov	r1, r2
 8002880:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <CLCD_PrintCharBuffer+0x68>)
 8002882:	7952      	ldrb	r2, [r2, #5]
 8002884:	fb01 f202 	mul.w	r2, r1, r2
 8002888:	4907      	ldr	r1, [pc, #28]	; (80028a8 <CLCD_PrintCharBuffer+0x70>)
 800288a:	7809      	ldrb	r1, [r1, #0]
 800288c:	440a      	add	r2, r1
 800288e:	4413      	add	r3, r2
 8002890:	797a      	ldrb	r2, [r7, #5]
 8002892:	701a      	strb	r2, [r3, #0]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	2000013c 	.word	0x2000013c
 80028a4:	20000149 	.word	0x20000149
 80028a8:	20000148 	.word	0x20000148
 80028ac:	20000138 	.word	0x20000138

080028b0 <CLCD_PrintStringBuffer>:

void CLCD_PrintStringBuffer(uint8_t row, uint8_t col, char* str){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	603a      	str	r2, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
 80028bc:	460b      	mov	r3, r1
 80028be:	71bb      	strb	r3, [r7, #6]
	currentRow = row % LCD.ROW;
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <CLCD_PrintStringBuffer+0x60>)
 80028c2:	799a      	ldrb	r2, [r3, #6]
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80028ca:	fb01 f202 	mul.w	r2, r1, r2
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <CLCD_PrintStringBuffer+0x64>)
 80028d4:	701a      	strb	r2, [r3, #0]
	currentCol = col % LCD.COL;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <CLCD_PrintStringBuffer+0x60>)
 80028d8:	795a      	ldrb	r2, [r3, #5]
 80028da:	79bb      	ldrb	r3, [r7, #6]
 80028dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80028e0:	fb01 f202 	mul.w	r2, r1, r2
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <CLCD_PrintStringBuffer+0x68>)
 80028ea:	701a      	strb	r2, [r3, #0]
	while(*str){
 80028ec:	e006      	b.n	80028fc <CLCD_PrintStringBuffer+0x4c>
		UpdateCharBuffer(*str++);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	603a      	str	r2, [r7, #0]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff76 	bl	80027e8 <UpdateCharBuffer>
	while(*str){
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f4      	bne.n	80028ee <CLCD_PrintStringBuffer+0x3e>
	}
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	2000013c 	.word	0x2000013c
 8002914:	20000149 	.word	0x20000149
 8002918:	20000148 	.word	0x20000148

0800291c <CLCD_PrintNumBuffer>:

void CLCD_PrintNumBuffer(uint8_t row, uint8_t col, int32_t num){
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	603a      	str	r2, [r7, #0]
 8002926:	71fb      	strb	r3, [r7, #7]
 8002928:	460b      	mov	r3, r1
 800292a:	71bb      	strb	r3, [r7, #6]
    char flag_num = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
    unsigned char i;
    unsigned long power_of_10 = 1000000000;
 8002930:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <CLCD_PrintNumBuffer+0xc8>)
 8002932:	60bb      	str	r3, [r7, #8]
    currentRow = row % 2;
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <CLCD_PrintNumBuffer+0xcc>)
 800293e:	701a      	strb	r2, [r3, #0]
    currentCol = col % 16;
 8002940:	79bb      	ldrb	r3, [r7, #6]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b28      	ldr	r3, [pc, #160]	; (80029ec <CLCD_PrintNumBuffer+0xd0>)
 800294a:	701a      	strb	r2, [r3, #0]

    if(num < 0) {
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	da06      	bge.n	8002960 <CLCD_PrintNumBuffer+0x44>
        num *= -1;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	425b      	negs	r3, r3
 8002956:	603b      	str	r3, [r7, #0]
        UpdateCharBuffer('-');
 8002958:	202d      	movs	r0, #45	; 0x2d
 800295a:	f7ff ff45 	bl	80027e8 <UpdateCharBuffer>
 800295e:	e00f      	b.n	8002980 <CLCD_PrintNumBuffer+0x64>
    }
    else if(num == 0){
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <CLCD_PrintNumBuffer+0x58>
    	UpdateCharBuffer('0');
 8002966:	2030      	movs	r0, #48	; 0x30
 8002968:	f7ff ff3e 	bl	80027e8 <UpdateCharBuffer>
    	UpdateCharBuffer('0');
 800296c:	2030      	movs	r0, #48	; 0x30
 800296e:	f7ff ff3b 	bl	80027e8 <UpdateCharBuffer>
//        UpdateCharBuffer(' ');
//        UpdateCharBuffer(' ');
        return;
 8002972:	e034      	b.n	80029de <CLCD_PrintNumBuffer+0xc2>
    }

    else if(num < 10){
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b09      	cmp	r3, #9
 8002978:	dc02      	bgt.n	8002980 <CLCD_PrintNumBuffer+0x64>
        UpdateCharBuffer('0');
 800297a:	2030      	movs	r0, #48	; 0x30
 800297c:	f7ff ff34 	bl	80027e8 <UpdateCharBuffer>
    }

    for(i = 10; i > 0; i--){
 8002980:	230a      	movs	r3, #10
 8002982:	73bb      	strb	r3, [r7, #14]
 8002984:	e028      	b.n	80029d8 <CLCD_PrintNumBuffer+0xbc>
        if( (num / power_of_10) != 0){
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	d80c      	bhi.n	80029a8 <CLCD_PrintNumBuffer+0x8c>
            flag_num = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
            UpdateCharBuffer(num / power_of_10 + '0');
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	fbb2 f3f3 	udiv	r3, r2, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	3330      	adds	r3, #48	; 0x30
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff21 	bl	80027e8 <UpdateCharBuffer>
 80029a6:	e005      	b.n	80029b4 <CLCD_PrintNumBuffer+0x98>
        }
        else{
            if(flag_num != 0) UpdateCharBuffer('0');
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <CLCD_PrintNumBuffer+0x98>
 80029ae:	2030      	movs	r0, #48	; 0x30
 80029b0:	f7ff ff1a 	bl	80027e8 <UpdateCharBuffer>
        }
        num %= power_of_10;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	fb01 f202 	mul.w	r2, r1, r2
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	603b      	str	r3, [r7, #0]
        power_of_10 /= 10;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4a09      	ldr	r2, [pc, #36]	; (80029f0 <CLCD_PrintNumBuffer+0xd4>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	08db      	lsrs	r3, r3, #3
 80029d0:	60bb      	str	r3, [r7, #8]
    for(i = 10; i > 0; i--){
 80029d2:	7bbb      	ldrb	r3, [r7, #14]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	73bb      	strb	r3, [r7, #14]
 80029d8:	7bbb      	ldrb	r3, [r7, #14]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1d3      	bne.n	8002986 <CLCD_PrintNumBuffer+0x6a>
    }

//    UpdateCharBuffer(' ');
//    UpdateCharBuffer(' ');
}
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	3b9aca00 	.word	0x3b9aca00
 80029e8:	20000149 	.word	0x20000149
 80029ec:	20000148 	.word	0x20000148
 80029f0:	cccccccd 	.word	0xcccccccd

080029f4 <CLCD_PrintFloatBuffer>:


void CLCD_PrintFloatBuffer(uint8_t row, uint8_t col, float f){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	603a      	str	r2, [r7, #0]
 80029fe:	71fb      	strb	r3, [r7, #7]
 8002a00:	460b      	mov	r3, r1
 8002a02:	71bb      	strb	r3, [r7, #6]
	uint8_t integer_part, decimal_part;
    currentRow = row % 2;
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <CLCD_PrintFloatBuffer+0x100>)
 8002a0e:	701a      	strb	r2, [r3, #0]
    currentCol = col % 16;
 8002a10:	79bb      	ldrb	r3, [r7, #6]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <CLCD_PrintFloatBuffer+0x104>)
 8002a1a:	701a      	strb	r2, [r3, #0]

    integer_part = (uint8_t) f;
 8002a1c:	6838      	ldr	r0, [r7, #0]
 8002a1e:	f7fe f975 	bl	8000d0c <__aeabi_f2uiz>
 8002a22:	4603      	mov	r3, r0
 8002a24:	73fb      	strb	r3, [r7, #15]
    decimal_part = (uint8_t) ((f - integer_part)*10);
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe f91b 	bl	8000c64 <__aeabi_i2f>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4619      	mov	r1, r3
 8002a32:	6838      	ldr	r0, [r7, #0]
 8002a34:	f7fe f860 	bl	8000af8 <__aeabi_fsub>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4930      	ldr	r1, [pc, #192]	; (8002afc <CLCD_PrintFloatBuffer+0x108>)
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fb85 	bl	800014c <__aeabi_fmul>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe f961 	bl	8000d0c <__aeabi_f2uiz>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73bb      	strb	r3, [r7, #14]

    if(integer_part > 99){
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b63      	cmp	r3, #99	; 0x63
 8002a52:	d90a      	bls.n	8002a6a <CLCD_PrintFloatBuffer+0x76>
    	UpdateCharBuffer(integer_part / 100 + '0');
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	4a2a      	ldr	r2, [pc, #168]	; (8002b00 <CLCD_PrintFloatBuffer+0x10c>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	3330      	adds	r3, #48	; 0x30
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff febf 	bl	80027e8 <UpdateCharBuffer>
    }


    UpdateCharBuffer((integer_part % 100) / 10 + '0');
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <CLCD_PrintFloatBuffer+0x10c>)
 8002a6e:	fba2 1203 	umull	r1, r2, r2, r3
 8002a72:	0952      	lsrs	r2, r2, #5
 8002a74:	2164      	movs	r1, #100	; 0x64
 8002a76:	fb01 f202 	mul.w	r2, r1, r2
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	4a21      	ldr	r2, [pc, #132]	; (8002b04 <CLCD_PrintFloatBuffer+0x110>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	08db      	lsrs	r3, r3, #3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	3330      	adds	r3, #48	; 0x30
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff feab 	bl	80027e8 <UpdateCharBuffer>
    UpdateCharBuffer((integer_part % 100) % 10 + '0');
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <CLCD_PrintFloatBuffer+0x10c>)
 8002a96:	fba2 1203 	umull	r1, r2, r2, r3
 8002a9a:	0952      	lsrs	r2, r2, #5
 8002a9c:	2164      	movs	r1, #100	; 0x64
 8002a9e:	fb01 f202 	mul.w	r2, r1, r2
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <CLCD_PrintFloatBuffer+0x110>)
 8002aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8002aac:	08d9      	lsrs	r1, r3, #3
 8002aae:	460b      	mov	r3, r1
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3330      	adds	r3, #48	; 0x30
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fe92 	bl	80027e8 <UpdateCharBuffer>

    UpdateCharBuffer('.');
 8002ac4:	202e      	movs	r0, #46	; 0x2e
 8002ac6:	f7ff fe8f 	bl	80027e8 <UpdateCharBuffer>
    UpdateCharBuffer(decimal_part % 10 + '0');
 8002aca:	7bba      	ldrb	r2, [r7, #14]
 8002acc:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <CLCD_PrintFloatBuffer+0x110>)
 8002ace:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad2:	08d9      	lsrs	r1, r3, #3
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3330      	adds	r3, #48	; 0x30
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fe7f 	bl	80027e8 <UpdateCharBuffer>
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000149 	.word	0x20000149
 8002af8:	20000148 	.word	0x20000148
 8002afc:	41200000 	.word	0x41200000
 8002b00:	51eb851f 	.word	0x51eb851f
 8002b04:	cccccccd 	.word	0xcccccccd

08002b08 <CLCD_DisplayScreen>:
	uint8_t i;

	for(i = 0; i < LCD.ROW * LCD.COL; i++) Lcd_buffer[i] = ' ';
}

void CLCD_DisplayScreen(void){
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for(i = 0; i < LCD.ROW; i++){
 8002b0e:	2300      	movs	r3, #0
 8002b10:	71fb      	strb	r3, [r7, #7]
 8002b12:	e021      	b.n	8002b58 <CLCD_DisplayScreen+0x50>
		SetCursor(i, 0);
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fe1d 	bl	8002758 <SetCursor>
		for(j = 0; j < LCD.COL; j++){
 8002b1e:	2300      	movs	r3, #0
 8002b20:	71bb      	strb	r3, [r7, #6]
 8002b22:	e011      	b.n	8002b48 <CLCD_DisplayScreen+0x40>
			WriteI2C(Lcd_buffer[i * LCD.COL + j], LCD_DATA);
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <CLCD_DisplayScreen+0x64>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	79fa      	ldrb	r2, [r7, #7]
 8002b2a:	4911      	ldr	r1, [pc, #68]	; (8002b70 <CLCD_DisplayScreen+0x68>)
 8002b2c:	7949      	ldrb	r1, [r1, #5]
 8002b2e:	fb02 f101 	mul.w	r1, r2, r1
 8002b32:	79ba      	ldrb	r2, [r7, #6]
 8002b34:	440a      	add	r2, r1
 8002b36:	4413      	add	r3, r2
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fd1b 	bl	8002578 <WriteI2C>
		for(j = 0; j < LCD.COL; j++){
 8002b42:	79bb      	ldrb	r3, [r7, #6]
 8002b44:	3301      	adds	r3, #1
 8002b46:	71bb      	strb	r3, [r7, #6]
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <CLCD_DisplayScreen+0x68>)
 8002b4a:	795b      	ldrb	r3, [r3, #5]
 8002b4c:	79ba      	ldrb	r2, [r7, #6]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d3e8      	bcc.n	8002b24 <CLCD_DisplayScreen+0x1c>
	for(i = 0; i < LCD.ROW; i++){
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	3301      	adds	r3, #1
 8002b56:	71fb      	strb	r3, [r7, #7]
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <CLCD_DisplayScreen+0x68>)
 8002b5a:	799b      	ldrb	r3, [r3, #6]
 8002b5c:	79fa      	ldrb	r2, [r7, #7]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d3d8      	bcc.n	8002b14 <CLCD_DisplayScreen+0xc>
		}
	}
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000138 	.word	0x20000138
 8002b70:	2000013c 	.word	0x2000013c

08002b74 <CLCD_CreateChar>:

//=============CUSTOM CHAR=============//
void CLCD_CreateChar(uint8_t addr, uint8_t* custom_arr){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	WriteI2C(LCD_SETCGRAMADDR + 8*addr, LCD_COMMAND);
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	3308      	adds	r3, #8
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fcf3 	bl	8002578 <WriteI2C>

	for(i = 0; i < 8; i++){
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	e00a      	b.n	8002bae <CLCD_CreateChar+0x3a>
		WriteI2C(custom_arr[i], LCD_DATA);
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fce8 	bl	8002578 <WriteI2C>
	for(i = 0; i < 8; i++){
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	3301      	adds	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	d9f1      	bls.n	8002b98 <CLCD_CreateChar+0x24>
	}
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <CLCD_InitBigDigit>:

void CLCD_InitBigDigit(void){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
	CLCD_CreateChar(0, LT);
 8002bc4:	490e      	ldr	r1, [pc, #56]	; (8002c00 <CLCD_InitBigDigit+0x40>)
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f7ff ffd4 	bl	8002b74 <CLCD_CreateChar>
	CLCD_CreateChar(1, UB);
 8002bcc:	490d      	ldr	r1, [pc, #52]	; (8002c04 <CLCD_InitBigDigit+0x44>)
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f7ff ffd0 	bl	8002b74 <CLCD_CreateChar>
	CLCD_CreateChar(2, RT);
 8002bd4:	490c      	ldr	r1, [pc, #48]	; (8002c08 <CLCD_InitBigDigit+0x48>)
 8002bd6:	2002      	movs	r0, #2
 8002bd8:	f7ff ffcc 	bl	8002b74 <CLCD_CreateChar>
	CLCD_CreateChar(3, LL);
 8002bdc:	490b      	ldr	r1, [pc, #44]	; (8002c0c <CLCD_InitBigDigit+0x4c>)
 8002bde:	2003      	movs	r0, #3
 8002be0:	f7ff ffc8 	bl	8002b74 <CLCD_CreateChar>
	CLCD_CreateChar(4, LB);
 8002be4:	490a      	ldr	r1, [pc, #40]	; (8002c10 <CLCD_InitBigDigit+0x50>)
 8002be6:	2004      	movs	r0, #4
 8002be8:	f7ff ffc4 	bl	8002b74 <CLCD_CreateChar>
	CLCD_CreateChar(5, LR);
 8002bec:	4909      	ldr	r1, [pc, #36]	; (8002c14 <CLCD_InitBigDigit+0x54>)
 8002bee:	2005      	movs	r0, #5
 8002bf0:	f7ff ffc0 	bl	8002b74 <CLCD_CreateChar>
	CLCD_CreateChar(6, MB);
 8002bf4:	4908      	ldr	r1, [pc, #32]	; (8002c18 <CLCD_InitBigDigit+0x58>)
 8002bf6:	2006      	movs	r0, #6
 8002bf8:	f7ff ffbc 	bl	8002b74 <CLCD_CreateChar>
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000014 	.word	0x20000014
 8002c04:	2000001c 	.word	0x2000001c
 8002c08:	20000024 	.word	0x20000024
 8002c0c:	2000002c 	.word	0x2000002c
 8002c10:	20000034 	.word	0x20000034
 8002c14:	2000003c 	.word	0x2000003c
 8002c18:	20000044 	.word	0x20000044

08002c1c <CLCD_PrintBigDigitBuffer>:

void CLCD_PrintBigDigitBuffer(uint8_t col, int8_t digit){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	460a      	mov	r2, r1
 8002c26:	71fb      	strb	r3, [r7, #7]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	71bb      	strb	r3, [r7, #6]
	currentRow = 0;
 8002c2c:	4bae      	ldr	r3, [pc, #696]	; (8002ee8 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
	currentCol = col % 16;
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	4bac      	ldr	r3, [pc, #688]	; (8002eec <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002c3c:	701a      	strb	r2, [r3, #0]

	switch(digit){
 8002c3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	f200 8130 	bhi.w	8002ea8 <CLCD_PrintBigDigitBuffer+0x28c>
 8002c48:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <CLCD_PrintBigDigitBuffer+0x34>)
 8002c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4e:	bf00      	nop
 8002c50:	08002c79 	.word	0x08002c79
 8002c54:	08002cb1 	.word	0x08002cb1
 8002c58:	08002ce9 	.word	0x08002ce9
 8002c5c:	08002d21 	.word	0x08002d21
 8002c60:	08002d59 	.word	0x08002d59
 8002c64:	08002d91 	.word	0x08002d91
 8002c68:	08002dc9 	.word	0x08002dc9
 8002c6c:	08002e01 	.word	0x08002e01
 8002c70:	08002e39 	.word	0x08002e39
 8002c74:	08002e71 	.word	0x08002e71
	case 0:
		UpdateCharBuffer(0);
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7ff fdb5 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(1);
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f7ff fdb2 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8002c84:	2002      	movs	r0, #2
 8002c86:	f7ff fdaf 	bl	80027e8 <UpdateCharBuffer>

		currentRow = 1;
 8002c8a:	4b97      	ldr	r3, [pc, #604]	; (8002ee8 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b94      	ldr	r3, [pc, #592]	; (8002eec <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002c9a:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(3);
 8002c9c:	2003      	movs	r0, #3
 8002c9e:	f7ff fda3 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8002ca2:	2004      	movs	r0, #4
 8002ca4:	f7ff fda0 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 8002ca8:	2005      	movs	r0, #5
 8002caa:	f7ff fd9d 	bl	80027e8 <UpdateCharBuffer>
		break;
 8002cae:	e117      	b.n	8002ee0 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 1:
		UpdateCharBuffer(1);
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7ff fd99 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8002cb6:	2002      	movs	r0, #2
 8002cb8:	f7ff fd96 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 8002cbc:	2020      	movs	r0, #32
 8002cbe:	f7ff fd93 	bl	80027e8 <UpdateCharBuffer>

		currentRow = 1;
 8002cc2:	4b89      	ldr	r3, [pc, #548]	; (8002ee8 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	4b86      	ldr	r3, [pc, #536]	; (8002eec <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002cd2:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(4);
 8002cd4:	2004      	movs	r0, #4
 8002cd6:	f7ff fd87 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(0xFF);
 8002cda:	20ff      	movs	r0, #255	; 0xff
 8002cdc:	f7ff fd84 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8002ce0:	2004      	movs	r0, #4
 8002ce2:	f7ff fd81 	bl	80027e8 <UpdateCharBuffer>
		break;
 8002ce6:	e0fb      	b.n	8002ee0 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 2:
		UpdateCharBuffer(6);
 8002ce8:	2006      	movs	r0, #6
 8002cea:	f7ff fd7d 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8002cee:	2006      	movs	r0, #6
 8002cf0:	f7ff fd7a 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8002cf4:	2002      	movs	r0, #2
 8002cf6:	f7ff fd77 	bl	80027e8 <UpdateCharBuffer>

		currentRow = 1;
 8002cfa:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	4b78      	ldr	r3, [pc, #480]	; (8002eec <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002d0a:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(3);
 8002d0c:	2003      	movs	r0, #3
 8002d0e:	f7ff fd6b 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8002d12:	2004      	movs	r0, #4
 8002d14:	f7ff fd68 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8002d18:	2004      	movs	r0, #4
 8002d1a:	f7ff fd65 	bl	80027e8 <UpdateCharBuffer>
		break;
 8002d1e:	e0df      	b.n	8002ee0 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 3:
		UpdateCharBuffer(6);
 8002d20:	2006      	movs	r0, #6
 8002d22:	f7ff fd61 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8002d26:	2006      	movs	r0, #6
 8002d28:	f7ff fd5e 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8002d2c:	2002      	movs	r0, #2
 8002d2e:	f7ff fd5b 	bl	80027e8 <UpdateCharBuffer>

		currentRow = 1;
 8002d32:	4b6d      	ldr	r3, [pc, #436]	; (8002ee8 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	4b6a      	ldr	r3, [pc, #424]	; (8002eec <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002d42:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(4);
 8002d44:	2004      	movs	r0, #4
 8002d46:	f7ff fd4f 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8002d4a:	2004      	movs	r0, #4
 8002d4c:	f7ff fd4c 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 8002d50:	2005      	movs	r0, #5
 8002d52:	f7ff fd49 	bl	80027e8 <UpdateCharBuffer>
		break;
 8002d56:	e0c3      	b.n	8002ee0 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 4:
		UpdateCharBuffer(3);
 8002d58:	2003      	movs	r0, #3
 8002d5a:	f7ff fd45 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8002d5e:	2004      	movs	r0, #4
 8002d60:	f7ff fd42 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8002d64:	2002      	movs	r0, #2
 8002d66:	f7ff fd3f 	bl	80027e8 <UpdateCharBuffer>

		currentRow = 1;
 8002d6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ee8 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	4b5c      	ldr	r3, [pc, #368]	; (8002eec <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002d7a:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(' ');
 8002d7c:	2020      	movs	r0, #32
 8002d7e:	f7ff fd33 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 8002d82:	2020      	movs	r0, #32
 8002d84:	f7ff fd30 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(0xFF);
 8002d88:	20ff      	movs	r0, #255	; 0xff
 8002d8a:	f7ff fd2d 	bl	80027e8 <UpdateCharBuffer>
		break;
 8002d8e:	e0a7      	b.n	8002ee0 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 5:
		UpdateCharBuffer(3);
 8002d90:	2003      	movs	r0, #3
 8002d92:	f7ff fd29 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8002d96:	2006      	movs	r0, #6
 8002d98:	f7ff fd26 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8002d9c:	2006      	movs	r0, #6
 8002d9e:	f7ff fd23 	bl	80027e8 <UpdateCharBuffer>

		currentRow = 1;
 8002da2:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	4b4e      	ldr	r3, [pc, #312]	; (8002eec <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002db2:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(4);
 8002db4:	2004      	movs	r0, #4
 8002db6:	f7ff fd17 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8002dba:	2004      	movs	r0, #4
 8002dbc:	f7ff fd14 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 8002dc0:	2005      	movs	r0, #5
 8002dc2:	f7ff fd11 	bl	80027e8 <UpdateCharBuffer>
		break;
 8002dc6:	e08b      	b.n	8002ee0 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 6:
		UpdateCharBuffer(0);
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7ff fd0d 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8002dce:	2006      	movs	r0, #6
 8002dd0:	f7ff fd0a 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8002dd4:	2006      	movs	r0, #6
 8002dd6:	f7ff fd07 	bl	80027e8 <UpdateCharBuffer>

		currentRow = 1;
 8002dda:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	4b40      	ldr	r3, [pc, #256]	; (8002eec <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002dea:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(3);
 8002dec:	2003      	movs	r0, #3
 8002dee:	f7ff fcfb 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8002df2:	2004      	movs	r0, #4
 8002df4:	f7ff fcf8 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 8002df8:	2005      	movs	r0, #5
 8002dfa:	f7ff fcf5 	bl	80027e8 <UpdateCharBuffer>
		break;
 8002dfe:	e06f      	b.n	8002ee0 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 7:
		UpdateCharBuffer(1);
 8002e00:	2001      	movs	r0, #1
 8002e02:	f7ff fcf1 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(1);
 8002e06:	2001      	movs	r0, #1
 8002e08:	f7ff fcee 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8002e0c:	2002      	movs	r0, #2
 8002e0e:	f7ff fceb 	bl	80027e8 <UpdateCharBuffer>

		currentRow = 1;
 8002e12:	4b35      	ldr	r3, [pc, #212]	; (8002ee8 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b32      	ldr	r3, [pc, #200]	; (8002eec <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002e22:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(' ');
 8002e24:	2020      	movs	r0, #32
 8002e26:	f7ff fcdf 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 8002e2a:	2020      	movs	r0, #32
 8002e2c:	f7ff fcdc 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 8002e30:	2005      	movs	r0, #5
 8002e32:	f7ff fcd9 	bl	80027e8 <UpdateCharBuffer>
		break;
 8002e36:	e053      	b.n	8002ee0 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 8:
		UpdateCharBuffer(0);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7ff fcd5 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8002e3e:	2006      	movs	r0, #6
 8002e40:	f7ff fcd2 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8002e44:	2002      	movs	r0, #2
 8002e46:	f7ff fccf 	bl	80027e8 <UpdateCharBuffer>

		currentRow = 1;
 8002e4a:	4b27      	ldr	r3, [pc, #156]	; (8002ee8 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002e5a:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(3);
 8002e5c:	2003      	movs	r0, #3
 8002e5e:	f7ff fcc3 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8002e62:	2004      	movs	r0, #4
 8002e64:	f7ff fcc0 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 8002e68:	2005      	movs	r0, #5
 8002e6a:	f7ff fcbd 	bl	80027e8 <UpdateCharBuffer>
		break;
 8002e6e:	e037      	b.n	8002ee0 <CLCD_PrintBigDigitBuffer+0x2c4>
	case 9:
		UpdateCharBuffer(0);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7ff fcb9 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(6);
 8002e76:	2006      	movs	r0, #6
 8002e78:	f7ff fcb6 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(2);
 8002e7c:	2002      	movs	r0, #2
 8002e7e:	f7ff fcb3 	bl	80027e8 <UpdateCharBuffer>

		currentRow = 1;
 8002e82:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	4b16      	ldr	r3, [pc, #88]	; (8002eec <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002e92:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(4);
 8002e94:	2004      	movs	r0, #4
 8002e96:	f7ff fca7 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(4);
 8002e9a:	2004      	movs	r0, #4
 8002e9c:	f7ff fca4 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(5);
 8002ea0:	2005      	movs	r0, #5
 8002ea2:	f7ff fca1 	bl	80027e8 <UpdateCharBuffer>
		break;
 8002ea6:	e01b      	b.n	8002ee0 <CLCD_PrintBigDigitBuffer+0x2c4>
	default:
		UpdateCharBuffer(' ');
 8002ea8:	2020      	movs	r0, #32
 8002eaa:	f7ff fc9d 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 8002eae:	2020      	movs	r0, #32
 8002eb0:	f7ff fc9a 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 8002eb4:	2020      	movs	r0, #32
 8002eb6:	f7ff fc97 	bl	80027e8 <UpdateCharBuffer>

		currentRow = 1;
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <CLCD_PrintBigDigitBuffer+0x2cc>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	701a      	strb	r2, [r3, #0]
		currentCol = col % 16;
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <CLCD_PrintBigDigitBuffer+0x2d0>)
 8002eca:	701a      	strb	r2, [r3, #0]

		UpdateCharBuffer(' ');
 8002ecc:	2020      	movs	r0, #32
 8002ece:	f7ff fc8b 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 8002ed2:	2020      	movs	r0, #32
 8002ed4:	f7ff fc88 	bl	80027e8 <UpdateCharBuffer>
		UpdateCharBuffer(' ');
 8002ed8:	2020      	movs	r0, #32
 8002eda:	f7ff fc85 	bl	80027e8 <UpdateCharBuffer>
	}
}
 8002ede:	bf00      	nop
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000149 	.word	0x20000149
 8002eec:	20000148 	.word	0x20000148

08002ef0 <CLCD_PrintBigNumBuffer>:

void CLCD_PrintBigNumBuffer(uint8_t col, int8_t number){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	460a      	mov	r2, r1
 8002efa:	71fb      	strb	r3, [r7, #7]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71bb      	strb	r3, [r7, #6]
	if(number < 99) {
 8002f00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f04:	2b62      	cmp	r3, #98	; 0x62
 8002f06:	dc22      	bgt.n	8002f4e <CLCD_PrintBigNumBuffer+0x5e>
		CLCD_PrintBigDigitBuffer(col, number / 10);
 8002f08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <CLCD_PrintBigNumBuffer+0x80>)
 8002f0e:	fb82 1203 	smull	r1, r2, r2, r3
 8002f12:	1092      	asrs	r2, r2, #2
 8002f14:	17db      	asrs	r3, r3, #31
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	b25a      	sxtb	r2, r3
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fe7c 	bl	8002c1c <CLCD_PrintBigDigitBuffer>
		CLCD_PrintBigDigitBuffer(col + 3, number % 10);
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	3303      	adds	r3, #3
 8002f28:	b2d8      	uxtb	r0, r3
 8002f2a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <CLCD_PrintBigNumBuffer+0x80>)
 8002f30:	fb83 1302 	smull	r1, r3, r3, r2
 8002f34:	1099      	asrs	r1, r3, #2
 8002f36:	17d3      	asrs	r3, r2, #31
 8002f38:	1ac9      	subs	r1, r1, r3
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	4619      	mov	r1, r3
 8002f48:	f7ff fe68 	bl	8002c1c <CLCD_PrintBigDigitBuffer>
		CLCD_PrintBigDigitBuffer(col, ' ');
		CLCD_PrintBigDigitBuffer(col + 3, ' ');

	}

}
 8002f4c:	e00b      	b.n	8002f66 <CLCD_PrintBigNumBuffer+0x76>
		CLCD_PrintBigDigitBuffer(col, ' ');
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	2120      	movs	r1, #32
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fe62 	bl	8002c1c <CLCD_PrintBigDigitBuffer>
		CLCD_PrintBigDigitBuffer(col + 3, ' ');
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	3303      	adds	r3, #3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2120      	movs	r1, #32
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fe5b 	bl	8002c1c <CLCD_PrintBigDigitBuffer>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	66666667 	.word	0x66666667

08002f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f78:	f000 fc2e 	bl	80037d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f7c:	f000 f872 	bl	8003064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f80:	f000 f97e 	bl	8003280 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f84:	f000 f8b4 	bl	80030f0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002f88:	f000 f92c 	bl	80031e4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002f8c:	f000 f8de 	bl	800314c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8002f90:	482b      	ldr	r0, [pc, #172]	; (8003040 <main+0xcc>)
 8002f92:	f004 f92d 	bl	80071f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8002f96:	482b      	ldr	r0, [pc, #172]	; (8003044 <main+0xd0>)
 8002f98:	f004 f8e0 	bl	800715c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4829      	ldr	r0, [pc, #164]	; (8003044 <main+0xd0>)
 8002fa0:	f004 f978 	bl	8007294 <HAL_TIM_PWM_Start>


  TM_Init(&htim2);
 8002fa4:	4826      	ldr	r0, [pc, #152]	; (8003040 <main+0xcc>)
 8002fa6:	f000 fb9d 	bl	80036e4 <TM_Init>
  TM_SetTime(50);
 8002faa:	2032      	movs	r0, #50	; 0x32
 8002fac:	f000 fbba 	bl	8003724 <TM_SetTime>

  IN_Init();
 8002fb0:	f7ff fa34 	bl	800241c <IN_Init>
  FSM_Init();
 8002fb4:	f7fe f9d4 	bl	8001360 <FSM_Init>

  DHT_Init(DHT_GPIO_Port, DHT_Pin, &htim3);
 8002fb8:	4a22      	ldr	r2, [pc, #136]	; (8003044 <main+0xd0>)
 8002fba:	2120      	movs	r1, #32
 8002fbc:	4822      	ldr	r0, [pc, #136]	; (8003048 <main+0xd4>)
 8002fbe:	f7fd ff41 	bl	8000e44 <DHT_Init>
  OUT_Init(BUZZER_GPIO_Port, BUZZER_Pin);
 8002fc2:	2140      	movs	r1, #64	; 0x40
 8002fc4:	4821      	ldr	r0, [pc, #132]	; (800304c <main+0xd8>)
 8002fc6:	f000 f9cd 	bl	8003364 <OUT_Init>
  CLCD_Init(&hi2c1, 0x3F, 2, 16);
 8002fca:	2310      	movs	r3, #16
 8002fcc:	2202      	movs	r2, #2
 8002fce:	213f      	movs	r1, #63	; 0x3f
 8002fd0:	481f      	ldr	r0, [pc, #124]	; (8003050 <main+0xdc>)
 8002fd2:	f7ff fb1b 	bl	800260c <CLCD_Init>
  CLCD_InitBigDigit();
 8002fd6:	f7ff fdf3 	bl	8002bc0 <CLCD_InitBigDigit>
  DS_Init(&hi2c1);
 8002fda:	481d      	ldr	r0, [pc, #116]	; (8003050 <main+0xdc>)
 8002fdc:	f7fe f8a6 	bl	800112c <DS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(TM_IsFlag()){
 8002fe0:	f000 fbc2 	bl	8003768 <TM_IsFlag>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0fa      	beq.n	8002fe0 <main+0x6c>
		  _counter_time_elapsed = (_counter_time_elapsed + 1) % 200;
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <main+0xe0>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	4a19      	ldr	r2, [pc, #100]	; (8003058 <main+0xe4>)
 8002ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ff6:	1191      	asrs	r1, r2, #6
 8002ff8:	17da      	asrs	r2, r3, #31
 8002ffa:	1a8a      	subs	r2, r1, r2
 8002ffc:	21c8      	movs	r1, #200	; 0xc8
 8002ffe:	fb01 f202 	mul.w	r2, r1, r2
 8003002:	1a9a      	subs	r2, r3, r2
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <main+0xe0>)
 8003008:	701a      	strb	r2, [r3, #0]

		  if(_time_screen >= 5) _time_screen -= 5;
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <main+0xe8>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	2b04      	cmp	r3, #4
 8003010:	d905      	bls.n	800301e <main+0xaa>
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <main+0xe8>)
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	3b05      	subs	r3, #5
 8003018:	b29a      	uxth	r2, r3
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <main+0xe8>)
 800301c:	801a      	strh	r2, [r3, #0]
		  if(_time_out >= 5) _time_out -= 5;
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <main+0xec>)
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	2b04      	cmp	r3, #4
 8003024:	d905      	bls.n	8003032 <main+0xbe>
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <main+0xec>)
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	3b05      	subs	r3, #5
 800302c:	b29a      	uxth	r2, r3
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <main+0xec>)
 8003030:	801a      	strh	r2, [r3, #0]

		  IN_ReadButton();
 8003032:	f7ff f9f9 	bl	8002428 <IN_ReadButton>

		  FSM_SystemControl();
 8003036:	f7fe f9a9 	bl	800138c <FSM_SystemControl>

		  CLCD_DisplayScreen();
 800303a:	f7ff fd65 	bl	8002b08 <CLCD_DisplayScreen>
	  if(TM_IsFlag()){
 800303e:	e7cf      	b.n	8002fe0 <main+0x6c>
 8003040:	200001a0 	.word	0x200001a0
 8003044:	200001e8 	.word	0x200001e8
 8003048:	40010c00 	.word	0x40010c00
 800304c:	40010800 	.word	0x40010800
 8003050:	2000014c 	.word	0x2000014c
 8003054:	20000124 	.word	0x20000124
 8003058:	51eb851f 	.word	0x51eb851f
 800305c:	20000126 	.word	0x20000126
 8003060:	2000012a 	.word	0x2000012a

08003064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b090      	sub	sp, #64	; 0x40
 8003068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800306a:	f107 0318 	add.w	r3, r7, #24
 800306e:	2228      	movs	r2, #40	; 0x28
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f004 fd66 	bl	8007b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	60da      	str	r2, [r3, #12]
 8003084:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003086:	2301      	movs	r3, #1
 8003088:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800308a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800308e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003090:	2300      	movs	r3, #0
 8003092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003094:	2301      	movs	r3, #1
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003098:	2302      	movs	r3, #2
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800309c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030a8:	f107 0318 	add.w	r3, r7, #24
 80030ac:	4618      	mov	r0, r3
 80030ae:	f003 fbff 	bl	80068b0 <HAL_RCC_OscConfig>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80030b8:	f000 f94e 	bl	8003358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030bc:	230f      	movs	r3, #15
 80030be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030c0:	2302      	movs	r3, #2
 80030c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	2102      	movs	r1, #2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f003 fe6c 	bl	8006db4 <HAL_RCC_ClockConfig>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80030e2:	f000 f939 	bl	8003358 <Error_Handler>
  }
}
 80030e6:	bf00      	nop
 80030e8:	3740      	adds	r7, #64	; 0x40
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <MX_I2C1_Init+0x50>)
 80030f6:	4a13      	ldr	r2, [pc, #76]	; (8003144 <MX_I2C1_Init+0x54>)
 80030f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <MX_I2C1_Init+0x50>)
 80030fc:	4a12      	ldr	r2, [pc, #72]	; (8003148 <MX_I2C1_Init+0x58>)
 80030fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <MX_I2C1_Init+0x50>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003106:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <MX_I2C1_Init+0x50>)
 8003108:	2200      	movs	r2, #0
 800310a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <MX_I2C1_Init+0x50>)
 800310e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003112:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <MX_I2C1_Init+0x50>)
 8003116:	2200      	movs	r2, #0
 8003118:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <MX_I2C1_Init+0x50>)
 800311c:	2200      	movs	r2, #0
 800311e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003120:	4b07      	ldr	r3, [pc, #28]	; (8003140 <MX_I2C1_Init+0x50>)
 8003122:	2200      	movs	r2, #0
 8003124:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <MX_I2C1_Init+0x50>)
 8003128:	2200      	movs	r2, #0
 800312a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800312c:	4804      	ldr	r0, [pc, #16]	; (8003140 <MX_I2C1_Init+0x50>)
 800312e:	f000 ff1d 	bl	8003f6c <HAL_I2C_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003138:	f000 f90e 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}
 8003140:	2000014c 	.word	0x2000014c
 8003144:	40005400 	.word	0x40005400
 8003148:	000186a0 	.word	0x000186a0

0800314c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003152:	f107 0308 	add.w	r3, r7, #8
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	609a      	str	r2, [r3, #8]
 800315e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003160:	463b      	mov	r3, r7
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <MX_TIM2_Init+0x94>)
 800316a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800316e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000 - 1;
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <MX_TIM2_Init+0x94>)
 8003172:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8003176:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <MX_TIM2_Init+0x94>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100 - 1;
 800317e:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <MX_TIM2_Init+0x94>)
 8003180:	2263      	movs	r2, #99	; 0x63
 8003182:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003184:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <MX_TIM2_Init+0x94>)
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <MX_TIM2_Init+0x94>)
 800318c:	2200      	movs	r2, #0
 800318e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003190:	4813      	ldr	r0, [pc, #76]	; (80031e0 <MX_TIM2_Init+0x94>)
 8003192:	f003 ff93 	bl	80070bc <HAL_TIM_Base_Init>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800319c:	f000 f8dc 	bl	8003358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031a6:	f107 0308 	add.w	r3, r7, #8
 80031aa:	4619      	mov	r1, r3
 80031ac:	480c      	ldr	r0, [pc, #48]	; (80031e0 <MX_TIM2_Init+0x94>)
 80031ae:	f004 fa1b 	bl	80075e8 <HAL_TIM_ConfigClockSource>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80031b8:	f000 f8ce 	bl	8003358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031bc:	2300      	movs	r3, #0
 80031be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031c4:	463b      	mov	r3, r7
 80031c6:	4619      	mov	r1, r3
 80031c8:	4805      	ldr	r0, [pc, #20]	; (80031e0 <MX_TIM2_Init+0x94>)
 80031ca:	f004 fc11 	bl	80079f0 <HAL_TIMEx_MasterConfigSynchronization>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80031d4:	f000 f8c0 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80031d8:	bf00      	nop
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	200001a0 	.word	0x200001a0

080031e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ea:	f107 0308 	add.w	r3, r7, #8
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f8:	463b      	mov	r3, r7
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <MX_TIM3_Init+0x94>)
 8003202:	4a1e      	ldr	r2, [pc, #120]	; (800327c <MX_TIM3_Init+0x98>)
 8003204:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72 - 1;
 8003206:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <MX_TIM3_Init+0x94>)
 8003208:	2247      	movs	r2, #71	; 0x47
 800320a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <MX_TIM3_Init+0x94>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF - 1;
 8003212:	4b19      	ldr	r3, [pc, #100]	; (8003278 <MX_TIM3_Init+0x94>)
 8003214:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003218:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800321a:	4b17      	ldr	r3, [pc, #92]	; (8003278 <MX_TIM3_Init+0x94>)
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003220:	4b15      	ldr	r3, [pc, #84]	; (8003278 <MX_TIM3_Init+0x94>)
 8003222:	2200      	movs	r2, #0
 8003224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003226:	4814      	ldr	r0, [pc, #80]	; (8003278 <MX_TIM3_Init+0x94>)
 8003228:	f003 ff48 	bl	80070bc <HAL_TIM_Base_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003232:	f000 f891 	bl	8003358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800323a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800323c:	f107 0308 	add.w	r3, r7, #8
 8003240:	4619      	mov	r1, r3
 8003242:	480d      	ldr	r0, [pc, #52]	; (8003278 <MX_TIM3_Init+0x94>)
 8003244:	f004 f9d0 	bl	80075e8 <HAL_TIM_ConfigClockSource>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800324e:	f000 f883 	bl	8003358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800325a:	463b      	mov	r3, r7
 800325c:	4619      	mov	r1, r3
 800325e:	4806      	ldr	r0, [pc, #24]	; (8003278 <MX_TIM3_Init+0x94>)
 8003260:	f004 fbc6 	bl	80079f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800326a:	f000 f875 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800326e:	bf00      	nop
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200001e8 	.word	0x200001e8
 800327c:	40000400 	.word	0x40000400

08003280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003286:	f107 0310 	add.w	r3, r7, #16
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	605a      	str	r2, [r3, #4]
 8003290:	609a      	str	r2, [r3, #8]
 8003292:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003294:	4b2d      	ldr	r3, [pc, #180]	; (800334c <MX_GPIO_Init+0xcc>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	4a2c      	ldr	r2, [pc, #176]	; (800334c <MX_GPIO_Init+0xcc>)
 800329a:	f043 0320 	orr.w	r3, r3, #32
 800329e:	6193      	str	r3, [r2, #24]
 80032a0:	4b2a      	ldr	r3, [pc, #168]	; (800334c <MX_GPIO_Init+0xcc>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ac:	4b27      	ldr	r3, [pc, #156]	; (800334c <MX_GPIO_Init+0xcc>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <MX_GPIO_Init+0xcc>)
 80032b2:	f043 0304 	orr.w	r3, r3, #4
 80032b6:	6193      	str	r3, [r2, #24]
 80032b8:	4b24      	ldr	r3, [pc, #144]	; (800334c <MX_GPIO_Init+0xcc>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c4:	4b21      	ldr	r3, [pc, #132]	; (800334c <MX_GPIO_Init+0xcc>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	4a20      	ldr	r2, [pc, #128]	; (800334c <MX_GPIO_Init+0xcc>)
 80032ca:	f043 0308 	orr.w	r3, r3, #8
 80032ce:	6193      	str	r3, [r2, #24]
 80032d0:	4b1e      	ldr	r3, [pc, #120]	; (800334c <MX_GPIO_Init+0xcc>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80032dc:	2200      	movs	r2, #0
 80032de:	2160      	movs	r1, #96	; 0x60
 80032e0:	481b      	ldr	r0, [pc, #108]	; (8003350 <MX_GPIO_Init+0xd0>)
 80032e2:	f000 fe2a 	bl	8003f3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2120      	movs	r1, #32
 80032ea:	481a      	ldr	r0, [pc, #104]	; (8003354 <MX_GPIO_Init+0xd4>)
 80032ec:	f000 fe25 	bl	8003f3a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BT1_Pin BT0_Pin BT2_Pin */
  GPIO_InitStruct.Pin = BT1_Pin|BT0_Pin|BT2_Pin;
 80032f0:	f240 430c 	movw	r3, #1036	; 0x40c
 80032f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032fa:	2301      	movs	r3, #1
 80032fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fe:	f107 0310 	add.w	r3, r7, #16
 8003302:	4619      	mov	r1, r3
 8003304:	4812      	ldr	r0, [pc, #72]	; (8003350 <MX_GPIO_Init+0xd0>)
 8003306:	f000 fc7d 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BUZZER_Pin;
 800330a:	2360      	movs	r3, #96	; 0x60
 800330c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800330e:	2301      	movs	r3, #1
 8003310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003312:	2301      	movs	r3, #1
 8003314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	2302      	movs	r3, #2
 8003318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331a:	f107 0310 	add.w	r3, r7, #16
 800331e:	4619      	mov	r1, r3
 8003320:	480b      	ldr	r0, [pc, #44]	; (8003350 <MX_GPIO_Init+0xd0>)
 8003322:	f000 fc6f 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin;
 8003326:	2320      	movs	r3, #32
 8003328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800332a:	2301      	movs	r3, #1
 800332c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800332e:	2301      	movs	r3, #1
 8003330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003332:	2302      	movs	r3, #2
 8003334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8003336:	f107 0310 	add.w	r3, r7, #16
 800333a:	4619      	mov	r1, r3
 800333c:	4805      	ldr	r0, [pc, #20]	; (8003354 <MX_GPIO_Init+0xd4>)
 800333e:	f000 fc61 	bl	8003c04 <HAL_GPIO_Init>

}
 8003342:	bf00      	nop
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
 8003350:	40010800 	.word	0x40010800
 8003354:	40010c00 	.word	0x40010c00

08003358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800335c:	b672      	cpsid	i
}
 800335e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003360:	e7fe      	b.n	8003360 <Error_Handler+0x8>
	...

08003364 <OUT_Init>:
#include "output.h"

GPIO_TypeDef* Buzzer_port;
uint16_t Buzzer_pin;

void OUT_Init(GPIO_TypeDef* buzzer_port, uint16_t buzzer_pin){
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	807b      	strh	r3, [r7, #2]
	Buzzer_port = buzzer_port;
 8003370:	4a08      	ldr	r2, [pc, #32]	; (8003394 <OUT_Init+0x30>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6013      	str	r3, [r2, #0]
	Buzzer_pin = buzzer_pin;
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <OUT_Init+0x34>)
 8003378:	887b      	ldrh	r3, [r7, #2]
 800337a:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(Buzzer_port, Buzzer_pin, SET);
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <OUT_Init+0x30>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a05      	ldr	r2, [pc, #20]	; (8003398 <OUT_Init+0x34>)
 8003382:	8811      	ldrh	r1, [r2, #0]
 8003384:	2201      	movs	r2, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fdd7 	bl	8003f3a <HAL_GPIO_WritePin>
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000230 	.word	0x20000230
 8003398:	20000234 	.word	0x20000234

0800339c <OUT_SetBuzzer>:

void OUT_SetBuzzer(uint8_t value){
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
	if(value == 1) HAL_GPIO_WritePin(Buzzer_port, Buzzer_pin, RESET);
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d108      	bne.n	80033be <OUT_SetBuzzer+0x22>
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <OUT_SetBuzzer+0x3c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <OUT_SetBuzzer+0x40>)
 80033b2:	8811      	ldrh	r1, [r2, #0]
 80033b4:	2200      	movs	r2, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fdbf 	bl	8003f3a <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(Buzzer_port, Buzzer_pin, SET);
}
 80033bc:	e007      	b.n	80033ce <OUT_SetBuzzer+0x32>
	else HAL_GPIO_WritePin(Buzzer_port, Buzzer_pin, SET);
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <OUT_SetBuzzer+0x3c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a06      	ldr	r2, [pc, #24]	; (80033dc <OUT_SetBuzzer+0x40>)
 80033c4:	8811      	ldrh	r1, [r2, #0]
 80033c6:	2201      	movs	r2, #1
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fdb6 	bl	8003f3a <HAL_GPIO_WritePin>
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000230 	.word	0x20000230
 80033dc:	20000234 	.word	0x20000234

080033e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80033e6:	4b15      	ldr	r3, [pc, #84]	; (800343c <HAL_MspInit+0x5c>)
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	4a14      	ldr	r2, [pc, #80]	; (800343c <HAL_MspInit+0x5c>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	6193      	str	r3, [r2, #24]
 80033f2:	4b12      	ldr	r3, [pc, #72]	; (800343c <HAL_MspInit+0x5c>)
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	4b0f      	ldr	r3, [pc, #60]	; (800343c <HAL_MspInit+0x5c>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	4a0e      	ldr	r2, [pc, #56]	; (800343c <HAL_MspInit+0x5c>)
 8003404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003408:	61d3      	str	r3, [r2, #28]
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <HAL_MspInit+0x5c>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	607b      	str	r3, [r7, #4]
 8003414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <HAL_MspInit+0x60>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	4a04      	ldr	r2, [pc, #16]	; (8003440 <HAL_MspInit+0x60>)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	40021000 	.word	0x40021000
 8003440:	40010000 	.word	0x40010000

08003444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	; 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a25      	ldr	r2, [pc, #148]	; (80034f4 <HAL_I2C_MspInit+0xb0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d142      	bne.n	80034ea <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003464:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_I2C_MspInit+0xb4>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	4a23      	ldr	r2, [pc, #140]	; (80034f8 <HAL_I2C_MspInit+0xb4>)
 800346a:	f043 0308 	orr.w	r3, r3, #8
 800346e:	6193      	str	r3, [r2, #24]
 8003470:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <HAL_I2C_MspInit+0xb4>)
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800347c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003482:	2312      	movs	r3, #18
 8003484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003486:	2303      	movs	r3, #3
 8003488:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	4619      	mov	r1, r3
 8003490:	481a      	ldr	r0, [pc, #104]	; (80034fc <HAL_I2C_MspInit+0xb8>)
 8003492:	f000 fbb7 	bl	8003c04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003496:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <HAL_I2C_MspInit+0xbc>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	f043 0302 	orr.w	r3, r3, #2
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
 80034ac:	4a14      	ldr	r2, [pc, #80]	; (8003500 <HAL_I2C_MspInit+0xbc>)
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034b2:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_I2C_MspInit+0xb4>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4a10      	ldr	r2, [pc, #64]	; (80034f8 <HAL_I2C_MspInit+0xb4>)
 80034b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034bc:	61d3      	str	r3, [r2, #28]
 80034be:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <HAL_I2C_MspInit+0xb4>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80034ca:	2200      	movs	r2, #0
 80034cc:	2100      	movs	r1, #0
 80034ce:	201f      	movs	r0, #31
 80034d0:	f000 fadf 	bl	8003a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80034d4:	201f      	movs	r0, #31
 80034d6:	f000 faf8 	bl	8003aca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	2020      	movs	r0, #32
 80034e0:	f000 fad7 	bl	8003a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80034e4:	2020      	movs	r0, #32
 80034e6:	f000 faf0 	bl	8003aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034ea:	bf00      	nop
 80034ec:	3728      	adds	r7, #40	; 0x28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40005400 	.word	0x40005400
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40010c00 	.word	0x40010c00
 8003500:	40010000 	.word	0x40010000

08003504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003514:	d114      	bne.n	8003540 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <HAL_TIM_Base_MspInit+0x68>)
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	4a14      	ldr	r2, [pc, #80]	; (800356c <HAL_TIM_Base_MspInit+0x68>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	61d3      	str	r3, [r2, #28]
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_TIM_Base_MspInit+0x68>)
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800352e:	2200      	movs	r2, #0
 8003530:	2100      	movs	r1, #0
 8003532:	201c      	movs	r0, #28
 8003534:	f000 faad 	bl	8003a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003538:	201c      	movs	r0, #28
 800353a:	f000 fac6 	bl	8003aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800353e:	e010      	b.n	8003562 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <HAL_TIM_Base_MspInit+0x6c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10b      	bne.n	8003562 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_TIM_Base_MspInit+0x68>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	4a07      	ldr	r2, [pc, #28]	; (800356c <HAL_TIM_Base_MspInit+0x68>)
 8003550:	f043 0302 	orr.w	r3, r3, #2
 8003554:	61d3      	str	r3, [r2, #28]
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_TIM_Base_MspInit+0x68>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]
}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	40000400 	.word	0x40000400

08003574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003578:	e7fe      	b.n	8003578 <NMI_Handler+0x4>

0800357a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800357e:	e7fe      	b.n	800357e <HardFault_Handler+0x4>

08003580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003584:	e7fe      	b.n	8003584 <MemManage_Handler+0x4>

08003586 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800358a:	e7fe      	b.n	800358a <BusFault_Handler+0x4>

0800358c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003590:	e7fe      	b.n	8003590 <UsageFault_Handler+0x4>

08003592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003592:	b480      	push	{r7}
 8003594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr

0800359e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr

080035b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035ba:	f000 f953 	bl	8003864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <TIM2_IRQHandler+0x10>)
 80035ca:	f003 ff05 	bl	80073d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200001a0 	.word	0x200001a0

080035d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <I2C1_EV_IRQHandler+0x10>)
 80035de:	f001 f967 	bl	80048b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	2000014c 	.word	0x2000014c

080035ec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <I2C1_ER_IRQHandler+0x10>)
 80035f2:	f001 face 	bl	8004b92 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	2000014c 	.word	0x2000014c

08003600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003608:	4a14      	ldr	r2, [pc, #80]	; (800365c <_sbrk+0x5c>)
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <_sbrk+0x60>)
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003614:	4b13      	ldr	r3, [pc, #76]	; (8003664 <_sbrk+0x64>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <_sbrk+0x64>)
 800361e:	4a12      	ldr	r2, [pc, #72]	; (8003668 <_sbrk+0x68>)
 8003620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003622:	4b10      	ldr	r3, [pc, #64]	; (8003664 <_sbrk+0x64>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4413      	add	r3, r2
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	429a      	cmp	r2, r3
 800362e:	d207      	bcs.n	8003640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003630:	f004 fa4e 	bl	8007ad0 <__errno>
 8003634:	4603      	mov	r3, r0
 8003636:	220c      	movs	r2, #12
 8003638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
 800363e:	e009      	b.n	8003654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003640:	4b08      	ldr	r3, [pc, #32]	; (8003664 <_sbrk+0x64>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <_sbrk+0x64>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	4a05      	ldr	r2, [pc, #20]	; (8003664 <_sbrk+0x64>)
 8003650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003652:	68fb      	ldr	r3, [r7, #12]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20005000 	.word	0x20005000
 8003660:	00000400 	.word	0x00000400
 8003664:	20000238 	.word	0x20000238
 8003668:	20000258 	.word	0x20000258

0800366c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <RunSoftwareTimer>:

static uint16_t MUL_timer		= 1;
static uint8_t flag_timer		= 0;
static uint16_t counter_timer 	= 0;

void RunSoftwareTimer(void){
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
	if(counter_timer > 0){
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <RunSoftwareTimer+0x38>)
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d010      	beq.n	80036a6 <RunSoftwareTimer+0x2e>
		counter_timer--;
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <RunSoftwareTimer+0x38>)
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <RunSoftwareTimer+0x38>)
 800368e:	801a      	strh	r2, [r3, #0]
		if(counter_timer == 0){
 8003690:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <RunSoftwareTimer+0x38>)
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <RunSoftwareTimer+0x2e>
			counter_timer = MUL_timer;
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <RunSoftwareTimer+0x3c>)
 800369a:	881a      	ldrh	r2, [r3, #0]
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <RunSoftwareTimer+0x38>)
 800369e:	801a      	strh	r2, [r3, #0]
			flag_timer = 1;
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <RunSoftwareTimer+0x40>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000242 	.word	0x20000242
 80036b4:	2000006a 	.word	0x2000006a
 80036b8:	20000240 	.word	0x20000240

080036bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stimer->Instance) {
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d101      	bne.n	80036d6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		RunSoftwareTimer();
 80036d2:	f7ff ffd1 	bl	8003678 <RunSoftwareTimer>
	}
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	2000023c 	.word	0x2000023c

080036e4 <TM_Init>:


//==================HIGH LEVEL FUNCTION==================//
void TM_Init(TIM_HandleTypeDef* htim){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	stimer = htim;
 80036ec:	4a09      	ldr	r2, [pc, #36]	; (8003714 <TM_Init+0x30>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6013      	str	r3, [r2, #0]
	counter_timer = MUL_timer;
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <TM_Init+0x34>)
 80036f4:	881a      	ldrh	r2, [r3, #0]
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <TM_Init+0x38>)
 80036f8:	801a      	strh	r2, [r3, #0]
	flag_timer = 0;
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <TM_Init+0x3c>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(stimer);
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <TM_Init+0x30>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f003 fd73 	bl	80071f0 <HAL_TIM_Base_Start_IT>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	2000023c 	.word	0x2000023c
 8003718:	2000006a 	.word	0x2000006a
 800371c:	20000242 	.word	0x20000242
 8003720:	20000240 	.word	0x20000240

08003724 <TM_SetTime>:

void TM_SetTime(uint16_t duration){
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	80fb      	strh	r3, [r7, #6]
	MUL_timer = duration / TIME_CYCLE;
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	4a09      	ldr	r2, [pc, #36]	; (8003758 <TM_SetTime+0x34>)
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	fb93 f3f2 	sdiv	r3, r3, r2
 8003738:	b29a      	uxth	r2, r3
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <TM_SetTime+0x38>)
 800373c:	801a      	strh	r2, [r3, #0]
	counter_timer = MUL_timer;
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <TM_SetTime+0x38>)
 8003740:	881a      	ldrh	r2, [r3, #0]
 8003742:	4b07      	ldr	r3, [pc, #28]	; (8003760 <TM_SetTime+0x3c>)
 8003744:	801a      	strh	r2, [r3, #0]
	flag_timer = 0;
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <TM_SetTime+0x40>)
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000068 	.word	0x20000068
 800375c:	2000006a 	.word	0x2000006a
 8003760:	20000242 	.word	0x20000242
 8003764:	20000240 	.word	0x20000240

08003768 <TM_IsFlag>:

uint8_t TM_IsFlag(void){
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
	if(flag_timer) {
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <TM_IsFlag+0x20>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <TM_IsFlag+0x16>
		flag_timer = 0;
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <TM_IsFlag+0x20>)
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]
		return 1;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <TM_IsFlag+0x18>
	}
	return 0;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	20000240 	.word	0x20000240

0800378c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800378c:	480c      	ldr	r0, [pc, #48]	; (80037c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800378e:	490d      	ldr	r1, [pc, #52]	; (80037c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003790:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003794:	e002      	b.n	800379c <LoopCopyDataInit>

08003796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800379a:	3304      	adds	r3, #4

0800379c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800379c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800379e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a0:	d3f9      	bcc.n	8003796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037a4:	4c0a      	ldr	r4, [pc, #40]	; (80037d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a8:	e001      	b.n	80037ae <LoopFillZerobss>

080037aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037ac:	3204      	adds	r2, #4

080037ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b0:	d3fb      	bcc.n	80037aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037b2:	f7ff ff5b 	bl	800366c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037b6:	f004 f991 	bl	8007adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037ba:	f7ff fbdb 	bl	8002f74 <main>
  bx lr
 80037be:	4770      	bx	lr
  ldr r0, =_sdata
 80037c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037c4:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 80037c8:	08007ea4 	.word	0x08007ea4
  ldr r2, =_sbss
 80037cc:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 80037d0:	20000258 	.word	0x20000258

080037d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037d4:	e7fe      	b.n	80037d4 <ADC1_2_IRQHandler>
	...

080037d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <HAL_Init+0x28>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a07      	ldr	r2, [pc, #28]	; (8003800 <HAL_Init+0x28>)
 80037e2:	f043 0310 	orr.w	r3, r3, #16
 80037e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e8:	2003      	movs	r0, #3
 80037ea:	f000 f947 	bl	8003a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ee:	200f      	movs	r0, #15
 80037f0:	f000 f808 	bl	8003804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037f4:	f7ff fdf4 	bl	80033e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40022000 	.word	0x40022000

08003804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800380c:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_InitTick+0x54>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_InitTick+0x58>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	4619      	mov	r1, r3
 8003816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800381a:	fbb3 f3f1 	udiv	r3, r3, r1
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f95f 	bl	8003ae6 <HAL_SYSTICK_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e00e      	b.n	8003850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b0f      	cmp	r3, #15
 8003836:	d80a      	bhi.n	800384e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003838:	2200      	movs	r2, #0
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	f000 f927 	bl	8003a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003844:	4a06      	ldr	r2, [pc, #24]	; (8003860 <HAL_InitTick+0x5c>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	e000      	b.n	8003850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000064 	.word	0x20000064
 800385c:	20000070 	.word	0x20000070
 8003860:	2000006c 	.word	0x2000006c

08003864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003868:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_IncTick+0x1c>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_IncTick+0x20>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4413      	add	r3, r2
 8003874:	4a03      	ldr	r2, [pc, #12]	; (8003884 <HAL_IncTick+0x20>)
 8003876:	6013      	str	r3, [r2, #0]
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	20000070 	.word	0x20000070
 8003884:	20000244 	.word	0x20000244

08003888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return uwTick;
 800388c:	4b02      	ldr	r3, [pc, #8]	; (8003898 <HAL_GetTick+0x10>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	20000244 	.word	0x20000244

0800389c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7ff fff0 	bl	8003888 <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d005      	beq.n	80038c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_Delay+0x44>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038c2:	bf00      	nop
 80038c4:	f7ff ffe0 	bl	8003888 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d8f7      	bhi.n	80038c4 <HAL_Delay+0x28>
  {
  }
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000070 	.word	0x20000070

080038e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <__NVIC_SetPriorityGrouping+0x44>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003900:	4013      	ands	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800390c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003916:	4a04      	ldr	r2, [pc, #16]	; (8003928 <__NVIC_SetPriorityGrouping+0x44>)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	60d3      	str	r3, [r2, #12]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <__NVIC_GetPriorityGrouping+0x18>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	f003 0307 	and.w	r3, r3, #7
}
 800393a:	4618      	mov	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	2b00      	cmp	r3, #0
 8003958:	db0b      	blt.n	8003972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	f003 021f 	and.w	r2, r3, #31
 8003960:	4906      	ldr	r1, [pc, #24]	; (800397c <__NVIC_EnableIRQ+0x34>)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2001      	movs	r0, #1
 800396a:	fa00 f202 	lsl.w	r2, r0, r2
 800396e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr
 800397c:	e000e100 	.word	0xe000e100

08003980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	2b00      	cmp	r3, #0
 8003992:	db0a      	blt.n	80039aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	490c      	ldr	r1, [pc, #48]	; (80039cc <__NVIC_SetPriority+0x4c>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	440b      	add	r3, r1
 80039a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a8:	e00a      	b.n	80039c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4908      	ldr	r1, [pc, #32]	; (80039d0 <__NVIC_SetPriority+0x50>)
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	3b04      	subs	r3, #4
 80039b8:	0112      	lsls	r2, r2, #4
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	440b      	add	r3, r1
 80039be:	761a      	strb	r2, [r3, #24]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	e000e100 	.word	0xe000e100
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f1c3 0307 	rsb	r3, r3, #7
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	bf28      	it	cs
 80039f2:	2304      	movcs	r3, #4
 80039f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3304      	adds	r3, #4
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d902      	bls.n	8003a04 <NVIC_EncodePriority+0x30>
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3b03      	subs	r3, #3
 8003a02:	e000      	b.n	8003a06 <NVIC_EncodePriority+0x32>
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	401a      	ands	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	43d9      	mvns	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	4313      	orrs	r3, r2
         );
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a48:	d301      	bcc.n	8003a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e00f      	b.n	8003a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <SysTick_Config+0x40>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a56:	210f      	movs	r1, #15
 8003a58:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5c:	f7ff ff90 	bl	8003980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <SysTick_Config+0x40>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a66:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <SysTick_Config+0x40>)
 8003a68:	2207      	movs	r2, #7
 8003a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	e000e010 	.word	0xe000e010

08003a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff ff2d 	bl	80038e4 <__NVIC_SetPriorityGrouping>
}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b086      	sub	sp, #24
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	4603      	mov	r3, r0
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa4:	f7ff ff42 	bl	800392c <__NVIC_GetPriorityGrouping>
 8003aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	6978      	ldr	r0, [r7, #20]
 8003ab0:	f7ff ff90 	bl	80039d4 <NVIC_EncodePriority>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aba:	4611      	mov	r1, r2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ff5f 	bl	8003980 <__NVIC_SetPriority>
}
 8003ac2:	bf00      	nop
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ff35 	bl	8003948 <__NVIC_EnableIRQ>
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff ffa2 	bl	8003a38 <SysTick_Config>
 8003af4:	4603      	mov	r3, r0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d005      	beq.n	8003b22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2204      	movs	r2, #4
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
 8003b20:	e051      	b.n	8003bc6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 020e 	bic.w	r2, r2, #14
 8003b30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <HAL_DMA_Abort_IT+0xd0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d029      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xa0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <HAL_DMA_Abort_IT+0xd4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d022      	beq.n	8003b9c <HAL_DMA_Abort_IT+0x9c>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <HAL_DMA_Abort_IT+0xd8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d01a      	beq.n	8003b96 <HAL_DMA_Abort_IT+0x96>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <HAL_DMA_Abort_IT+0xdc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d012      	beq.n	8003b90 <HAL_DMA_Abort_IT+0x90>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1c      	ldr	r2, [pc, #112]	; (8003be0 <HAL_DMA_Abort_IT+0xe0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00a      	beq.n	8003b8a <HAL_DMA_Abort_IT+0x8a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1a      	ldr	r2, [pc, #104]	; (8003be4 <HAL_DMA_Abort_IT+0xe4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d102      	bne.n	8003b84 <HAL_DMA_Abort_IT+0x84>
 8003b7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b82:	e00e      	b.n	8003ba2 <HAL_DMA_Abort_IT+0xa2>
 8003b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b88:	e00b      	b.n	8003ba2 <HAL_DMA_Abort_IT+0xa2>
 8003b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b8e:	e008      	b.n	8003ba2 <HAL_DMA_Abort_IT+0xa2>
 8003b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b94:	e005      	b.n	8003ba2 <HAL_DMA_Abort_IT+0xa2>
 8003b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b9a:	e002      	b.n	8003ba2 <HAL_DMA_Abort_IT+0xa2>
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	e000      	b.n	8003ba2 <HAL_DMA_Abort_IT+0xa2>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <HAL_DMA_Abort_IT+0xe8>)
 8003ba4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	4798      	blx	r3
    } 
  }
  return status;
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40020008 	.word	0x40020008
 8003bd4:	4002001c 	.word	0x4002001c
 8003bd8:	40020030 	.word	0x40020030
 8003bdc:	40020044 	.word	0x40020044
 8003be0:	40020058 	.word	0x40020058
 8003be4:	4002006c 	.word	0x4002006c
 8003be8:	40020000 	.word	0x40020000

08003bec <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b08b      	sub	sp, #44	; 0x2c
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c12:	2300      	movs	r3, #0
 8003c14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c16:	e169      	b.n	8003eec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c18:	2201      	movs	r2, #1
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	f040 8158 	bne.w	8003ee6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4a9a      	ldr	r2, [pc, #616]	; (8003ea4 <HAL_GPIO_Init+0x2a0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d05e      	beq.n	8003cfe <HAL_GPIO_Init+0xfa>
 8003c40:	4a98      	ldr	r2, [pc, #608]	; (8003ea4 <HAL_GPIO_Init+0x2a0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d875      	bhi.n	8003d32 <HAL_GPIO_Init+0x12e>
 8003c46:	4a98      	ldr	r2, [pc, #608]	; (8003ea8 <HAL_GPIO_Init+0x2a4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d058      	beq.n	8003cfe <HAL_GPIO_Init+0xfa>
 8003c4c:	4a96      	ldr	r2, [pc, #600]	; (8003ea8 <HAL_GPIO_Init+0x2a4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d86f      	bhi.n	8003d32 <HAL_GPIO_Init+0x12e>
 8003c52:	4a96      	ldr	r2, [pc, #600]	; (8003eac <HAL_GPIO_Init+0x2a8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d052      	beq.n	8003cfe <HAL_GPIO_Init+0xfa>
 8003c58:	4a94      	ldr	r2, [pc, #592]	; (8003eac <HAL_GPIO_Init+0x2a8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d869      	bhi.n	8003d32 <HAL_GPIO_Init+0x12e>
 8003c5e:	4a94      	ldr	r2, [pc, #592]	; (8003eb0 <HAL_GPIO_Init+0x2ac>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d04c      	beq.n	8003cfe <HAL_GPIO_Init+0xfa>
 8003c64:	4a92      	ldr	r2, [pc, #584]	; (8003eb0 <HAL_GPIO_Init+0x2ac>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d863      	bhi.n	8003d32 <HAL_GPIO_Init+0x12e>
 8003c6a:	4a92      	ldr	r2, [pc, #584]	; (8003eb4 <HAL_GPIO_Init+0x2b0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d046      	beq.n	8003cfe <HAL_GPIO_Init+0xfa>
 8003c70:	4a90      	ldr	r2, [pc, #576]	; (8003eb4 <HAL_GPIO_Init+0x2b0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d85d      	bhi.n	8003d32 <HAL_GPIO_Init+0x12e>
 8003c76:	2b12      	cmp	r3, #18
 8003c78:	d82a      	bhi.n	8003cd0 <HAL_GPIO_Init+0xcc>
 8003c7a:	2b12      	cmp	r3, #18
 8003c7c:	d859      	bhi.n	8003d32 <HAL_GPIO_Init+0x12e>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <HAL_GPIO_Init+0x80>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003cff 	.word	0x08003cff
 8003c88:	08003cd9 	.word	0x08003cd9
 8003c8c:	08003ceb 	.word	0x08003ceb
 8003c90:	08003d2d 	.word	0x08003d2d
 8003c94:	08003d33 	.word	0x08003d33
 8003c98:	08003d33 	.word	0x08003d33
 8003c9c:	08003d33 	.word	0x08003d33
 8003ca0:	08003d33 	.word	0x08003d33
 8003ca4:	08003d33 	.word	0x08003d33
 8003ca8:	08003d33 	.word	0x08003d33
 8003cac:	08003d33 	.word	0x08003d33
 8003cb0:	08003d33 	.word	0x08003d33
 8003cb4:	08003d33 	.word	0x08003d33
 8003cb8:	08003d33 	.word	0x08003d33
 8003cbc:	08003d33 	.word	0x08003d33
 8003cc0:	08003d33 	.word	0x08003d33
 8003cc4:	08003d33 	.word	0x08003d33
 8003cc8:	08003ce1 	.word	0x08003ce1
 8003ccc:	08003cf5 	.word	0x08003cf5
 8003cd0:	4a79      	ldr	r2, [pc, #484]	; (8003eb8 <HAL_GPIO_Init+0x2b4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003cd6:	e02c      	b.n	8003d32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	623b      	str	r3, [r7, #32]
          break;
 8003cde:	e029      	b.n	8003d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	623b      	str	r3, [r7, #32]
          break;
 8003ce8:	e024      	b.n	8003d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	623b      	str	r3, [r7, #32]
          break;
 8003cf2:	e01f      	b.n	8003d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	623b      	str	r3, [r7, #32]
          break;
 8003cfc:	e01a      	b.n	8003d34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d06:	2304      	movs	r3, #4
 8003d08:	623b      	str	r3, [r7, #32]
          break;
 8003d0a:	e013      	b.n	8003d34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d105      	bne.n	8003d20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d14:	2308      	movs	r3, #8
 8003d16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	611a      	str	r2, [r3, #16]
          break;
 8003d1e:	e009      	b.n	8003d34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d20:	2308      	movs	r3, #8
 8003d22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	615a      	str	r2, [r3, #20]
          break;
 8003d2a:	e003      	b.n	8003d34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	623b      	str	r3, [r7, #32]
          break;
 8003d30:	e000      	b.n	8003d34 <HAL_GPIO_Init+0x130>
          break;
 8003d32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2bff      	cmp	r3, #255	; 0xff
 8003d38:	d801      	bhi.n	8003d3e <HAL_GPIO_Init+0x13a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	e001      	b.n	8003d42 <HAL_GPIO_Init+0x13e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3304      	adds	r3, #4
 8003d42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2bff      	cmp	r3, #255	; 0xff
 8003d48:	d802      	bhi.n	8003d50 <HAL_GPIO_Init+0x14c>
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	e002      	b.n	8003d56 <HAL_GPIO_Init+0x152>
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	3b08      	subs	r3, #8
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	210f      	movs	r1, #15
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	401a      	ands	r2, r3
 8003d68:	6a39      	ldr	r1, [r7, #32]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d70:	431a      	orrs	r2, r3
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80b1 	beq.w	8003ee6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d84:	4b4d      	ldr	r3, [pc, #308]	; (8003ebc <HAL_GPIO_Init+0x2b8>)
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	4a4c      	ldr	r2, [pc, #304]	; (8003ebc <HAL_GPIO_Init+0x2b8>)
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6193      	str	r3, [r2, #24]
 8003d90:	4b4a      	ldr	r3, [pc, #296]	; (8003ebc <HAL_GPIO_Init+0x2b8>)
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d9c:	4a48      	ldr	r2, [pc, #288]	; (8003ec0 <HAL_GPIO_Init+0x2bc>)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	089b      	lsrs	r3, r3, #2
 8003da2:	3302      	adds	r3, #2
 8003da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	220f      	movs	r2, #15
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a40      	ldr	r2, [pc, #256]	; (8003ec4 <HAL_GPIO_Init+0x2c0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d013      	beq.n	8003df0 <HAL_GPIO_Init+0x1ec>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a3f      	ldr	r2, [pc, #252]	; (8003ec8 <HAL_GPIO_Init+0x2c4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00d      	beq.n	8003dec <HAL_GPIO_Init+0x1e8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a3e      	ldr	r2, [pc, #248]	; (8003ecc <HAL_GPIO_Init+0x2c8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d007      	beq.n	8003de8 <HAL_GPIO_Init+0x1e4>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a3d      	ldr	r2, [pc, #244]	; (8003ed0 <HAL_GPIO_Init+0x2cc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d101      	bne.n	8003de4 <HAL_GPIO_Init+0x1e0>
 8003de0:	2303      	movs	r3, #3
 8003de2:	e006      	b.n	8003df2 <HAL_GPIO_Init+0x1ee>
 8003de4:	2304      	movs	r3, #4
 8003de6:	e004      	b.n	8003df2 <HAL_GPIO_Init+0x1ee>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e002      	b.n	8003df2 <HAL_GPIO_Init+0x1ee>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_GPIO_Init+0x1ee>
 8003df0:	2300      	movs	r3, #0
 8003df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df4:	f002 0203 	and.w	r2, r2, #3
 8003df8:	0092      	lsls	r2, r2, #2
 8003dfa:	4093      	lsls	r3, r2
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e02:	492f      	ldr	r1, [pc, #188]	; (8003ec0 <HAL_GPIO_Init+0x2bc>)
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	3302      	adds	r3, #2
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d006      	beq.n	8003e2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e1c:	4b2d      	ldr	r3, [pc, #180]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	492c      	ldr	r1, [pc, #176]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	600b      	str	r3, [r1, #0]
 8003e28:	e006      	b.n	8003e38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	4928      	ldr	r1, [pc, #160]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d006      	beq.n	8003e52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e44:	4b23      	ldr	r3, [pc, #140]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	4922      	ldr	r1, [pc, #136]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
 8003e50:	e006      	b.n	8003e60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e52:	4b20      	ldr	r3, [pc, #128]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	491e      	ldr	r1, [pc, #120]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d006      	beq.n	8003e7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	4918      	ldr	r1, [pc, #96]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	608b      	str	r3, [r1, #8]
 8003e78:	e006      	b.n	8003e88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e7a:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	4914      	ldr	r1, [pc, #80]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d021      	beq.n	8003ed8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e94:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	490e      	ldr	r1, [pc, #56]	; (8003ed4 <HAL_GPIO_Init+0x2d0>)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60cb      	str	r3, [r1, #12]
 8003ea0:	e021      	b.n	8003ee6 <HAL_GPIO_Init+0x2e2>
 8003ea2:	bf00      	nop
 8003ea4:	10320000 	.word	0x10320000
 8003ea8:	10310000 	.word	0x10310000
 8003eac:	10220000 	.word	0x10220000
 8003eb0:	10210000 	.word	0x10210000
 8003eb4:	10120000 	.word	0x10120000
 8003eb8:	10110000 	.word	0x10110000
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40010800 	.word	0x40010800
 8003ec8:	40010c00 	.word	0x40010c00
 8003ecc:	40011000 	.word	0x40011000
 8003ed0:	40011400 	.word	0x40011400
 8003ed4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_GPIO_Init+0x304>)
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	4909      	ldr	r1, [pc, #36]	; (8003f08 <HAL_GPIO_Init+0x304>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	3301      	adds	r3, #1
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f47f ae8e 	bne.w	8003c18 <HAL_GPIO_Init+0x14>
  }
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	372c      	adds	r7, #44	; 0x2c
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	40010400 	.word	0x40010400

08003f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	887b      	ldrh	r3, [r7, #2]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
 8003f28:	e001      	b.n	8003f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr

08003f3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	460b      	mov	r3, r1
 8003f44:	807b      	strh	r3, [r7, #2]
 8003f46:	4613      	mov	r3, r2
 8003f48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f4a:	787b      	ldrb	r3, [r7, #1]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f50:	887a      	ldrh	r2, [r7, #2]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f56:	e003      	b.n	8003f60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f58:	887b      	ldrh	r3, [r7, #2]
 8003f5a:	041a      	lsls	r2, r3, #16
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	611a      	str	r2, [r3, #16]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr
	...

08003f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e12b      	b.n	80041d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fa56 	bl	8003444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2224      	movs	r2, #36	; 0x24
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fd0:	f003 f842 	bl	8007058 <HAL_RCC_GetPCLK1Freq>
 8003fd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4a81      	ldr	r2, [pc, #516]	; (80041e0 <HAL_I2C_Init+0x274>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d807      	bhi.n	8003ff0 <HAL_I2C_Init+0x84>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a80      	ldr	r2, [pc, #512]	; (80041e4 <HAL_I2C_Init+0x278>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	bf94      	ite	ls
 8003fe8:	2301      	movls	r3, #1
 8003fea:	2300      	movhi	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e006      	b.n	8003ffe <HAL_I2C_Init+0x92>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a7d      	ldr	r2, [pc, #500]	; (80041e8 <HAL_I2C_Init+0x27c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	bf94      	ite	ls
 8003ff8:	2301      	movls	r3, #1
 8003ffa:	2300      	movhi	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e0e7      	b.n	80041d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4a78      	ldr	r2, [pc, #480]	; (80041ec <HAL_I2C_Init+0x280>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	0c9b      	lsrs	r3, r3, #18
 8004010:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4a6a      	ldr	r2, [pc, #424]	; (80041e0 <HAL_I2C_Init+0x274>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d802      	bhi.n	8004040 <HAL_I2C_Init+0xd4>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	3301      	adds	r3, #1
 800403e:	e009      	b.n	8004054 <HAL_I2C_Init+0xe8>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004046:	fb02 f303 	mul.w	r3, r2, r3
 800404a:	4a69      	ldr	r2, [pc, #420]	; (80041f0 <HAL_I2C_Init+0x284>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	099b      	lsrs	r3, r3, #6
 8004052:	3301      	adds	r3, #1
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	430b      	orrs	r3, r1
 800405a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004066:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	495c      	ldr	r1, [pc, #368]	; (80041e0 <HAL_I2C_Init+0x274>)
 8004070:	428b      	cmp	r3, r1
 8004072:	d819      	bhi.n	80040a8 <HAL_I2C_Init+0x13c>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1e59      	subs	r1, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004082:	1c59      	adds	r1, r3, #1
 8004084:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004088:	400b      	ands	r3, r1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_I2C_Init+0x138>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1e59      	subs	r1, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fbb1 f3f3 	udiv	r3, r1, r3
 800409c:	3301      	adds	r3, #1
 800409e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a2:	e051      	b.n	8004148 <HAL_I2C_Init+0x1dc>
 80040a4:	2304      	movs	r3, #4
 80040a6:	e04f      	b.n	8004148 <HAL_I2C_Init+0x1dc>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d111      	bne.n	80040d4 <HAL_I2C_Init+0x168>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1e58      	subs	r0, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6859      	ldr	r1, [r3, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	440b      	add	r3, r1
 80040be:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c2:	3301      	adds	r3, #1
 80040c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	e012      	b.n	80040fa <HAL_I2C_Init+0x18e>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1e58      	subs	r0, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6859      	ldr	r1, [r3, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	0099      	lsls	r1, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ea:	3301      	adds	r3, #1
 80040ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_I2C_Init+0x196>
 80040fe:	2301      	movs	r3, #1
 8004100:	e022      	b.n	8004148 <HAL_I2C_Init+0x1dc>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10e      	bne.n	8004128 <HAL_I2C_Init+0x1bc>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1e58      	subs	r0, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6859      	ldr	r1, [r3, #4]
 8004112:	460b      	mov	r3, r1
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	440b      	add	r3, r1
 8004118:	fbb0 f3f3 	udiv	r3, r0, r3
 800411c:	3301      	adds	r3, #1
 800411e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004126:	e00f      	b.n	8004148 <HAL_I2C_Init+0x1dc>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1e58      	subs	r0, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	0099      	lsls	r1, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	fbb0 f3f3 	udiv	r3, r0, r3
 800413e:	3301      	adds	r3, #1
 8004140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	6809      	ldr	r1, [r1, #0]
 800414c:	4313      	orrs	r3, r2
 800414e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004176:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6911      	ldr	r1, [r2, #16]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68d2      	ldr	r2, [r2, #12]
 8004182:	4311      	orrs	r1, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	430b      	orrs	r3, r1
 800418a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	000186a0 	.word	0x000186a0
 80041e4:	001e847f 	.word	0x001e847f
 80041e8:	003d08ff 	.word	0x003d08ff
 80041ec:	431bde83 	.word	0x431bde83
 80041f0:	10624dd3 	.word	0x10624dd3

080041f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	461a      	mov	r2, r3
 8004200:	460b      	mov	r3, r1
 8004202:	817b      	strh	r3, [r7, #10]
 8004204:	4613      	mov	r3, r2
 8004206:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004208:	f7ff fb3e 	bl	8003888 <HAL_GetTick>
 800420c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b20      	cmp	r3, #32
 8004218:	f040 80e0 	bne.w	80043dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	2319      	movs	r3, #25
 8004222:	2201      	movs	r2, #1
 8004224:	4970      	ldr	r1, [pc, #448]	; (80043e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f002 f91a 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004232:	2302      	movs	r3, #2
 8004234:	e0d3      	b.n	80043de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_I2C_Master_Transmit+0x50>
 8004240:	2302      	movs	r3, #2
 8004242:	e0cc      	b.n	80043de <HAL_I2C_Master_Transmit+0x1ea>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d007      	beq.n	800426a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004278:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2221      	movs	r2, #33	; 0x21
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2210      	movs	r2, #16
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	893a      	ldrh	r2, [r7, #8]
 800429a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4a50      	ldr	r2, [pc, #320]	; (80043ec <HAL_I2C_Master_Transmit+0x1f8>)
 80042aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042ac:	8979      	ldrh	r1, [r7, #10]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	6a3a      	ldr	r2, [r7, #32]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f001 fedc 	bl	8006070 <I2C_MasterRequestWrite>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e08d      	b.n	80043de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c2:	2300      	movs	r3, #0
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042d8:	e066      	b.n	80043a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	6a39      	ldr	r1, [r7, #32]
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f002 f994 	bl	800660c <I2C_WaitOnTXEFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d107      	bne.n	8004302 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004300:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e06b      	b.n	80043de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b04      	cmp	r3, #4
 8004342:	d11b      	bne.n	800437c <HAL_I2C_Master_Transmit+0x188>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	d017      	beq.n	800437c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	6a39      	ldr	r1, [r7, #32]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f002 f984 	bl	800668e <I2C_WaitOnBTFFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00d      	beq.n	80043a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	2b04      	cmp	r3, #4
 8004392:	d107      	bne.n	80043a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e01a      	b.n	80043de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d194      	bne.n	80042da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	00100002 	.word	0x00100002
 80043ec:	ffff0000 	.word	0xffff0000

080043f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08c      	sub	sp, #48	; 0x30
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	607a      	str	r2, [r7, #4]
 80043fa:	461a      	mov	r2, r3
 80043fc:	460b      	mov	r3, r1
 80043fe:	817b      	strh	r3, [r7, #10]
 8004400:	4613      	mov	r3, r2
 8004402:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004408:	f7ff fa3e 	bl	8003888 <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b20      	cmp	r3, #32
 8004418:	f040 823f 	bne.w	800489a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2319      	movs	r3, #25
 8004422:	2201      	movs	r2, #1
 8004424:	497f      	ldr	r1, [pc, #508]	; (8004624 <HAL_I2C_Master_Receive+0x234>)
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f002 f81a 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004432:	2302      	movs	r3, #2
 8004434:	e232      	b.n	800489c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_I2C_Master_Receive+0x54>
 8004440:	2302      	movs	r3, #2
 8004442:	e22b      	b.n	800489c <HAL_I2C_Master_Receive+0x4ac>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b01      	cmp	r3, #1
 8004458:	d007      	beq.n	800446a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0201 	orr.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004478:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2222      	movs	r2, #34	; 0x22
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2210      	movs	r2, #16
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	893a      	ldrh	r2, [r7, #8]
 800449a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4a5f      	ldr	r2, [pc, #380]	; (8004628 <HAL_I2C_Master_Receive+0x238>)
 80044aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044ac:	8979      	ldrh	r1, [r7, #10]
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f001 fe5e 	bl	8006174 <I2C_MasterRequestRead>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e1ec      	b.n	800489c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d113      	bne.n	80044f2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	61fb      	str	r3, [r7, #28]
 80044de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e1c0      	b.n	8004874 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d11e      	bne.n	8004538 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004508:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800450a:	b672      	cpsid	i
}
 800450c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450e:	2300      	movs	r3, #0
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004532:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004534:	b662      	cpsie	i
}
 8004536:	e035      	b.n	80045a4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453c:	2b02      	cmp	r3, #2
 800453e:	d11e      	bne.n	800457e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004550:	b672      	cpsid	i
}
 8004552:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800457a:	b662      	cpsie	i
}
 800457c:	e012      	b.n	80045a4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800458c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458e:	2300      	movs	r3, #0
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80045a4:	e166      	b.n	8004874 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	f200 811f 	bhi.w	80047ee <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d123      	bne.n	8004600 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f002 f8d9 	bl	8006774 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e167      	b.n	800489c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045fe:	e139      	b.n	8004874 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004604:	2b02      	cmp	r3, #2
 8004606:	d152      	bne.n	80046ae <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	2200      	movs	r2, #0
 8004610:	4906      	ldr	r1, [pc, #24]	; (800462c <HAL_I2C_Master_Receive+0x23c>)
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f001 ff24 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e13c      	b.n	800489c <HAL_I2C_Master_Receive+0x4ac>
 8004622:	bf00      	nop
 8004624:	00100002 	.word	0x00100002
 8004628:	ffff0000 	.word	0xffff0000
 800462c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004630:	b672      	cpsid	i
}
 8004632:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004676:	b662      	cpsie	i
}
 8004678:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046ac:	e0e2      	b.n	8004874 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	2200      	movs	r2, #0
 80046b6:	497b      	ldr	r1, [pc, #492]	; (80048a4 <HAL_I2C_Master_Receive+0x4b4>)
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f001 fed1 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0e9      	b.n	800489c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046d8:	b672      	cpsid	i
}
 80046da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800470e:	4b66      	ldr	r3, [pc, #408]	; (80048a8 <HAL_I2C_Master_Receive+0x4b8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	08db      	lsrs	r3, r3, #3
 8004714:	4a65      	ldr	r2, [pc, #404]	; (80048ac <HAL_I2C_Master_Receive+0x4bc>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	0a1a      	lsrs	r2, r3, #8
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	00da      	lsls	r2, r3, #3
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	3b01      	subs	r3, #1
 800472c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d118      	bne.n	8004766 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f043 0220 	orr.w	r2, r3, #32
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004756:	b662      	cpsie	i
}
 8004758:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e09a      	b.n	800489c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d1d9      	bne.n	8004728 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047b6:	b662      	cpsie	i
}
 80047b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ec:	e042      	b.n	8004874 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f001 ffbe 	bl	8006774 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e04c      	b.n	800489c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b04      	cmp	r3, #4
 8004840:	d118      	bne.n	8004874 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	f47f ae94 	bne.w	80045a6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e000      	b.n	800489c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800489a:	2302      	movs	r3, #2
  }
}
 800489c:	4618      	mov	r0, r3
 800489e:	3728      	adds	r7, #40	; 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	00010004 	.word	0x00010004
 80048a8:	20000064 	.word	0x20000064
 80048ac:	14f8b589 	.word	0x14f8b589

080048b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d003      	beq.n	80048e8 <HAL_I2C_EV_IRQHandler+0x38>
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	f040 80c1 	bne.w	8004a6a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10d      	bne.n	800491e <HAL_I2C_EV_IRQHandler+0x6e>
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004908:	d003      	beq.n	8004912 <HAL_I2C_EV_IRQHandler+0x62>
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004910:	d101      	bne.n	8004916 <HAL_I2C_EV_IRQHandler+0x66>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <HAL_I2C_EV_IRQHandler+0x68>
 8004916:	2300      	movs	r3, #0
 8004918:	2b01      	cmp	r3, #1
 800491a:	f000 8132 	beq.w	8004b82 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00c      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0x92>
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	0a5b      	lsrs	r3, r3, #9
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d006      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f001 ffa1 	bl	800687c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fd77 	bl	800542e <I2C_Master_SB>
 8004940:	e092      	b.n	8004a68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	08db      	lsrs	r3, r3, #3
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_I2C_EV_IRQHandler+0xb2>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	0a5b      	lsrs	r3, r3, #9
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fdec 	bl	8005538 <I2C_Master_ADD10>
 8004960:	e082      	b.n	8004a68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_I2C_EV_IRQHandler+0xd2>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	0a5b      	lsrs	r3, r3, #9
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fe05 	bl	800558a <I2C_Master_ADDR>
 8004980:	e072      	b.n	8004a68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d03b      	beq.n	8004a06 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800499c:	f000 80f3 	beq.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	09db      	lsrs	r3, r3, #7
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00f      	beq.n	80049cc <HAL_I2C_EV_IRQHandler+0x11c>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	0a9b      	lsrs	r3, r3, #10
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d009      	beq.n	80049cc <HAL_I2C_EV_IRQHandler+0x11c>
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f9f1 	bl	8004dac <I2C_MasterTransmit_TXE>
 80049ca:	e04d      	b.n	8004a68 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80d6 	beq.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	0a5b      	lsrs	r3, r3, #9
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80cf 	beq.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80049e8:	7bbb      	ldrb	r3, [r7, #14]
 80049ea:	2b21      	cmp	r3, #33	; 0x21
 80049ec:	d103      	bne.n	80049f6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fa78 	bl	8004ee4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049f4:	e0c7      	b.n	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	f040 80c4 	bne.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fae6 	bl	8004fd0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a04:	e0bf      	b.n	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a14:	f000 80b7 	beq.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	099b      	lsrs	r3, r3, #6
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00f      	beq.n	8004a44 <HAL_I2C_EV_IRQHandler+0x194>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	0a9b      	lsrs	r3, r3, #10
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d009      	beq.n	8004a44 <HAL_I2C_EV_IRQHandler+0x194>
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	089b      	lsrs	r3, r3, #2
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d103      	bne.n	8004a44 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fb5b 	bl	80050f8 <I2C_MasterReceive_RXNE>
 8004a42:	e011      	b.n	8004a68 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	089b      	lsrs	r3, r3, #2
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 809a 	beq.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	0a5b      	lsrs	r3, r3, #9
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8093 	beq.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fbfa 	bl	800525a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a66:	e08e      	b.n	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a68:	e08d      	b.n	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d004      	beq.n	8004a7c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	e007      	b.n	8004a8c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d012      	beq.n	8004abe <HAL_I2C_EV_IRQHandler+0x20e>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	0a5b      	lsrs	r3, r3, #9
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00c      	beq.n	8004abe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004ab4:	69b9      	ldr	r1, [r7, #24]
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 ffbe 	bl	8005a38 <I2C_Slave_ADDR>
 8004abc:	e066      	b.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_I2C_EV_IRQHandler+0x22e>
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	0a5b      	lsrs	r3, r3, #9
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fff8 	bl	8005acc <I2C_Slave_STOPF>
 8004adc:	e056      	b.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ade:	7bbb      	ldrb	r3, [r7, #14]
 8004ae0:	2b21      	cmp	r3, #33	; 0x21
 8004ae2:	d002      	beq.n	8004aea <HAL_I2C_EV_IRQHandler+0x23a>
 8004ae4:	7bbb      	ldrb	r3, [r7, #14]
 8004ae6:	2b29      	cmp	r3, #41	; 0x29
 8004ae8:	d125      	bne.n	8004b36 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	09db      	lsrs	r3, r3, #7
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00f      	beq.n	8004b16 <HAL_I2C_EV_IRQHandler+0x266>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	0a9b      	lsrs	r3, r3, #10
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_I2C_EV_IRQHandler+0x266>
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	089b      	lsrs	r3, r3, #2
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d103      	bne.n	8004b16 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fed6 	bl	80058c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b14:	e039      	b.n	8004b8a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	089b      	lsrs	r3, r3, #2
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d033      	beq.n	8004b8a <HAL_I2C_EV_IRQHandler+0x2da>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	0a5b      	lsrs	r3, r3, #9
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d02d      	beq.n	8004b8a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 ff03 	bl	800593a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b34:	e029      	b.n	8004b8a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	099b      	lsrs	r3, r3, #6
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00f      	beq.n	8004b62 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	0a9b      	lsrs	r3, r3, #10
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	089b      	lsrs	r3, r3, #2
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d103      	bne.n	8004b62 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 ff0d 	bl	800597a <I2C_SlaveReceive_RXNE>
 8004b60:	e014      	b.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	089b      	lsrs	r3, r3, #2
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00e      	beq.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	0a5b      	lsrs	r3, r3, #9
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 ff3b 	bl	80059f6 <I2C_SlaveReceive_BTF>
 8004b80:	e004      	b.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004b82:	bf00      	nop
 8004b84:	e002      	b.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b8a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b08a      	sub	sp, #40	; 0x28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d016      	beq.n	8004bf0 <HAL_I2C_ER_IRQHandler+0x5e>
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	0a1b      	lsrs	r3, r3, #8
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d010      	beq.n	8004bf0 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bde:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bee:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	0a5b      	lsrs	r3, r3, #9
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00e      	beq.n	8004c1a <HAL_I2C_ER_IRQHandler+0x88>
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	0a1b      	lsrs	r3, r3, #8
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	f043 0302 	orr.w	r3, r3, #2
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004c18:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	0a9b      	lsrs	r3, r3, #10
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d03f      	beq.n	8004ca6 <HAL_I2C_ER_IRQHandler+0x114>
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	0a1b      	lsrs	r3, r3, #8
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d039      	beq.n	8004ca6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004c32:	7efb      	ldrb	r3, [r7, #27]
 8004c34:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c44:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004c4c:	7ebb      	ldrb	r3, [r7, #26]
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d112      	bne.n	8004c78 <HAL_I2C_ER_IRQHandler+0xe6>
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10f      	bne.n	8004c78 <HAL_I2C_ER_IRQHandler+0xe6>
 8004c58:	7cfb      	ldrb	r3, [r7, #19]
 8004c5a:	2b21      	cmp	r3, #33	; 0x21
 8004c5c:	d008      	beq.n	8004c70 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004c5e:	7cfb      	ldrb	r3, [r7, #19]
 8004c60:	2b29      	cmp	r3, #41	; 0x29
 8004c62:	d005      	beq.n	8004c70 <HAL_I2C_ER_IRQHandler+0xde>
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	2b28      	cmp	r3, #40	; 0x28
 8004c68:	d106      	bne.n	8004c78 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b21      	cmp	r3, #33	; 0x21
 8004c6e:	d103      	bne.n	8004c78 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f001 f85b 	bl	8005d2c <I2C_Slave_AF>
 8004c76:	e016      	b.n	8004ca6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c80:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	f043 0304 	orr.w	r3, r3, #4
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c8a:	7efb      	ldrb	r3, [r7, #27]
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d002      	beq.n	8004c96 <HAL_I2C_ER_IRQHandler+0x104>
 8004c90:	7efb      	ldrb	r3, [r7, #27]
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d107      	bne.n	8004ca6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	0adb      	lsrs	r3, r3, #11
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00e      	beq.n	8004cd0 <HAL_I2C_ER_IRQHandler+0x13e>
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	0a1b      	lsrs	r3, r3, #8
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	f043 0308 	orr.w	r3, r3, #8
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004cce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d008      	beq.n	8004ce8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f001 f892 	bl	8005e0c <I2C_ITError>
  }
}
 8004ce8:	bf00      	nop
 8004cea:	3728      	adds	r7, #40	; 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr

08004d02 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr

08004d26 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
 8004d44:	4613      	mov	r3, r2
 8004d46:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d150      	bne.n	8004e74 <I2C_MasterTransmit_TXE+0xc8>
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b21      	cmp	r3, #33	; 0x21
 8004dd6:	d14d      	bne.n	8004e74 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d01d      	beq.n	8004e1a <I2C_MasterTransmit_TXE+0x6e>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d01a      	beq.n	8004e1a <I2C_MasterTransmit_TXE+0x6e>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dea:	d016      	beq.n	8004e1a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dfa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2211      	movs	r2, #17
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ff6c 	bl	8004cf0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e18:	e060      	b.n	8004edc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e28:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e38:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d107      	bne.n	8004e64 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ff81 	bl	8004d64 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e62:	e03b      	b.n	8004edc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff ff3f 	bl	8004cf0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e72:	e033      	b.n	8004edc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b21      	cmp	r3, #33	; 0x21
 8004e78:	d005      	beq.n	8004e86 <I2C_MasterTransmit_TXE+0xda>
 8004e7a:	7bbb      	ldrb	r3, [r7, #14]
 8004e7c:	2b40      	cmp	r3, #64	; 0x40
 8004e7e:	d12d      	bne.n	8004edc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b22      	cmp	r3, #34	; 0x22
 8004e84:	d12a      	bne.n	8004edc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ea0:	e01c      	b.n	8004edc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b40      	cmp	r3, #64	; 0x40
 8004eac:	d103      	bne.n	8004eb6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f88e 	bl	8004fd0 <I2C_MemoryTransmit_TXE_BTF>
}
 8004eb4:	e012      	b.n	8004edc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	781a      	ldrb	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004eda:	e7ff      	b.n	8004edc <I2C_MasterTransmit_TXE+0x130>
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b21      	cmp	r3, #33	; 0x21
 8004efc:	d164      	bne.n	8004fc8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d012      	beq.n	8004f2e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004f2c:	e04c      	b.n	8004fc8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d01d      	beq.n	8004f70 <I2C_MasterTransmit_BTF+0x8c>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d01a      	beq.n	8004f70 <I2C_MasterTransmit_BTF+0x8c>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f40:	d016      	beq.n	8004f70 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f50:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2211      	movs	r2, #17
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff fec1 	bl	8004cf0 <HAL_I2C_MasterTxCpltCallback>
}
 8004f6e:	e02b      	b.n	8004fc8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f7e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f8e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b40      	cmp	r3, #64	; 0x40
 8004fa8:	d107      	bne.n	8004fba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff fed6 	bl	8004d64 <HAL_I2C_MemTxCpltCallback>
}
 8004fb8:	e006      	b.n	8004fc8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fe94 	bl	8004cf0 <HAL_I2C_MasterTxCpltCallback>
}
 8004fc8:	bf00      	nop
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fde:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d11d      	bne.n	8005024 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d10b      	bne.n	8005008 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005000:	1c9a      	adds	r2, r3, #2
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005006:	e073      	b.n	80050f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500c:	b29b      	uxth	r3, r3
 800500e:	121b      	asrs	r3, r3, #8
 8005010:	b2da      	uxtb	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005022:	e065      	b.n	80050f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10b      	bne.n	8005044 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005030:	b2da      	uxtb	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005042:	e055      	b.n	80050f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005048:	2b02      	cmp	r3, #2
 800504a:	d151      	bne.n	80050f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b22      	cmp	r3, #34	; 0x22
 8005050:	d10d      	bne.n	800506e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005060:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800506c:	e040      	b.n	80050f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d015      	beq.n	80050a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b21      	cmp	r3, #33	; 0x21
 800507c:	d112      	bne.n	80050a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	781a      	ldrb	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050a2:	e025      	b.n	80050f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d120      	bne.n	80050f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	2b21      	cmp	r3, #33	; 0x21
 80050b2:	d11d      	bne.n	80050f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050c2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff fe3a 	bl	8004d64 <HAL_I2C_MemTxCpltCallback>
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b22      	cmp	r3, #34	; 0x22
 800510a:	f040 80a2 	bne.w	8005252 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005112:	b29b      	uxth	r3, r3
 8005114:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b03      	cmp	r3, #3
 800511a:	d921      	bls.n	8005160 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b03      	cmp	r3, #3
 800514a:	f040 8082 	bne.w	8005252 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800515e:	e078      	b.n	8005252 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	2b02      	cmp	r3, #2
 8005166:	d074      	beq.n	8005252 <I2C_MasterReceive_RXNE+0x15a>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d002      	beq.n	8005174 <I2C_MasterReceive_RXNE+0x7c>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d16e      	bne.n	8005252 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f001 facb 	bl	8006710 <I2C_WaitOnSTOPRequestThroughIT>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d142      	bne.n	8005206 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800519e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d10a      	bne.n	80051f0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff fdc4 	bl	8004d76 <HAL_I2C_MemRxCpltCallback>
}
 80051ee:	e030      	b.n	8005252 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2212      	movs	r2, #18
 80051fc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fd7f 	bl	8004d02 <HAL_I2C_MasterRxCpltCallback>
}
 8005204:	e025      	b.n	8005252 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005214:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fd9b 	bl	8004d88 <HAL_I2C_ErrorCallback>
}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b04      	cmp	r3, #4
 8005270:	d11b      	bne.n	80052aa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005280:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80052a8:	e0bd      	b.n	8005426 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d129      	bne.n	8005308 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d00a      	beq.n	80052e0 <I2C_MasterReceive_BTF+0x86>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d007      	beq.n	80052e0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005306:	e08e      	b.n	8005426 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d176      	bne.n	8005400 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d002      	beq.n	800531e <I2C_MasterReceive_BTF+0xc4>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b10      	cmp	r3, #16
 800531c:	d108      	bne.n	8005330 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e019      	b.n	8005364 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d002      	beq.n	800533c <I2C_MasterReceive_BTF+0xe2>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d108      	bne.n	800534e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e00a      	b.n	8005364 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b10      	cmp	r3, #16
 8005352:	d007      	beq.n	8005364 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005362:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691a      	ldr	r2, [r3, #16]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80053be:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d10a      	bne.n	80053ea <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7ff fcc7 	bl	8004d76 <HAL_I2C_MemRxCpltCallback>
}
 80053e8:	e01d      	b.n	8005426 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2212      	movs	r2, #18
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff fc82 	bl	8004d02 <HAL_I2C_MasterRxCpltCallback>
}
 80053fe:	e012      	b.n	8005426 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b40      	cmp	r3, #64	; 0x40
 8005440:	d117      	bne.n	8005472 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	b2db      	uxtb	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800545a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800545c:	e067      	b.n	800552e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	b2da      	uxtb	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	611a      	str	r2, [r3, #16]
}
 8005470:	e05d      	b.n	800552e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800547a:	d133      	bne.n	80054e4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b21      	cmp	r3, #33	; 0x21
 8005486:	d109      	bne.n	800549c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548c:	b2db      	uxtb	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005498:	611a      	str	r2, [r3, #16]
 800549a:	e008      	b.n	80054ae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d004      	beq.n	80054c0 <I2C_Master_SB+0x92>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d108      	bne.n	80054d2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d032      	beq.n	800552e <I2C_Master_SB+0x100>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d02d      	beq.n	800552e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e0:	605a      	str	r2, [r3, #4]
}
 80054e2:	e024      	b.n	800552e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10e      	bne.n	800550a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	11db      	asrs	r3, r3, #7
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	f003 0306 	and.w	r3, r3, #6
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	f063 030f 	orn	r3, r3, #15
 8005500:	b2da      	uxtb	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	611a      	str	r2, [r3, #16]
}
 8005508:	e011      	b.n	800552e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550e:	2b01      	cmp	r3, #1
 8005510:	d10d      	bne.n	800552e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	b29b      	uxth	r3, r3
 8005518:	11db      	asrs	r3, r3, #7
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f003 0306 	and.w	r3, r3, #6
 8005520:	b2db      	uxtb	r3, r3
 8005522:	f063 030e 	orn	r3, r3, #14
 8005526:	b2da      	uxtb	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	611a      	str	r2, [r3, #16]
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005544:	b2da      	uxtb	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005550:	2b00      	cmp	r3, #0
 8005552:	d004      	beq.n	800555e <I2C_Master_ADD10+0x26>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	2b00      	cmp	r3, #0
 800555c:	d108      	bne.n	8005570 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00c      	beq.n	8005580 <I2C_Master_ADD10+0x48>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800557e:	605a      	str	r2, [r3, #4]
  }
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr

0800558a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800558a:	b480      	push	{r7}
 800558c:	b091      	sub	sp, #68	; 0x44
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005598:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b22      	cmp	r3, #34	; 0x22
 80055b2:	f040 8174 	bne.w	800589e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10f      	bne.n	80055de <I2C_Master_ADDR+0x54>
 80055be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d10b      	bne.n	80055de <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c6:	2300      	movs	r3, #0
 80055c8:	633b      	str	r3, [r7, #48]	; 0x30
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	633b      	str	r3, [r7, #48]	; 0x30
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	633b      	str	r3, [r7, #48]	; 0x30
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	e16b      	b.n	80058b6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d11d      	bne.n	8005622 <I2C_Master_ADDR+0x98>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055ee:	d118      	bne.n	8005622 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f0:	2300      	movs	r3, #0
 80055f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005604:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005614:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	651a      	str	r2, [r3, #80]	; 0x50
 8005620:	e149      	b.n	80058b6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d113      	bne.n	8005654 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562c:	2300      	movs	r3, #0
 800562e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e120      	b.n	8005896 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b01      	cmp	r3, #1
 800565c:	f040 808a 	bne.w	8005774 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005666:	d137      	bne.n	80056d8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005676:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005686:	d113      	bne.n	80056b0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005696:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005698:	2300      	movs	r3, #0
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	e0f2      	b.n	8005896 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b0:	2300      	movs	r3, #0
 80056b2:	623b      	str	r3, [r7, #32]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	623b      	str	r3, [r7, #32]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	623b      	str	r3, [r7, #32]
 80056c4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	e0de      	b.n	8005896 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d02e      	beq.n	800573c <I2C_Master_ADDR+0x1b2>
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d02b      	beq.n	800573c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80056e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e6:	2b12      	cmp	r3, #18
 80056e8:	d102      	bne.n	80056f0 <I2C_Master_ADDR+0x166>
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d125      	bne.n	800573c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d00e      	beq.n	8005714 <I2C_Master_ADDR+0x18a>
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d00b      	beq.n	8005714 <I2C_Master_ADDR+0x18a>
 80056fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fe:	2b10      	cmp	r3, #16
 8005700:	d008      	beq.n	8005714 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	e007      	b.n	8005724 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005722:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005724:	2300      	movs	r3, #0
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	61fb      	str	r3, [r7, #28]
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	e0ac      	b.n	8005896 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800574a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574c:	2300      	movs	r3, #0
 800574e:	61bb      	str	r3, [r7, #24]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	e090      	b.n	8005896 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d158      	bne.n	8005830 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	2b04      	cmp	r3, #4
 8005782:	d021      	beq.n	80057c8 <I2C_Master_ADDR+0x23e>
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	2b02      	cmp	r3, #2
 8005788:	d01e      	beq.n	80057c8 <I2C_Master_ADDR+0x23e>
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	2b10      	cmp	r3, #16
 800578e:	d01b      	beq.n	80057c8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800579e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	e012      	b.n	80057ee <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d8:	2300      	movs	r3, #0
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	613b      	str	r3, [r7, #16]
 80057ec:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fc:	d14b      	bne.n	8005896 <I2C_Master_ADDR+0x30c>
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005804:	d00b      	beq.n	800581e <I2C_Master_ADDR+0x294>
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	2b01      	cmp	r3, #1
 800580a:	d008      	beq.n	800581e <I2C_Master_ADDR+0x294>
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	2b08      	cmp	r3, #8
 8005810:	d005      	beq.n	800581e <I2C_Master_ADDR+0x294>
 8005812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005814:	2b10      	cmp	r3, #16
 8005816:	d002      	beq.n	800581e <I2C_Master_ADDR+0x294>
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	2b20      	cmp	r3, #32
 800581c:	d13b      	bne.n	8005896 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800582c:	605a      	str	r2, [r3, #4]
 800582e:	e032      	b.n	8005896 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800583e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800584a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800584e:	d117      	bne.n	8005880 <I2C_Master_ADDR+0x2f6>
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005856:	d00b      	beq.n	8005870 <I2C_Master_ADDR+0x2e6>
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	2b01      	cmp	r3, #1
 800585c:	d008      	beq.n	8005870 <I2C_Master_ADDR+0x2e6>
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	2b08      	cmp	r3, #8
 8005862:	d005      	beq.n	8005870 <I2C_Master_ADDR+0x2e6>
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	2b10      	cmp	r3, #16
 8005868:	d002      	beq.n	8005870 <I2C_Master_ADDR+0x2e6>
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	2b20      	cmp	r3, #32
 800586e:	d107      	bne.n	8005880 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800587e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800589c:	e00b      	b.n	80058b6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800589e:	2300      	movs	r3, #0
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	68bb      	ldr	r3, [r7, #8]
}
 80058b4:	e7ff      	b.n	80058b6 <I2C_Master_ADDR+0x32c>
 80058b6:	bf00      	nop
 80058b8:	3744      	adds	r7, #68	; 0x44
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr

080058c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d02b      	beq.n	8005932 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	781a      	ldrb	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005902:	b29b      	uxth	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d114      	bne.n	8005932 <I2C_SlaveTransmit_TXE+0x72>
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b29      	cmp	r3, #41	; 0x29
 800590c:	d111      	bne.n	8005932 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2221      	movs	r2, #33	; 0x21
 8005922:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2228      	movs	r2, #40	; 0x28
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff f9f1 	bl	8004d14 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d011      	beq.n	8005970 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	781a      	ldrb	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr

0800597a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02c      	beq.n	80059ee <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d114      	bne.n	80059ee <I2C_SlaveReceive_RXNE+0x74>
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	2b2a      	cmp	r3, #42	; 0x2a
 80059c8:	d111      	bne.n	80059ee <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2222      	movs	r2, #34	; 0x22
 80059de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2228      	movs	r2, #40	; 0x28
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff f99c 	bl	8004d26 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d012      	beq.n	8005a2e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a52:	2b28      	cmp	r3, #40	; 0x28
 8005a54:	d127      	bne.n	8005aa6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a64:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	089b      	lsrs	r3, r3, #2
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005a72:	2301      	movs	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	09db      	lsrs	r3, r3, #7
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d103      	bne.n	8005a8a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	81bb      	strh	r3, [r7, #12]
 8005a88:	e002      	b.n	8005a90 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005a98:	89ba      	ldrh	r2, [r7, #12]
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff f94a 	bl	8004d38 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005aa4:	e00e      	b.n	8005ac4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	60bb      	str	r3, [r7, #8]
 8005aba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005ac4:	bf00      	nop
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ada:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005aea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005aec:	2300      	movs	r3, #0
 8005aee:	60bb      	str	r3, [r7, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	60bb      	str	r3, [r7, #8]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b18:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b28:	d172      	bne.n	8005c10 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	2b22      	cmp	r3, #34	; 0x22
 8005b2e:	d002      	beq.n	8005b36 <I2C_Slave_STOPF+0x6a>
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b2a      	cmp	r3, #42	; 0x2a
 8005b34:	d135      	bne.n	8005ba2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f043 0204 	orr.w	r2, r3, #4
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe f83c 	bl	8003bec <HAL_DMA_GetState>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d049      	beq.n	8005c0e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	4a69      	ldr	r2, [pc, #420]	; (8005d24 <I2C_Slave_STOPF+0x258>)
 8005b80:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fd ffba 	bl	8003b00 <HAL_DMA_Abort_IT>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d03d      	beq.n	8005c0e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ba0:	e035      	b.n	8005c0e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f043 0204 	orr.w	r2, r3, #4
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bd4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe f806 	bl	8003bec <HAL_DMA_GetState>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d014      	beq.n	8005c10 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bea:	4a4e      	ldr	r2, [pc, #312]	; (8005d24 <I2C_Slave_STOPF+0x258>)
 8005bec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fd ff84 	bl	8003b00 <HAL_DMA_Abort_IT>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d008      	beq.n	8005c10 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
 8005c0c:	e000      	b.n	8005c10 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c0e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d03e      	beq.n	8005c98 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d112      	bne.n	8005c4e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691a      	ldr	r2, [r3, #16]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c58:	2b40      	cmp	r3, #64	; 0x40
 8005c5a:	d112      	bne.n	8005c82 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	f043 0204 	orr.w	r2, r3, #4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f8b3 	bl	8005e0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005ca6:	e039      	b.n	8005d1c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	2b2a      	cmp	r3, #42	; 0x2a
 8005cac:	d109      	bne.n	8005cc2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2228      	movs	r2, #40	; 0x28
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff f832 	bl	8004d26 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b28      	cmp	r3, #40	; 0x28
 8005ccc:	d111      	bne.n	8005cf2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <I2C_Slave_STOPF+0x25c>)
 8005cd2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff f831 	bl	8004d52 <HAL_I2C_ListenCpltCallback>
}
 8005cf0:	e014      	b.n	8005d1c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	2b22      	cmp	r3, #34	; 0x22
 8005cf8:	d002      	beq.n	8005d00 <I2C_Slave_STOPF+0x234>
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	2b22      	cmp	r3, #34	; 0x22
 8005cfe:	d10d      	bne.n	8005d1c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff f805 	bl	8004d26 <HAL_I2C_SlaveRxCpltCallback>
}
 8005d1c:	bf00      	nop
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	08006311 	.word	0x08006311
 8005d28:	ffff0000 	.word	0xffff0000

08005d2c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d002      	beq.n	8005d4e <I2C_Slave_AF+0x22>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d129      	bne.n	8005da2 <I2C_Slave_AF+0x76>
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	2b28      	cmp	r3, #40	; 0x28
 8005d52:	d126      	bne.n	8005da2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a2c      	ldr	r2, [pc, #176]	; (8005e08 <I2C_Slave_AF+0xdc>)
 8005d58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d68:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d72:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d82:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fe ffd9 	bl	8004d52 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005da0:	e02e      	b.n	8005e00 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b21      	cmp	r3, #33	; 0x21
 8005da6:	d126      	bne.n	8005df6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <I2C_Slave_AF+0xdc>)
 8005dac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2221      	movs	r2, #33	; 0x21
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dd2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ddc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fe ff90 	bl	8004d14 <HAL_I2C_SlaveTxCpltCallback>
}
 8005df4:	e004      	b.n	8005e00 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dfe:	615a      	str	r2, [r3, #20]
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	ffff0000 	.word	0xffff0000

08005e0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	2b10      	cmp	r3, #16
 8005e28:	d002      	beq.n	8005e30 <I2C_ITError+0x24>
 8005e2a:	7bbb      	ldrb	r3, [r7, #14]
 8005e2c:	2b40      	cmp	r3, #64	; 0x40
 8005e2e:	d10a      	bne.n	8005e46 <I2C_ITError+0x3a>
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	2b22      	cmp	r3, #34	; 0x22
 8005e34:	d107      	bne.n	8005e46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e4c:	2b28      	cmp	r3, #40	; 0x28
 8005e4e:	d107      	bne.n	8005e60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2228      	movs	r2, #40	; 0x28
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e5e:	e015      	b.n	8005e8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e6e:	d00a      	beq.n	8005e86 <I2C_ITError+0x7a>
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	2b60      	cmp	r3, #96	; 0x60
 8005e74:	d007      	beq.n	8005e86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9a:	d161      	bne.n	8005f60 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eaa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d020      	beq.n	8005efa <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebc:	4a6a      	ldr	r2, [pc, #424]	; (8006068 <I2C_ITError+0x25c>)
 8005ebe:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fd fe1b 	bl	8003b00 <HAL_DMA_Abort_IT>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8089 	beq.w	8005fe4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	4798      	blx	r3
 8005ef8:	e074      	b.n	8005fe4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	4a5a      	ldr	r2, [pc, #360]	; (8006068 <I2C_ITError+0x25c>)
 8005f00:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fd fdfa 	bl	8003b00 <HAL_DMA_Abort_IT>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d068      	beq.n	8005fe4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1c:	2b40      	cmp	r3, #64	; 0x40
 8005f1e:	d10b      	bne.n	8005f38 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0201 	bic.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	4798      	blx	r3
 8005f5e:	e041      	b.n	8005fe4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b60      	cmp	r3, #96	; 0x60
 8005f6a:	d125      	bne.n	8005fb8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	d10b      	bne.n	8005fa0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7fe fef2 	bl	8004d9a <HAL_I2C_AbortCpltCallback>
 8005fb6:	e015      	b.n	8005fe4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc2:	2b40      	cmp	r3, #64	; 0x40
 8005fc4:	d10b      	bne.n	8005fde <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fe fed2 	bl	8004d88 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10e      	bne.n	8006012 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006004:	2b00      	cmp	r3, #0
 8006006:	d104      	bne.n	8006012 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006020:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006028:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	2b04      	cmp	r3, #4
 8006034:	d113      	bne.n	800605e <I2C_ITError+0x252>
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	2b28      	cmp	r3, #40	; 0x28
 800603a:	d110      	bne.n	800605e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a0b      	ldr	r2, [pc, #44]	; (800606c <I2C_ITError+0x260>)
 8006040:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7fe fe7a 	bl	8004d52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	08006311 	.word	0x08006311
 800606c:	ffff0000 	.word	0xffff0000

08006070 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af02      	add	r7, sp, #8
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	607a      	str	r2, [r7, #4]
 800607a:	603b      	str	r3, [r7, #0]
 800607c:	460b      	mov	r3, r1
 800607e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b08      	cmp	r3, #8
 800608a:	d006      	beq.n	800609a <I2C_MasterRequestWrite+0x2a>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d003      	beq.n	800609a <I2C_MasterRequestWrite+0x2a>
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006098:	d108      	bne.n	80060ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	e00b      	b.n	80060c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	2b12      	cmp	r3, #18
 80060b2:	d107      	bne.n	80060c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 f9c5 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00d      	beq.n	80060f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ea:	d103      	bne.n	80060f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e035      	b.n	8006164 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006100:	d108      	bne.n	8006114 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006102:	897b      	ldrh	r3, [r7, #10]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006110:	611a      	str	r2, [r3, #16]
 8006112:	e01b      	b.n	800614c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006114:	897b      	ldrh	r3, [r7, #10]
 8006116:	11db      	asrs	r3, r3, #7
 8006118:	b2db      	uxtb	r3, r3
 800611a:	f003 0306 	and.w	r3, r3, #6
 800611e:	b2db      	uxtb	r3, r3
 8006120:	f063 030f 	orn	r3, r3, #15
 8006124:	b2da      	uxtb	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	490e      	ldr	r1, [pc, #56]	; (800616c <I2C_MasterRequestWrite+0xfc>)
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f9eb 	bl	800650e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e010      	b.n	8006164 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006142:	897b      	ldrh	r3, [r7, #10]
 8006144:	b2da      	uxtb	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	4907      	ldr	r1, [pc, #28]	; (8006170 <I2C_MasterRequestWrite+0x100>)
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 f9db 	bl	800650e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	00010008 	.word	0x00010008
 8006170:	00010002 	.word	0x00010002

08006174 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af02      	add	r7, sp, #8
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	607a      	str	r2, [r7, #4]
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	460b      	mov	r3, r1
 8006182:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006198:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b08      	cmp	r3, #8
 800619e:	d006      	beq.n	80061ae <I2C_MasterRequestRead+0x3a>
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d003      	beq.n	80061ae <I2C_MasterRequestRead+0x3a>
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061ac:	d108      	bne.n	80061c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e00b      	b.n	80061d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	2b11      	cmp	r3, #17
 80061c6:	d107      	bne.n	80061d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f93b 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00d      	beq.n	800620c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061fe:	d103      	bne.n	8006208 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006206:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e079      	b.n	8006300 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006214:	d108      	bne.n	8006228 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006216:	897b      	ldrh	r3, [r7, #10]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f043 0301 	orr.w	r3, r3, #1
 800621e:	b2da      	uxtb	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	611a      	str	r2, [r3, #16]
 8006226:	e05f      	b.n	80062e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006228:	897b      	ldrh	r3, [r7, #10]
 800622a:	11db      	asrs	r3, r3, #7
 800622c:	b2db      	uxtb	r3, r3
 800622e:	f003 0306 	and.w	r3, r3, #6
 8006232:	b2db      	uxtb	r3, r3
 8006234:	f063 030f 	orn	r3, r3, #15
 8006238:	b2da      	uxtb	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	4930      	ldr	r1, [pc, #192]	; (8006308 <I2C_MasterRequestRead+0x194>)
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f961 	bl	800650e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e054      	b.n	8006300 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006256:	897b      	ldrh	r3, [r7, #10]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	4929      	ldr	r1, [pc, #164]	; (800630c <I2C_MasterRequestRead+0x198>)
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 f951 	bl	800650e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e044      	b.n	8006300 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006276:	2300      	movs	r3, #0
 8006278:	613b      	str	r3, [r7, #16]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800629a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f8d9 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00d      	beq.n	80062d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c2:	d103      	bne.n	80062cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e017      	b.n	8006300 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80062d0:	897b      	ldrh	r3, [r7, #10]
 80062d2:	11db      	asrs	r3, r3, #7
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	f003 0306 	and.w	r3, r3, #6
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	f063 030e 	orn	r3, r3, #14
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	4907      	ldr	r1, [pc, #28]	; (800630c <I2C_MasterRequestRead+0x198>)
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f90d 	bl	800650e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	00010008 	.word	0x00010008
 800630c:	00010002 	.word	0x00010002

08006310 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006328:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800632a:	4b4b      	ldr	r3, [pc, #300]	; (8006458 <I2C_DMAAbort+0x148>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	08db      	lsrs	r3, r3, #3
 8006330:	4a4a      	ldr	r2, [pc, #296]	; (800645c <I2C_DMAAbort+0x14c>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	0a1a      	lsrs	r2, r3, #8
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	00da      	lsls	r2, r3, #3
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f043 0220 	orr.w	r2, r3, #32
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006356:	e00a      	b.n	800636e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3b01      	subs	r3, #1
 800635c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800636c:	d0ea      	beq.n	8006344 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	2200      	movs	r2, #0
 800637c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	2200      	movs	r2, #0
 800638c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2200      	movs	r2, #0
 80063a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b0:	2200      	movs	r2, #0
 80063b2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	2200      	movs	r2, #0
 80063c2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0201 	bic.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b60      	cmp	r3, #96	; 0x60
 80063de:	d10e      	bne.n	80063fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2200      	movs	r2, #0
 80063f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80063f6:	6978      	ldr	r0, [r7, #20]
 80063f8:	f7fe fccf 	bl	8004d9a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063fc:	e027      	b.n	800644e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063fe:	7cfb      	ldrb	r3, [r7, #19]
 8006400:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006404:	2b28      	cmp	r3, #40	; 0x28
 8006406:	d117      	bne.n	8006438 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006426:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2200      	movs	r2, #0
 800642c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2228      	movs	r2, #40	; 0x28
 8006432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006436:	e007      	b.n	8006448 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006448:	6978      	ldr	r0, [r7, #20]
 800644a:	f7fe fc9d 	bl	8004d88 <HAL_I2C_ErrorCallback>
}
 800644e:	bf00      	nop
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000064 	.word	0x20000064
 800645c:	14f8b589 	.word	0x14f8b589

08006460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006470:	e025      	b.n	80064be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d021      	beq.n	80064be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647a:	f7fd fa05 	bl	8003888 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d116      	bne.n	80064be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2220      	movs	r2, #32
 800649a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	f043 0220 	orr.w	r2, r3, #32
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e023      	b.n	8006506 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	0c1b      	lsrs	r3, r3, #16
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d10d      	bne.n	80064e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	43da      	mvns	r2, r3
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4013      	ands	r3, r2
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	bf0c      	ite	eq
 80064da:	2301      	moveq	r3, #1
 80064dc:	2300      	movne	r3, #0
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	461a      	mov	r2, r3
 80064e2:	e00c      	b.n	80064fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	43da      	mvns	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4013      	ands	r3, r2
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	bf0c      	ite	eq
 80064f6:	2301      	moveq	r3, #1
 80064f8:	2300      	movne	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	429a      	cmp	r2, r3
 8006502:	d0b6      	beq.n	8006472 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
 800651a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800651c:	e051      	b.n	80065c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800652c:	d123      	bne.n	8006576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800653c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006546:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f043 0204 	orr.w	r2, r3, #4
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e046      	b.n	8006604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657c:	d021      	beq.n	80065c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657e:	f7fd f983 	bl	8003888 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	429a      	cmp	r2, r3
 800658c:	d302      	bcc.n	8006594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d116      	bne.n	80065c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f043 0220 	orr.w	r2, r3, #32
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e020      	b.n	8006604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d10c      	bne.n	80065e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	43da      	mvns	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4013      	ands	r3, r2
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bf14      	ite	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	2300      	moveq	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	e00b      	b.n	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	43da      	mvns	r2, r3
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4013      	ands	r3, r2
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	bf14      	ite	ne
 80065f8:	2301      	movne	r3, #1
 80065fa:	2300      	moveq	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d18d      	bne.n	800651e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006618:	e02d      	b.n	8006676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 f900 	bl	8006820 <I2C_IsAcknowledgeFailed>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e02d      	b.n	8006686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d021      	beq.n	8006676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006632:	f7fd f929 	bl	8003888 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	429a      	cmp	r2, r3
 8006640:	d302      	bcc.n	8006648 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d116      	bne.n	8006676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	f043 0220 	orr.w	r2, r3, #32
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e007      	b.n	8006686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006680:	2b80      	cmp	r3, #128	; 0x80
 8006682:	d1ca      	bne.n	800661a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800669a:	e02d      	b.n	80066f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f8bf 	bl	8006820 <I2C_IsAcknowledgeFailed>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e02d      	b.n	8006708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d021      	beq.n	80066f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b4:	f7fd f8e8 	bl	8003888 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d302      	bcc.n	80066ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d116      	bne.n	80066f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	f043 0220 	orr.w	r2, r3, #32
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e007      	b.n	8006708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b04      	cmp	r3, #4
 8006704:	d1ca      	bne.n	800669c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800671c:	4b13      	ldr	r3, [pc, #76]	; (800676c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	08db      	lsrs	r3, r3, #3
 8006722:	4a13      	ldr	r2, [pc, #76]	; (8006770 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006724:	fba2 2303 	umull	r2, r3, r2, r3
 8006728:	0a1a      	lsrs	r2, r3, #8
 800672a:	4613      	mov	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3b01      	subs	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d107      	bne.n	800674e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	f043 0220 	orr.w	r2, r3, #32
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e008      	b.n	8006760 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800675c:	d0e9      	beq.n	8006732 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000064 	.word	0x20000064
 8006770:	14f8b589 	.word	0x14f8b589

08006774 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006780:	e042      	b.n	8006808 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	f003 0310 	and.w	r3, r3, #16
 800678c:	2b10      	cmp	r3, #16
 800678e:	d119      	bne.n	80067c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f06f 0210 	mvn.w	r2, #16
 8006798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e029      	b.n	8006818 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c4:	f7fd f860 	bl	8003888 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d302      	bcc.n	80067da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d116      	bne.n	8006808 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f4:	f043 0220 	orr.w	r2, r3, #32
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e007      	b.n	8006818 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b40      	cmp	r3, #64	; 0x40
 8006814:	d1b5      	bne.n	8006782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006836:	d11b      	bne.n	8006870 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006840:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2220      	movs	r2, #32
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685c:	f043 0204 	orr.w	r2, r3, #4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e000      	b.n	8006872 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006888:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800688c:	d103      	bne.n	8006896 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006894:	e007      	b.n	80068a6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800689e:	d102      	bne.n	80068a6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2208      	movs	r2, #8
 80068a4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr

080068b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e272      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8087 	beq.w	80069de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068d0:	4b92      	ldr	r3, [pc, #584]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f003 030c 	and.w	r3, r3, #12
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d00c      	beq.n	80068f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80068dc:	4b8f      	ldr	r3, [pc, #572]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f003 030c 	and.w	r3, r3, #12
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d112      	bne.n	800690e <HAL_RCC_OscConfig+0x5e>
 80068e8:	4b8c      	ldr	r3, [pc, #560]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f4:	d10b      	bne.n	800690e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f6:	4b89      	ldr	r3, [pc, #548]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d06c      	beq.n	80069dc <HAL_RCC_OscConfig+0x12c>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d168      	bne.n	80069dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e24c      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006916:	d106      	bne.n	8006926 <HAL_RCC_OscConfig+0x76>
 8006918:	4b80      	ldr	r3, [pc, #512]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a7f      	ldr	r2, [pc, #508]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 800691e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	e02e      	b.n	8006984 <HAL_RCC_OscConfig+0xd4>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10c      	bne.n	8006948 <HAL_RCC_OscConfig+0x98>
 800692e:	4b7b      	ldr	r3, [pc, #492]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a7a      	ldr	r2, [pc, #488]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	4b78      	ldr	r3, [pc, #480]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a77      	ldr	r2, [pc, #476]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	e01d      	b.n	8006984 <HAL_RCC_OscConfig+0xd4>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006950:	d10c      	bne.n	800696c <HAL_RCC_OscConfig+0xbc>
 8006952:	4b72      	ldr	r3, [pc, #456]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a71      	ldr	r2, [pc, #452]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	4b6f      	ldr	r3, [pc, #444]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a6e      	ldr	r2, [pc, #440]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	e00b      	b.n	8006984 <HAL_RCC_OscConfig+0xd4>
 800696c:	4b6b      	ldr	r3, [pc, #428]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a6a      	ldr	r2, [pc, #424]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	4b68      	ldr	r3, [pc, #416]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a67      	ldr	r2, [pc, #412]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 800697e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006982:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d013      	beq.n	80069b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800698c:	f7fc ff7c 	bl	8003888 <HAL_GetTick>
 8006990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006994:	f7fc ff78 	bl	8003888 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b64      	cmp	r3, #100	; 0x64
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e200      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069a6:	4b5d      	ldr	r3, [pc, #372]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0f0      	beq.n	8006994 <HAL_RCC_OscConfig+0xe4>
 80069b2:	e014      	b.n	80069de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b4:	f7fc ff68 	bl	8003888 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069bc:	f7fc ff64 	bl	8003888 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b64      	cmp	r3, #100	; 0x64
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e1ec      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ce:	4b53      	ldr	r3, [pc, #332]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f0      	bne.n	80069bc <HAL_RCC_OscConfig+0x10c>
 80069da:	e000      	b.n	80069de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d063      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069ea:	4b4c      	ldr	r3, [pc, #304]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f003 030c 	and.w	r3, r3, #12
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00b      	beq.n	8006a0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80069f6:	4b49      	ldr	r3, [pc, #292]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f003 030c 	and.w	r3, r3, #12
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	d11c      	bne.n	8006a3c <HAL_RCC_OscConfig+0x18c>
 8006a02:	4b46      	ldr	r3, [pc, #280]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d116      	bne.n	8006a3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a0e:	4b43      	ldr	r3, [pc, #268]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <HAL_RCC_OscConfig+0x176>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d001      	beq.n	8006a26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e1c0      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a26:	4b3d      	ldr	r3, [pc, #244]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	4939      	ldr	r1, [pc, #228]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a3a:	e03a      	b.n	8006ab2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d020      	beq.n	8006a86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a44:	4b36      	ldr	r3, [pc, #216]	; (8006b20 <HAL_RCC_OscConfig+0x270>)
 8006a46:	2201      	movs	r2, #1
 8006a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4a:	f7fc ff1d 	bl	8003888 <HAL_GetTick>
 8006a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a50:	e008      	b.n	8006a64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a52:	f7fc ff19 	bl	8003888 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d901      	bls.n	8006a64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e1a1      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a64:	4b2d      	ldr	r3, [pc, #180]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0f0      	beq.n	8006a52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a70:	4b2a      	ldr	r3, [pc, #168]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	4927      	ldr	r1, [pc, #156]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	600b      	str	r3, [r1, #0]
 8006a84:	e015      	b.n	8006ab2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a86:	4b26      	ldr	r3, [pc, #152]	; (8006b20 <HAL_RCC_OscConfig+0x270>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8c:	f7fc fefc 	bl	8003888 <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a94:	f7fc fef8 	bl	8003888 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e180      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aa6:	4b1d      	ldr	r3, [pc, #116]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f0      	bne.n	8006a94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d03a      	beq.n	8006b34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d019      	beq.n	8006afa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ac6:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <HAL_RCC_OscConfig+0x274>)
 8006ac8:	2201      	movs	r2, #1
 8006aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006acc:	f7fc fedc 	bl	8003888 <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ad4:	f7fc fed8 	bl	8003888 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e160      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	; (8006b1c <HAL_RCC_OscConfig+0x26c>)
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0f0      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006af2:	2001      	movs	r0, #1
 8006af4:	f000 fac4 	bl	8007080 <RCC_Delay>
 8006af8:	e01c      	b.n	8006b34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006afa:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <HAL_RCC_OscConfig+0x274>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b00:	f7fc fec2 	bl	8003888 <HAL_GetTick>
 8006b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b06:	e00f      	b.n	8006b28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b08:	f7fc febe 	bl	8003888 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d908      	bls.n	8006b28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e146      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
 8006b1a:	bf00      	nop
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	42420000 	.word	0x42420000
 8006b24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b28:	4b92      	ldr	r3, [pc, #584]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e9      	bne.n	8006b08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80a6 	beq.w	8006c8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b42:	2300      	movs	r3, #0
 8006b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b46:	4b8b      	ldr	r3, [pc, #556]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10d      	bne.n	8006b6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b52:	4b88      	ldr	r3, [pc, #544]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	4a87      	ldr	r2, [pc, #540]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5c:	61d3      	str	r3, [r2, #28]
 8006b5e:	4b85      	ldr	r3, [pc, #532]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b66:	60bb      	str	r3, [r7, #8]
 8006b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b6e:	4b82      	ldr	r3, [pc, #520]	; (8006d78 <HAL_RCC_OscConfig+0x4c8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d118      	bne.n	8006bac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b7a:	4b7f      	ldr	r3, [pc, #508]	; (8006d78 <HAL_RCC_OscConfig+0x4c8>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a7e      	ldr	r2, [pc, #504]	; (8006d78 <HAL_RCC_OscConfig+0x4c8>)
 8006b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b86:	f7fc fe7f 	bl	8003888 <HAL_GetTick>
 8006b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b8e:	f7fc fe7b 	bl	8003888 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b64      	cmp	r3, #100	; 0x64
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e103      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba0:	4b75      	ldr	r3, [pc, #468]	; (8006d78 <HAL_RCC_OscConfig+0x4c8>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0f0      	beq.n	8006b8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d106      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x312>
 8006bb4:	4b6f      	ldr	r3, [pc, #444]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	4a6e      	ldr	r2, [pc, #440]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006bba:	f043 0301 	orr.w	r3, r3, #1
 8006bbe:	6213      	str	r3, [r2, #32]
 8006bc0:	e02d      	b.n	8006c1e <HAL_RCC_OscConfig+0x36e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10c      	bne.n	8006be4 <HAL_RCC_OscConfig+0x334>
 8006bca:	4b6a      	ldr	r3, [pc, #424]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	4a69      	ldr	r2, [pc, #420]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006bd0:	f023 0301 	bic.w	r3, r3, #1
 8006bd4:	6213      	str	r3, [r2, #32]
 8006bd6:	4b67      	ldr	r3, [pc, #412]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	4a66      	ldr	r2, [pc, #408]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006bdc:	f023 0304 	bic.w	r3, r3, #4
 8006be0:	6213      	str	r3, [r2, #32]
 8006be2:	e01c      	b.n	8006c1e <HAL_RCC_OscConfig+0x36e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	2b05      	cmp	r3, #5
 8006bea:	d10c      	bne.n	8006c06 <HAL_RCC_OscConfig+0x356>
 8006bec:	4b61      	ldr	r3, [pc, #388]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	4a60      	ldr	r2, [pc, #384]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006bf2:	f043 0304 	orr.w	r3, r3, #4
 8006bf6:	6213      	str	r3, [r2, #32]
 8006bf8:	4b5e      	ldr	r3, [pc, #376]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	4a5d      	ldr	r2, [pc, #372]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006bfe:	f043 0301 	orr.w	r3, r3, #1
 8006c02:	6213      	str	r3, [r2, #32]
 8006c04:	e00b      	b.n	8006c1e <HAL_RCC_OscConfig+0x36e>
 8006c06:	4b5b      	ldr	r3, [pc, #364]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	4a5a      	ldr	r2, [pc, #360]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006c0c:	f023 0301 	bic.w	r3, r3, #1
 8006c10:	6213      	str	r3, [r2, #32]
 8006c12:	4b58      	ldr	r3, [pc, #352]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	4a57      	ldr	r2, [pc, #348]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006c18:	f023 0304 	bic.w	r3, r3, #4
 8006c1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d015      	beq.n	8006c52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c26:	f7fc fe2f 	bl	8003888 <HAL_GetTick>
 8006c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2c:	e00a      	b.n	8006c44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c2e:	f7fc fe2b 	bl	8003888 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e0b1      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c44:	4b4b      	ldr	r3, [pc, #300]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0ee      	beq.n	8006c2e <HAL_RCC_OscConfig+0x37e>
 8006c50:	e014      	b.n	8006c7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c52:	f7fc fe19 	bl	8003888 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c58:	e00a      	b.n	8006c70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c5a:	f7fc fe15 	bl	8003888 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e09b      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c70:	4b40      	ldr	r3, [pc, #256]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1ee      	bne.n	8006c5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d105      	bne.n	8006c8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c82:	4b3c      	ldr	r3, [pc, #240]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	4a3b      	ldr	r2, [pc, #236]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 8087 	beq.w	8006da6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c98:	4b36      	ldr	r3, [pc, #216]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f003 030c 	and.w	r3, r3, #12
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d061      	beq.n	8006d68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d146      	bne.n	8006d3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cac:	4b33      	ldr	r3, [pc, #204]	; (8006d7c <HAL_RCC_OscConfig+0x4cc>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb2:	f7fc fde9 	bl	8003888 <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cb8:	e008      	b.n	8006ccc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cba:	f7fc fde5 	bl	8003888 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e06d      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ccc:	4b29      	ldr	r3, [pc, #164]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1f0      	bne.n	8006cba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce0:	d108      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006ce2:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	4921      	ldr	r1, [pc, #132]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cf4:	4b1f      	ldr	r3, [pc, #124]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a19      	ldr	r1, [r3, #32]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	430b      	orrs	r3, r1
 8006d06:	491b      	ldr	r1, [pc, #108]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d0c:	4b1b      	ldr	r3, [pc, #108]	; (8006d7c <HAL_RCC_OscConfig+0x4cc>)
 8006d0e:	2201      	movs	r2, #1
 8006d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d12:	f7fc fdb9 	bl	8003888 <HAL_GetTick>
 8006d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d18:	e008      	b.n	8006d2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d1a:	f7fc fdb5 	bl	8003888 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e03d      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d2c:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0f0      	beq.n	8006d1a <HAL_RCC_OscConfig+0x46a>
 8006d38:	e035      	b.n	8006da6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d3a:	4b10      	ldr	r3, [pc, #64]	; (8006d7c <HAL_RCC_OscConfig+0x4cc>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d40:	f7fc fda2 	bl	8003888 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d48:	f7fc fd9e 	bl	8003888 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e026      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d5a:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <HAL_RCC_OscConfig+0x4c4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1f0      	bne.n	8006d48 <HAL_RCC_OscConfig+0x498>
 8006d66:	e01e      	b.n	8006da6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d107      	bne.n	8006d80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e019      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
 8006d74:	40021000 	.word	0x40021000
 8006d78:	40007000 	.word	0x40007000
 8006d7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d80:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <HAL_RCC_OscConfig+0x500>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d106      	bne.n	8006da2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d001      	beq.n	8006da6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	40021000 	.word	0x40021000

08006db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e0d0      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006dc8:	4b6a      	ldr	r3, [pc, #424]	; (8006f74 <HAL_RCC_ClockConfig+0x1c0>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d910      	bls.n	8006df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dd6:	4b67      	ldr	r3, [pc, #412]	; (8006f74 <HAL_RCC_ClockConfig+0x1c0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f023 0207 	bic.w	r2, r3, #7
 8006dde:	4965      	ldr	r1, [pc, #404]	; (8006f74 <HAL_RCC_ClockConfig+0x1c0>)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de6:	4b63      	ldr	r3, [pc, #396]	; (8006f74 <HAL_RCC_ClockConfig+0x1c0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d001      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0b8      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d020      	beq.n	8006e46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d005      	beq.n	8006e1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e10:	4b59      	ldr	r3, [pc, #356]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	4a58      	ldr	r2, [pc, #352]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e28:	4b53      	ldr	r3, [pc, #332]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	4a52      	ldr	r2, [pc, #328]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006e32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e34:	4b50      	ldr	r3, [pc, #320]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	494d      	ldr	r1, [pc, #308]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d040      	beq.n	8006ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d107      	bne.n	8006e6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e5a:	4b47      	ldr	r3, [pc, #284]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d115      	bne.n	8006e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e07f      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d107      	bne.n	8006e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e72:	4b41      	ldr	r3, [pc, #260]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d109      	bne.n	8006e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e073      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e82:	4b3d      	ldr	r3, [pc, #244]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e06b      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e92:	4b39      	ldr	r3, [pc, #228]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f023 0203 	bic.w	r2, r3, #3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	4936      	ldr	r1, [pc, #216]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ea4:	f7fc fcf0 	bl	8003888 <HAL_GetTick>
 8006ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eaa:	e00a      	b.n	8006ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eac:	f7fc fcec 	bl	8003888 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e053      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec2:	4b2d      	ldr	r3, [pc, #180]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f003 020c 	and.w	r2, r3, #12
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d1eb      	bne.n	8006eac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ed4:	4b27      	ldr	r3, [pc, #156]	; (8006f74 <HAL_RCC_ClockConfig+0x1c0>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d210      	bcs.n	8006f04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ee2:	4b24      	ldr	r3, [pc, #144]	; (8006f74 <HAL_RCC_ClockConfig+0x1c0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f023 0207 	bic.w	r2, r3, #7
 8006eea:	4922      	ldr	r1, [pc, #136]	; (8006f74 <HAL_RCC_ClockConfig+0x1c0>)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ef2:	4b20      	ldr	r3, [pc, #128]	; (8006f74 <HAL_RCC_ClockConfig+0x1c0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d001      	beq.n	8006f04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e032      	b.n	8006f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f10:	4b19      	ldr	r3, [pc, #100]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	4916      	ldr	r1, [pc, #88]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d009      	beq.n	8006f42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f2e:	4b12      	ldr	r3, [pc, #72]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	490e      	ldr	r1, [pc, #56]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f42:	f000 f821 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 8006f46:	4602      	mov	r2, r0
 8006f48:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <HAL_RCC_ClockConfig+0x1c4>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	091b      	lsrs	r3, r3, #4
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	490a      	ldr	r1, [pc, #40]	; (8006f7c <HAL_RCC_ClockConfig+0x1c8>)
 8006f54:	5ccb      	ldrb	r3, [r1, r3]
 8006f56:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5a:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <HAL_RCC_ClockConfig+0x1cc>)
 8006f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f5e:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <HAL_RCC_ClockConfig+0x1d0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fc fc4e 	bl	8003804 <HAL_InitTick>

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	40022000 	.word	0x40022000
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	08007e84 	.word	0x08007e84
 8006f80:	20000064 	.word	0x20000064
 8006f84:	2000006c 	.word	0x2000006c

08006f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f88:	b490      	push	{r4, r7}
 8006f8a:	b08a      	sub	sp, #40	; 0x28
 8006f8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006f8e:	4b29      	ldr	r3, [pc, #164]	; (8007034 <HAL_RCC_GetSysClockFreq+0xac>)
 8006f90:	1d3c      	adds	r4, r7, #4
 8006f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006f98:	f240 2301 	movw	r3, #513	; 0x201
 8006f9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61fb      	str	r3, [r7, #28]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	61bb      	str	r3, [r7, #24]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006fb2:	4b21      	ldr	r3, [pc, #132]	; (8007038 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f003 030c 	and.w	r3, r3, #12
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d002      	beq.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d003      	beq.n	8006fce <HAL_RCC_GetSysClockFreq+0x46>
 8006fc6:	e02b      	b.n	8007020 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006fc8:	4b1c      	ldr	r3, [pc, #112]	; (800703c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006fca:	623b      	str	r3, [r7, #32]
      break;
 8006fcc:	e02b      	b.n	8007026 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	0c9b      	lsrs	r3, r3, #18
 8006fd2:	f003 030f 	and.w	r3, r3, #15
 8006fd6:	3328      	adds	r3, #40	; 0x28
 8006fd8:	443b      	add	r3, r7
 8006fda:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006fde:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d012      	beq.n	8007010 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006fea:	4b13      	ldr	r3, [pc, #76]	; (8007038 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	0c5b      	lsrs	r3, r3, #17
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	3328      	adds	r3, #40	; 0x28
 8006ff6:	443b      	add	r3, r7
 8006ff8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ffc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	4a0e      	ldr	r2, [pc, #56]	; (800703c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007002:	fb03 f202 	mul.w	r2, r3, r2
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	fbb2 f3f3 	udiv	r3, r2, r3
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
 800700e:	e004      	b.n	800701a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	4a0b      	ldr	r2, [pc, #44]	; (8007040 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007014:	fb02 f303 	mul.w	r3, r2, r3
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	623b      	str	r3, [r7, #32]
      break;
 800701e:	e002      	b.n	8007026 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007020:	4b06      	ldr	r3, [pc, #24]	; (800703c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007022:	623b      	str	r3, [r7, #32]
      break;
 8007024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007026:	6a3b      	ldr	r3, [r7, #32]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3728      	adds	r7, #40	; 0x28
 800702c:	46bd      	mov	sp, r7
 800702e:	bc90      	pop	{r4, r7}
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	08007e74 	.word	0x08007e74
 8007038:	40021000 	.word	0x40021000
 800703c:	007a1200 	.word	0x007a1200
 8007040:	003d0900 	.word	0x003d0900

08007044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007044:	b480      	push	{r7}
 8007046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007048:	4b02      	ldr	r3, [pc, #8]	; (8007054 <HAL_RCC_GetHCLKFreq+0x10>)
 800704a:	681b      	ldr	r3, [r3, #0]
}
 800704c:	4618      	mov	r0, r3
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr
 8007054:	20000064 	.word	0x20000064

08007058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800705c:	f7ff fff2 	bl	8007044 <HAL_RCC_GetHCLKFreq>
 8007060:	4602      	mov	r2, r0
 8007062:	4b05      	ldr	r3, [pc, #20]	; (8007078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	4903      	ldr	r1, [pc, #12]	; (800707c <HAL_RCC_GetPCLK1Freq+0x24>)
 800706e:	5ccb      	ldrb	r3, [r1, r3]
 8007070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007074:	4618      	mov	r0, r3
 8007076:	bd80      	pop	{r7, pc}
 8007078:	40021000 	.word	0x40021000
 800707c:	08007e94 	.word	0x08007e94

08007080 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007088:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <RCC_Delay+0x34>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <RCC_Delay+0x38>)
 800708e:	fba2 2303 	umull	r2, r3, r2, r3
 8007092:	0a5b      	lsrs	r3, r3, #9
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800709c:	bf00      	nop
  }
  while (Delay --);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	1e5a      	subs	r2, r3, #1
 80070a2:	60fa      	str	r2, [r7, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1f9      	bne.n	800709c <RCC_Delay+0x1c>
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr
 80070b4:	20000064 	.word	0x20000064
 80070b8:	10624dd3 	.word	0x10624dd3

080070bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e041      	b.n	8007152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d106      	bne.n	80070e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fc fa0e 	bl	8003504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3304      	adds	r3, #4
 80070f8:	4619      	mov	r1, r3
 80070fa:	4610      	mov	r0, r2
 80070fc:	f000 fb5c 	bl	80077b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b01      	cmp	r3, #1
 800716e:	d001      	beq.n	8007174 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e032      	b.n	80071da <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a18      	ldr	r2, [pc, #96]	; (80071e4 <HAL_TIM_Base_Start+0x88>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00e      	beq.n	80071a4 <HAL_TIM_Base_Start+0x48>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718e:	d009      	beq.n	80071a4 <HAL_TIM_Base_Start+0x48>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a14      	ldr	r2, [pc, #80]	; (80071e8 <HAL_TIM_Base_Start+0x8c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d004      	beq.n	80071a4 <HAL_TIM_Base_Start+0x48>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a13      	ldr	r2, [pc, #76]	; (80071ec <HAL_TIM_Base_Start+0x90>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d111      	bne.n	80071c8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f003 0307 	and.w	r3, r3, #7
 80071ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b06      	cmp	r3, #6
 80071b4:	d010      	beq.n	80071d8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f042 0201 	orr.w	r2, r2, #1
 80071c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c6:	e007      	b.n	80071d8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0201 	orr.w	r2, r2, #1
 80071d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr
 80071e4:	40012c00 	.word	0x40012c00
 80071e8:	40000400 	.word	0x40000400
 80071ec:	40000800 	.word	0x40000800

080071f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b01      	cmp	r3, #1
 8007202:	d001      	beq.n	8007208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e03a      	b.n	800727e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68da      	ldr	r2, [r3, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a18      	ldr	r2, [pc, #96]	; (8007288 <HAL_TIM_Base_Start_IT+0x98>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00e      	beq.n	8007248 <HAL_TIM_Base_Start_IT+0x58>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007232:	d009      	beq.n	8007248 <HAL_TIM_Base_Start_IT+0x58>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a14      	ldr	r2, [pc, #80]	; (800728c <HAL_TIM_Base_Start_IT+0x9c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <HAL_TIM_Base_Start_IT+0x58>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a13      	ldr	r2, [pc, #76]	; (8007290 <HAL_TIM_Base_Start_IT+0xa0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d111      	bne.n	800726c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b06      	cmp	r3, #6
 8007258:	d010      	beq.n	800727c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0201 	orr.w	r2, r2, #1
 8007268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726a:	e007      	b.n	800727c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0201 	orr.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	bc80      	pop	{r7}
 8007286:	4770      	bx	lr
 8007288:	40012c00 	.word	0x40012c00
 800728c:	40000400 	.word	0x40000400
 8007290:	40000800 	.word	0x40000800

08007294 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d109      	bne.n	80072b8 <HAL_TIM_PWM_Start+0x24>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	bf14      	ite	ne
 80072b0:	2301      	movne	r3, #1
 80072b2:	2300      	moveq	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	e022      	b.n	80072fe <HAL_TIM_PWM_Start+0x6a>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d109      	bne.n	80072d2 <HAL_TIM_PWM_Start+0x3e>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	bf14      	ite	ne
 80072ca:	2301      	movne	r3, #1
 80072cc:	2300      	moveq	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	e015      	b.n	80072fe <HAL_TIM_PWM_Start+0x6a>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d109      	bne.n	80072ec <HAL_TIM_PWM_Start+0x58>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	bf14      	ite	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	2300      	moveq	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	e008      	b.n	80072fe <HAL_TIM_PWM_Start+0x6a>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	bf14      	ite	ne
 80072f8:	2301      	movne	r3, #1
 80072fa:	2300      	moveq	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e05e      	b.n	80073c4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <HAL_TIM_PWM_Start+0x82>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007314:	e013      	b.n	800733e <HAL_TIM_PWM_Start+0xaa>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b04      	cmp	r3, #4
 800731a:	d104      	bne.n	8007326 <HAL_TIM_PWM_Start+0x92>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007324:	e00b      	b.n	800733e <HAL_TIM_PWM_Start+0xaa>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b08      	cmp	r3, #8
 800732a:	d104      	bne.n	8007336 <HAL_TIM_PWM_Start+0xa2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007334:	e003      	b.n	800733e <HAL_TIM_PWM_Start+0xaa>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2202      	movs	r2, #2
 800733a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2201      	movs	r2, #1
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f000 fb2e 	bl	80079a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a1e      	ldr	r2, [pc, #120]	; (80073cc <HAL_TIM_PWM_Start+0x138>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d107      	bne.n	8007366 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a18      	ldr	r2, [pc, #96]	; (80073cc <HAL_TIM_PWM_Start+0x138>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00e      	beq.n	800738e <HAL_TIM_PWM_Start+0xfa>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007378:	d009      	beq.n	800738e <HAL_TIM_PWM_Start+0xfa>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a14      	ldr	r2, [pc, #80]	; (80073d0 <HAL_TIM_PWM_Start+0x13c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d004      	beq.n	800738e <HAL_TIM_PWM_Start+0xfa>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a12      	ldr	r2, [pc, #72]	; (80073d4 <HAL_TIM_PWM_Start+0x140>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d111      	bne.n	80073b2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b06      	cmp	r3, #6
 800739e:	d010      	beq.n	80073c2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0201 	orr.w	r2, r2, #1
 80073ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b0:	e007      	b.n	80073c2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f042 0201 	orr.w	r2, r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	40012c00 	.word	0x40012c00
 80073d0:	40000400 	.word	0x40000400
 80073d4:	40000800 	.word	0x40000800

080073d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d122      	bne.n	8007434 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d11b      	bne.n	8007434 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f06f 0202 	mvn.w	r2, #2
 8007404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f9b1 	bl	8007782 <HAL_TIM_IC_CaptureCallback>
 8007420:	e005      	b.n	800742e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f9a4 	bl	8007770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f9b3 	bl	8007794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b04      	cmp	r3, #4
 8007440:	d122      	bne.n	8007488 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b04      	cmp	r3, #4
 800744e:	d11b      	bne.n	8007488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0204 	mvn.w	r2, #4
 8007458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2202      	movs	r2, #2
 800745e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f987 	bl	8007782 <HAL_TIM_IC_CaptureCallback>
 8007474:	e005      	b.n	8007482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f97a 	bl	8007770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f989 	bl	8007794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f003 0308 	and.w	r3, r3, #8
 8007492:	2b08      	cmp	r3, #8
 8007494:	d122      	bne.n	80074dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f003 0308 	and.w	r3, r3, #8
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d11b      	bne.n	80074dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f06f 0208 	mvn.w	r2, #8
 80074ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2204      	movs	r2, #4
 80074b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f95d 	bl	8007782 <HAL_TIM_IC_CaptureCallback>
 80074c8:	e005      	b.n	80074d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f950 	bl	8007770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f95f 	bl	8007794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0310 	and.w	r3, r3, #16
 80074e6:	2b10      	cmp	r3, #16
 80074e8:	d122      	bne.n	8007530 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f003 0310 	and.w	r3, r3, #16
 80074f4:	2b10      	cmp	r3, #16
 80074f6:	d11b      	bne.n	8007530 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f06f 0210 	mvn.w	r2, #16
 8007500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2208      	movs	r2, #8
 8007506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f933 	bl	8007782 <HAL_TIM_IC_CaptureCallback>
 800751c:	e005      	b.n	800752a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f926 	bl	8007770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f935 	bl	8007794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b01      	cmp	r3, #1
 800753c:	d10e      	bne.n	800755c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b01      	cmp	r3, #1
 800754a:	d107      	bne.n	800755c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0201 	mvn.w	r2, #1
 8007554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fc f8b0 	bl	80036bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007566:	2b80      	cmp	r3, #128	; 0x80
 8007568:	d10e      	bne.n	8007588 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007574:	2b80      	cmp	r3, #128	; 0x80
 8007576:	d107      	bne.n	8007588 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fa9b 	bl	8007abe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007592:	2b40      	cmp	r3, #64	; 0x40
 8007594:	d10e      	bne.n	80075b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b40      	cmp	r3, #64	; 0x40
 80075a2:	d107      	bne.n	80075b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f8f9 	bl	80077a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f003 0320 	and.w	r3, r3, #32
 80075be:	2b20      	cmp	r3, #32
 80075c0:	d10e      	bne.n	80075e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	d107      	bne.n	80075e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0220 	mvn.w	r2, #32
 80075d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa66 	bl	8007aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_TIM_ConfigClockSource+0x18>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e0b3      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x180>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800761e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007626:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007638:	d03e      	beq.n	80076b8 <HAL_TIM_ConfigClockSource+0xd0>
 800763a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800763e:	f200 8087 	bhi.w	8007750 <HAL_TIM_ConfigClockSource+0x168>
 8007642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007646:	f000 8085 	beq.w	8007754 <HAL_TIM_ConfigClockSource+0x16c>
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764e:	d87f      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x168>
 8007650:	2b70      	cmp	r3, #112	; 0x70
 8007652:	d01a      	beq.n	800768a <HAL_TIM_ConfigClockSource+0xa2>
 8007654:	2b70      	cmp	r3, #112	; 0x70
 8007656:	d87b      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x168>
 8007658:	2b60      	cmp	r3, #96	; 0x60
 800765a:	d050      	beq.n	80076fe <HAL_TIM_ConfigClockSource+0x116>
 800765c:	2b60      	cmp	r3, #96	; 0x60
 800765e:	d877      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x168>
 8007660:	2b50      	cmp	r3, #80	; 0x50
 8007662:	d03c      	beq.n	80076de <HAL_TIM_ConfigClockSource+0xf6>
 8007664:	2b50      	cmp	r3, #80	; 0x50
 8007666:	d873      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x168>
 8007668:	2b40      	cmp	r3, #64	; 0x40
 800766a:	d058      	beq.n	800771e <HAL_TIM_ConfigClockSource+0x136>
 800766c:	2b40      	cmp	r3, #64	; 0x40
 800766e:	d86f      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x168>
 8007670:	2b30      	cmp	r3, #48	; 0x30
 8007672:	d064      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x156>
 8007674:	2b30      	cmp	r3, #48	; 0x30
 8007676:	d86b      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x168>
 8007678:	2b20      	cmp	r3, #32
 800767a:	d060      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x156>
 800767c:	2b20      	cmp	r3, #32
 800767e:	d867      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x168>
 8007680:	2b00      	cmp	r3, #0
 8007682:	d05c      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x156>
 8007684:	2b10      	cmp	r3, #16
 8007686:	d05a      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007688:	e062      	b.n	8007750 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6818      	ldr	r0, [r3, #0]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	6899      	ldr	r1, [r3, #8]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f000 f966 	bl	800796a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	609a      	str	r2, [r3, #8]
      break;
 80076b6:	e04e      	b.n	8007756 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	6899      	ldr	r1, [r3, #8]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f000 f94f 	bl	800796a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076da:	609a      	str	r2, [r3, #8]
      break;
 80076dc:	e03b      	b.n	8007756 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6818      	ldr	r0, [r3, #0]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	6859      	ldr	r1, [r3, #4]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	461a      	mov	r2, r3
 80076ec:	f000 f8c6 	bl	800787c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2150      	movs	r1, #80	; 0x50
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 f91d 	bl	8007936 <TIM_ITRx_SetConfig>
      break;
 80076fc:	e02b      	b.n	8007756 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6818      	ldr	r0, [r3, #0]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	6859      	ldr	r1, [r3, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	461a      	mov	r2, r3
 800770c:	f000 f8e4 	bl	80078d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2160      	movs	r1, #96	; 0x60
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f90d 	bl	8007936 <TIM_ITRx_SetConfig>
      break;
 800771c:	e01b      	b.n	8007756 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	6859      	ldr	r1, [r3, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	461a      	mov	r2, r3
 800772c:	f000 f8a6 	bl	800787c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2140      	movs	r1, #64	; 0x40
 8007736:	4618      	mov	r0, r3
 8007738:	f000 f8fd 	bl	8007936 <TIM_ITRx_SetConfig>
      break;
 800773c:	e00b      	b.n	8007756 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f000 f8f4 	bl	8007936 <TIM_ITRx_SetConfig>
        break;
 800774e:	e002      	b.n	8007756 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007750:	bf00      	nop
 8007752:	e000      	b.n	8007756 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007754:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr

08007782 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr

08007794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr

080077a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr

080077b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a29      	ldr	r2, [pc, #164]	; (8007870 <TIM_Base_SetConfig+0xb8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00b      	beq.n	80077e8 <TIM_Base_SetConfig+0x30>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d6:	d007      	beq.n	80077e8 <TIM_Base_SetConfig+0x30>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a26      	ldr	r2, [pc, #152]	; (8007874 <TIM_Base_SetConfig+0xbc>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_Base_SetConfig+0x30>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a25      	ldr	r2, [pc, #148]	; (8007878 <TIM_Base_SetConfig+0xc0>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d108      	bne.n	80077fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a1c      	ldr	r2, [pc, #112]	; (8007870 <TIM_Base_SetConfig+0xb8>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d00b      	beq.n	800781a <TIM_Base_SetConfig+0x62>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007808:	d007      	beq.n	800781a <TIM_Base_SetConfig+0x62>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a19      	ldr	r2, [pc, #100]	; (8007874 <TIM_Base_SetConfig+0xbc>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d003      	beq.n	800781a <TIM_Base_SetConfig+0x62>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a18      	ldr	r2, [pc, #96]	; (8007878 <TIM_Base_SetConfig+0xc0>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d108      	bne.n	800782c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4313      	orrs	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a07      	ldr	r2, [pc, #28]	; (8007870 <TIM_Base_SetConfig+0xb8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d103      	bne.n	8007860 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	691a      	ldr	r2, [r3, #16]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	615a      	str	r2, [r3, #20]
}
 8007866:	bf00      	nop
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	bc80      	pop	{r7}
 800786e:	4770      	bx	lr
 8007870:	40012c00 	.word	0x40012c00
 8007874:	40000400 	.word	0x40000400
 8007878:	40000800 	.word	0x40000800

0800787c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	f023 0201 	bic.w	r2, r3, #1
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	011b      	lsls	r3, r3, #4
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f023 030a 	bic.w	r3, r3, #10
 80078b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	621a      	str	r2, [r3, #32]
}
 80078ce:	bf00      	nop
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bc80      	pop	{r7}
 80078d6:	4770      	bx	lr

080078d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	f023 0210 	bic.w	r2, r3, #16
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007902:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	031b      	lsls	r3, r3, #12
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	4313      	orrs	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007914:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	011b      	lsls	r3, r3, #4
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	621a      	str	r2, [r3, #32]
}
 800792c:	bf00      	nop
 800792e:	371c      	adds	r7, #28
 8007930:	46bd      	mov	sp, r7
 8007932:	bc80      	pop	{r7}
 8007934:	4770      	bx	lr

08007936 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	f043 0307 	orr.w	r3, r3, #7
 8007958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	609a      	str	r2, [r3, #8]
}
 8007960:	bf00      	nop
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr

0800796a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800796a:	b480      	push	{r7}
 800796c:	b087      	sub	sp, #28
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	607a      	str	r2, [r7, #4]
 8007976:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007984:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	021a      	lsls	r2, r3, #8
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	431a      	orrs	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	4313      	orrs	r3, r2
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4313      	orrs	r3, r2
 8007996:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	609a      	str	r2, [r3, #8]
}
 800799e:	bf00      	nop
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr

080079a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f003 031f 	and.w	r3, r3, #31
 80079ba:	2201      	movs	r2, #1
 80079bc:	fa02 f303 	lsl.w	r3, r2, r3
 80079c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a1a      	ldr	r2, [r3, #32]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	43db      	mvns	r3, r3
 80079ca:	401a      	ands	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a1a      	ldr	r2, [r3, #32]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f003 031f 	and.w	r3, r3, #31
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	fa01 f303 	lsl.w	r3, r1, r3
 80079e0:	431a      	orrs	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	621a      	str	r2, [r3, #32]
}
 80079e6:	bf00      	nop
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bc80      	pop	{r7}
 80079ee:	4770      	bx	lr

080079f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d101      	bne.n	8007a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e046      	b.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a16      	ldr	r2, [pc, #88]	; (8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00e      	beq.n	8007a6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a54:	d009      	beq.n	8007a6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a12      	ldr	r2, [pc, #72]	; (8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d004      	beq.n	8007a6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a10      	ldr	r2, [pc, #64]	; (8007aa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d10c      	bne.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bc80      	pop	{r7}
 8007a9e:	4770      	bx	lr
 8007aa0:	40012c00 	.word	0x40012c00
 8007aa4:	40000400 	.word	0x40000400
 8007aa8:	40000800 	.word	0x40000800

08007aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr

08007abe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bc80      	pop	{r7}
 8007ace:	4770      	bx	lr

08007ad0 <__errno>:
 8007ad0:	4b01      	ldr	r3, [pc, #4]	; (8007ad8 <__errno+0x8>)
 8007ad2:	6818      	ldr	r0, [r3, #0]
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	20000074 	.word	0x20000074

08007adc <__libc_init_array>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	2600      	movs	r6, #0
 8007ae0:	4d0c      	ldr	r5, [pc, #48]	; (8007b14 <__libc_init_array+0x38>)
 8007ae2:	4c0d      	ldr	r4, [pc, #52]	; (8007b18 <__libc_init_array+0x3c>)
 8007ae4:	1b64      	subs	r4, r4, r5
 8007ae6:	10a4      	asrs	r4, r4, #2
 8007ae8:	42a6      	cmp	r6, r4
 8007aea:	d109      	bne.n	8007b00 <__libc_init_array+0x24>
 8007aec:	f000 f92c 	bl	8007d48 <_init>
 8007af0:	2600      	movs	r6, #0
 8007af2:	4d0a      	ldr	r5, [pc, #40]	; (8007b1c <__libc_init_array+0x40>)
 8007af4:	4c0a      	ldr	r4, [pc, #40]	; (8007b20 <__libc_init_array+0x44>)
 8007af6:	1b64      	subs	r4, r4, r5
 8007af8:	10a4      	asrs	r4, r4, #2
 8007afa:	42a6      	cmp	r6, r4
 8007afc:	d105      	bne.n	8007b0a <__libc_init_array+0x2e>
 8007afe:	bd70      	pop	{r4, r5, r6, pc}
 8007b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b04:	4798      	blx	r3
 8007b06:	3601      	adds	r6, #1
 8007b08:	e7ee      	b.n	8007ae8 <__libc_init_array+0xc>
 8007b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0e:	4798      	blx	r3
 8007b10:	3601      	adds	r6, #1
 8007b12:	e7f2      	b.n	8007afa <__libc_init_array+0x1e>
 8007b14:	08007e9c 	.word	0x08007e9c
 8007b18:	08007e9c 	.word	0x08007e9c
 8007b1c:	08007e9c 	.word	0x08007e9c
 8007b20:	08007ea0 	.word	0x08007ea0

08007b24 <malloc>:
 8007b24:	4b02      	ldr	r3, [pc, #8]	; (8007b30 <malloc+0xc>)
 8007b26:	4601      	mov	r1, r0
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	f000 b87b 	b.w	8007c24 <_malloc_r>
 8007b2e:	bf00      	nop
 8007b30:	20000074 	.word	0x20000074

08007b34 <free>:
 8007b34:	4b02      	ldr	r3, [pc, #8]	; (8007b40 <free+0xc>)
 8007b36:	4601      	mov	r1, r0
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	f000 b80b 	b.w	8007b54 <_free_r>
 8007b3e:	bf00      	nop
 8007b40:	20000074 	.word	0x20000074

08007b44 <memset>:
 8007b44:	4603      	mov	r3, r0
 8007b46:	4402      	add	r2, r0
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d100      	bne.n	8007b4e <memset+0xa>
 8007b4c:	4770      	bx	lr
 8007b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b52:	e7f9      	b.n	8007b48 <memset+0x4>

08007b54 <_free_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4605      	mov	r5, r0
 8007b58:	2900      	cmp	r1, #0
 8007b5a:	d040      	beq.n	8007bde <_free_r+0x8a>
 8007b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b60:	1f0c      	subs	r4, r1, #4
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bfb8      	it	lt
 8007b66:	18e4      	addlt	r4, r4, r3
 8007b68:	f000 f8e0 	bl	8007d2c <__malloc_lock>
 8007b6c:	4a1c      	ldr	r2, [pc, #112]	; (8007be0 <_free_r+0x8c>)
 8007b6e:	6813      	ldr	r3, [r2, #0]
 8007b70:	b933      	cbnz	r3, 8007b80 <_free_r+0x2c>
 8007b72:	6063      	str	r3, [r4, #4]
 8007b74:	6014      	str	r4, [r2, #0]
 8007b76:	4628      	mov	r0, r5
 8007b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b7c:	f000 b8dc 	b.w	8007d38 <__malloc_unlock>
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	d908      	bls.n	8007b96 <_free_r+0x42>
 8007b84:	6820      	ldr	r0, [r4, #0]
 8007b86:	1821      	adds	r1, r4, r0
 8007b88:	428b      	cmp	r3, r1
 8007b8a:	bf01      	itttt	eq
 8007b8c:	6819      	ldreq	r1, [r3, #0]
 8007b8e:	685b      	ldreq	r3, [r3, #4]
 8007b90:	1809      	addeq	r1, r1, r0
 8007b92:	6021      	streq	r1, [r4, #0]
 8007b94:	e7ed      	b.n	8007b72 <_free_r+0x1e>
 8007b96:	461a      	mov	r2, r3
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	b10b      	cbz	r3, 8007ba0 <_free_r+0x4c>
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	d9fa      	bls.n	8007b96 <_free_r+0x42>
 8007ba0:	6811      	ldr	r1, [r2, #0]
 8007ba2:	1850      	adds	r0, r2, r1
 8007ba4:	42a0      	cmp	r0, r4
 8007ba6:	d10b      	bne.n	8007bc0 <_free_r+0x6c>
 8007ba8:	6820      	ldr	r0, [r4, #0]
 8007baa:	4401      	add	r1, r0
 8007bac:	1850      	adds	r0, r2, r1
 8007bae:	4283      	cmp	r3, r0
 8007bb0:	6011      	str	r1, [r2, #0]
 8007bb2:	d1e0      	bne.n	8007b76 <_free_r+0x22>
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	4401      	add	r1, r0
 8007bba:	6011      	str	r1, [r2, #0]
 8007bbc:	6053      	str	r3, [r2, #4]
 8007bbe:	e7da      	b.n	8007b76 <_free_r+0x22>
 8007bc0:	d902      	bls.n	8007bc8 <_free_r+0x74>
 8007bc2:	230c      	movs	r3, #12
 8007bc4:	602b      	str	r3, [r5, #0]
 8007bc6:	e7d6      	b.n	8007b76 <_free_r+0x22>
 8007bc8:	6820      	ldr	r0, [r4, #0]
 8007bca:	1821      	adds	r1, r4, r0
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	bf01      	itttt	eq
 8007bd0:	6819      	ldreq	r1, [r3, #0]
 8007bd2:	685b      	ldreq	r3, [r3, #4]
 8007bd4:	1809      	addeq	r1, r1, r0
 8007bd6:	6021      	streq	r1, [r4, #0]
 8007bd8:	6063      	str	r3, [r4, #4]
 8007bda:	6054      	str	r4, [r2, #4]
 8007bdc:	e7cb      	b.n	8007b76 <_free_r+0x22>
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	20000248 	.word	0x20000248

08007be4 <sbrk_aligned>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	4e0e      	ldr	r6, [pc, #56]	; (8007c20 <sbrk_aligned+0x3c>)
 8007be8:	460c      	mov	r4, r1
 8007bea:	6831      	ldr	r1, [r6, #0]
 8007bec:	4605      	mov	r5, r0
 8007bee:	b911      	cbnz	r1, 8007bf6 <sbrk_aligned+0x12>
 8007bf0:	f000 f88c 	bl	8007d0c <_sbrk_r>
 8007bf4:	6030      	str	r0, [r6, #0]
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f000 f887 	bl	8007d0c <_sbrk_r>
 8007bfe:	1c43      	adds	r3, r0, #1
 8007c00:	d00a      	beq.n	8007c18 <sbrk_aligned+0x34>
 8007c02:	1cc4      	adds	r4, r0, #3
 8007c04:	f024 0403 	bic.w	r4, r4, #3
 8007c08:	42a0      	cmp	r0, r4
 8007c0a:	d007      	beq.n	8007c1c <sbrk_aligned+0x38>
 8007c0c:	1a21      	subs	r1, r4, r0
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f000 f87c 	bl	8007d0c <_sbrk_r>
 8007c14:	3001      	adds	r0, #1
 8007c16:	d101      	bne.n	8007c1c <sbrk_aligned+0x38>
 8007c18:	f04f 34ff 	mov.w	r4, #4294967295
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	2000024c 	.word	0x2000024c

08007c24 <_malloc_r>:
 8007c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c28:	1ccd      	adds	r5, r1, #3
 8007c2a:	f025 0503 	bic.w	r5, r5, #3
 8007c2e:	3508      	adds	r5, #8
 8007c30:	2d0c      	cmp	r5, #12
 8007c32:	bf38      	it	cc
 8007c34:	250c      	movcc	r5, #12
 8007c36:	2d00      	cmp	r5, #0
 8007c38:	4607      	mov	r7, r0
 8007c3a:	db01      	blt.n	8007c40 <_malloc_r+0x1c>
 8007c3c:	42a9      	cmp	r1, r5
 8007c3e:	d905      	bls.n	8007c4c <_malloc_r+0x28>
 8007c40:	230c      	movs	r3, #12
 8007c42:	2600      	movs	r6, #0
 8007c44:	603b      	str	r3, [r7, #0]
 8007c46:	4630      	mov	r0, r6
 8007c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c4c:	4e2e      	ldr	r6, [pc, #184]	; (8007d08 <_malloc_r+0xe4>)
 8007c4e:	f000 f86d 	bl	8007d2c <__malloc_lock>
 8007c52:	6833      	ldr	r3, [r6, #0]
 8007c54:	461c      	mov	r4, r3
 8007c56:	bb34      	cbnz	r4, 8007ca6 <_malloc_r+0x82>
 8007c58:	4629      	mov	r1, r5
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	f7ff ffc2 	bl	8007be4 <sbrk_aligned>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	4604      	mov	r4, r0
 8007c64:	d14d      	bne.n	8007d02 <_malloc_r+0xde>
 8007c66:	6834      	ldr	r4, [r6, #0]
 8007c68:	4626      	mov	r6, r4
 8007c6a:	2e00      	cmp	r6, #0
 8007c6c:	d140      	bne.n	8007cf0 <_malloc_r+0xcc>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	4631      	mov	r1, r6
 8007c72:	4638      	mov	r0, r7
 8007c74:	eb04 0803 	add.w	r8, r4, r3
 8007c78:	f000 f848 	bl	8007d0c <_sbrk_r>
 8007c7c:	4580      	cmp	r8, r0
 8007c7e:	d13a      	bne.n	8007cf6 <_malloc_r+0xd2>
 8007c80:	6821      	ldr	r1, [r4, #0]
 8007c82:	3503      	adds	r5, #3
 8007c84:	1a6d      	subs	r5, r5, r1
 8007c86:	f025 0503 	bic.w	r5, r5, #3
 8007c8a:	3508      	adds	r5, #8
 8007c8c:	2d0c      	cmp	r5, #12
 8007c8e:	bf38      	it	cc
 8007c90:	250c      	movcc	r5, #12
 8007c92:	4638      	mov	r0, r7
 8007c94:	4629      	mov	r1, r5
 8007c96:	f7ff ffa5 	bl	8007be4 <sbrk_aligned>
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d02b      	beq.n	8007cf6 <_malloc_r+0xd2>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	442b      	add	r3, r5
 8007ca2:	6023      	str	r3, [r4, #0]
 8007ca4:	e00e      	b.n	8007cc4 <_malloc_r+0xa0>
 8007ca6:	6822      	ldr	r2, [r4, #0]
 8007ca8:	1b52      	subs	r2, r2, r5
 8007caa:	d41e      	bmi.n	8007cea <_malloc_r+0xc6>
 8007cac:	2a0b      	cmp	r2, #11
 8007cae:	d916      	bls.n	8007cde <_malloc_r+0xba>
 8007cb0:	1961      	adds	r1, r4, r5
 8007cb2:	42a3      	cmp	r3, r4
 8007cb4:	6025      	str	r5, [r4, #0]
 8007cb6:	bf18      	it	ne
 8007cb8:	6059      	strne	r1, [r3, #4]
 8007cba:	6863      	ldr	r3, [r4, #4]
 8007cbc:	bf08      	it	eq
 8007cbe:	6031      	streq	r1, [r6, #0]
 8007cc0:	5162      	str	r2, [r4, r5]
 8007cc2:	604b      	str	r3, [r1, #4]
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f104 060b 	add.w	r6, r4, #11
 8007cca:	f000 f835 	bl	8007d38 <__malloc_unlock>
 8007cce:	f026 0607 	bic.w	r6, r6, #7
 8007cd2:	1d23      	adds	r3, r4, #4
 8007cd4:	1af2      	subs	r2, r6, r3
 8007cd6:	d0b6      	beq.n	8007c46 <_malloc_r+0x22>
 8007cd8:	1b9b      	subs	r3, r3, r6
 8007cda:	50a3      	str	r3, [r4, r2]
 8007cdc:	e7b3      	b.n	8007c46 <_malloc_r+0x22>
 8007cde:	6862      	ldr	r2, [r4, #4]
 8007ce0:	42a3      	cmp	r3, r4
 8007ce2:	bf0c      	ite	eq
 8007ce4:	6032      	streq	r2, [r6, #0]
 8007ce6:	605a      	strne	r2, [r3, #4]
 8007ce8:	e7ec      	b.n	8007cc4 <_malloc_r+0xa0>
 8007cea:	4623      	mov	r3, r4
 8007cec:	6864      	ldr	r4, [r4, #4]
 8007cee:	e7b2      	b.n	8007c56 <_malloc_r+0x32>
 8007cf0:	4634      	mov	r4, r6
 8007cf2:	6876      	ldr	r6, [r6, #4]
 8007cf4:	e7b9      	b.n	8007c6a <_malloc_r+0x46>
 8007cf6:	230c      	movs	r3, #12
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	603b      	str	r3, [r7, #0]
 8007cfc:	f000 f81c 	bl	8007d38 <__malloc_unlock>
 8007d00:	e7a1      	b.n	8007c46 <_malloc_r+0x22>
 8007d02:	6025      	str	r5, [r4, #0]
 8007d04:	e7de      	b.n	8007cc4 <_malloc_r+0xa0>
 8007d06:	bf00      	nop
 8007d08:	20000248 	.word	0x20000248

08007d0c <_sbrk_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	2300      	movs	r3, #0
 8007d10:	4d05      	ldr	r5, [pc, #20]	; (8007d28 <_sbrk_r+0x1c>)
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	602b      	str	r3, [r5, #0]
 8007d18:	f7fb fc72 	bl	8003600 <_sbrk>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d102      	bne.n	8007d26 <_sbrk_r+0x1a>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	b103      	cbz	r3, 8007d26 <_sbrk_r+0x1a>
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	20000250 	.word	0x20000250

08007d2c <__malloc_lock>:
 8007d2c:	4801      	ldr	r0, [pc, #4]	; (8007d34 <__malloc_lock+0x8>)
 8007d2e:	f000 b809 	b.w	8007d44 <__retarget_lock_acquire_recursive>
 8007d32:	bf00      	nop
 8007d34:	20000254 	.word	0x20000254

08007d38 <__malloc_unlock>:
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <__malloc_unlock+0x8>)
 8007d3a:	f000 b804 	b.w	8007d46 <__retarget_lock_release_recursive>
 8007d3e:	bf00      	nop
 8007d40:	20000254 	.word	0x20000254

08007d44 <__retarget_lock_acquire_recursive>:
 8007d44:	4770      	bx	lr

08007d46 <__retarget_lock_release_recursive>:
 8007d46:	4770      	bx	lr

08007d48 <_init>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	bf00      	nop
 8007d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4e:	bc08      	pop	{r3}
 8007d50:	469e      	mov	lr, r3
 8007d52:	4770      	bx	lr

08007d54 <_fini>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	bf00      	nop
 8007d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5a:	bc08      	pop	{r3}
 8007d5c:	469e      	mov	lr, r3
 8007d5e:	4770      	bx	lr
